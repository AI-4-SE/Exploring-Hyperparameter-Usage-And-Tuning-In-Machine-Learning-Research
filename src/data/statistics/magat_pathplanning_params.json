{
    "utils/graphUtils/dataTools.py": {
        "sklearn": {
            "pairwise_distances_1889": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CountVectorizer_1993": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "normalize_2039": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data.astype(np.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'l1'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fetch_20newsgroups_2074": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "argmax_190": {
                "variable": {
                    "value": "yHat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yHat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(yHat, dim=1)",
                            "Call"
                        ],
                        [
                            "np.array(yHat)",
                            "Call"
                        ],
                        [
                            "np.argmax(yHat, axis=1)",
                            "Call"
                        ],
                        [
                            "yHat.squeeze()",
                            "Call"
                        ],
                        [
                            "yHat.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(yHat, dim=1).type(self.dataType)",
                            "Call"
                        ],
                        [
                            "np.array(yHat)",
                            "Call"
                        ],
                        [
                            "np.argmax(yHat, axis=1).astype(yHat.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_192": {
                "variable": {
                    "value": "totalErrors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(yHat - y) > tol",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_830": {
                "variable": {
                    "value": "self.adjacencyMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adjacencyMatrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_1512": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yHat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(yHat, dim=1)",
                            "Call"
                        ],
                        [
                            "np.array(yHat)",
                            "Call"
                        ],
                        [
                            "np.argmax(yHat, axis=1)",
                            "Call"
                        ],
                        [
                            "yHat.squeeze()",
                            "Call"
                        ],
                        [
                            "yHat.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(yHat, dim=1).type(self.dataType)",
                            "Call"
                        ],
                        [
                            "np.array(yHat)",
                            "Call"
                        ],
                        [
                            "np.argmax(yHat, axis=1).astype(yHat.dtype)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.samples[samplesType]['labels']",
                            "Subscript"
                        ],
                        [
                            "y[selectedIndices]",
                            "Subscript"
                        ],
                        [
                            "y[args[0]]",
                            "Subscript"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "y.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "y.type(self.dataType)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "y.astype(yHat.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1513": {
                "variable": {
                    "value": "rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.mse_loss(yHat, y)",
                            "Call"
                        ],
                        [
                            "np.mean((yHat - y) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1526": {
                "variable": {
                    "value": "self.incompleteMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.incompleteMatrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1528": {
                "variable": {
                    "value": "self.adjacencyMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adjacencyMatrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1858": {
                "variable": {
                    "value": "self.graphData",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graphData",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1859": {
                "variable": {
                    "value": "self.adjacencyMatrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adjacencyMatrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "self.samples[key][signals]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.samples[key]['signals']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "self.samples[key][labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.samples[key]['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_1501": {
                "variable": {
                    "value": "yHat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yHat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(yHat, dim=1)",
                            "Call"
                        ],
                        [
                            "np.array(yHat)",
                            "Call"
                        ],
                        [
                            "np.argmax(yHat, axis=1)",
                            "Call"
                        ],
                        [
                            "yHat.squeeze()",
                            "Call"
                        ],
                        [
                            "yHat.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(yHat, dim=1).type(self.dataType)",
                            "Call"
                        ],
                        [
                            "np.array(yHat)",
                            "Call"
                        ],
                        [
                            "np.argmax(yHat, axis=1).astype(yHat.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "variable": {
                    "value": "self.selectedAuthor[key][secondKey]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.selectedAuthor[key][secondKey]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_192": {
                "input": {
                    "value": "yHat - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/graphUtils/graphTools.py": {
        "sklearn": {
            "SpectralClustering_547": {
                "variable": {
                    "value": "communityClusters",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graphOptions['nCommunities']",
                            "Subscript"
                        ]
                    ]
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "assign_labels": {
                    "value": "discretize",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "agents/decentralplannerlocal.py": {
        "torch": {
            "Adam_80": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_82": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_114": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iteration, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler_state_dict': self.scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.checkpoint_dir, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_191": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_237": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_801": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_106": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_108": {
                "device": {
                    "value": "self.config.gpu_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_115": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_452": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_501": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_344": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_397": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "agents/decentralplannerlocal_OnlineExpert.py": {
        "torch": {
            "Adam_105": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_108": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_140": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iteration, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'rateReachGoal': self.rateReachGoal, 'scheduler_state_dict': self.scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.checkpoint_dir, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_220": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_989": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_132": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_134": {
                "device": {
                    "value": "self.config.gpu_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_662": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_562": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_616": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_446": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_505": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "agents/decentralplannerlocal_OnlineExpert_GAT.py": {
        "torch": {
            "Adam_113": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_115": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_130": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_140": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_147": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iteration, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'rateReachGoal': self.rateReachGoal, 'scheduler_state_dict': self.scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.checkpoint_dir, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_277": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_988": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_139": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_141": {
                "device": {
                    "value": "self.config.gpu_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_656": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_717": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_560": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_611": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_450": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_504": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "agents/decentralplannerlocal_OnlineExpert_GAT_LoadPreTrained.py": {
        "torch": {
            "Adam_88": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_90": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_115": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_122": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iteration, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler_state_dict': self.scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.checkpoint_dir, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_379": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_978": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_114": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_116": {
                "device": {
                    "value": "self.config.gpu_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_259": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_331": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_333": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_783": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_628": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_679": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_518": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_572": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "agents/decentralplannerlocal_OnlineExpert_GAT_returnGSO.py": {
        "torch": {
            "Adam_107": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_109": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_124": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_134": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_141": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iteration, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'rateReachGoal': self.rateReachGoal, 'scheduler_state_dict': self.scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.checkpoint_dir, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_220": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_271": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_980": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_133": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_135": {
                "device": {
                    "value": "self.config.gpu_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_711": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_554": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_605": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_444": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_498": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "agents/decentralplannerlocal_OnlineExpert_LoadPreTrained.py": {
        "torch": {
            "Adam_93": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_95": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "variable": {
                    "value": "self.is_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_365": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_368": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_120": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iteration, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler_state_dict': self.scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.checkpoint_dir, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_209": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_386": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_979": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_119": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_121": {
                "device": {
                    "value": "self.config.gpu_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_128": {
                "seed": {
                    "value": "self.manual_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_261": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir_load, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.config.gpu_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_336": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.config.max_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_726": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_785": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_631": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_682": {
                "input": {
                    "value": "batch_targetGPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ],
                        [
                            "targetGPU.reshape(B * N, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_521": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_575": {
                "input": {
                    "value": "batch_target_currentAgent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ],
                        [
                            "batch_targetGPU[id_agent][:][:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader/Dataloader_dcplocal_notTF_onlineExpert.py": {
        "torch": {
            "from_numpy_169": {
                "variable": {
                    "value": "tensor_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "step_input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_tensor[id_step][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "step_input_GSO",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_GSO_sequence[id_step, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "step_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_sequence[id_step, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "step_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "tensor_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "GSO_none",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "step_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "tensor_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "GSO_none",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CreateDataset(self.config, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "self.validStep_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validStep_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CreateDataset(self.config, 'validStep')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "self.test_trainingSet_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_trainingSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CreateDataset(self.config, 'test_trainingSet')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CreateDataset(self.config, 'valid')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CreateDataset(self.config, 'valid')",
                            "Call"
                        ],
                        [
                            "CreateDataset(self.config, 'test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/Dataloader_dcplocal_notTF_onlineExpert_LoadMemory.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valid_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "tensor_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_244": {
                "variable": {
                    "value": "step_input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_tensor[id_step][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "variable": {
                    "value": "step_input_GSO",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_GSO_sequence[id_step, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "variable": {
                    "value": "step_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_sequence[id_step, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "step_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_272": {
                "variable": {
                    "value": "tensor_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "GSO_none",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_293": {
                "variable": {
                    "value": "step_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ],
                        [
                            "data_contents['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_299": {
                "variable": {
                    "value": "tensor_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ],
                        [
                            "data_contents['map']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "GSO_none",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "self.validStep_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.validStep_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "self.test_trainingSet_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_trainingSet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valid_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.testset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.config.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/statetransformer_Guidance.py": {
        "torch": {}
    },
    "graphs/losses/bce.py": {
        "torch": {
            "BCELoss_12": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphs/losses/cross_entropy.py": {
        "torch": {
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.from_numpy(class_weights.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_40": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_43": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "class_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/losses/huber_loss.py": {
        "torch": {
            "SmoothL1Loss_11": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphs/losses/label_smoothing.py": {
        "torch": {
            "KLDivLoss_23": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_35": {
                "variable": {
                    "value": "self.Logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphs/losses/maskNLLLoss.py": {
        "torch": {
            "log_15": {
                "input": {
                    "value": "torch.gather(inp, 1, target.view(-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_15": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/losses/regularizer2.py": {
        "torch": {
            "sum_70": {
                "input": {
                    "value": "th.abs(module.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "th.pow(module.weight, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_70": {
                "input": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_85": {
                "input": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner.py": {
        "torch": {
            "Sequential_290": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_313": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isnan_348": {
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_352": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_330": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_287": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_310": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_322": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_328": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ],
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "numDilated[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 3, 1, 3, 1]",
                            "List"
                        ],
                        [
                            "[1, 3, 1, 3]",
                            "List"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 3, 1, 3, 1]",
                            "List"
                        ],
                        [
                            "[1, 3, 1, 3]",
                            "List"
                        ],
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_185": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_187": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_154": {
                "kernel_size": {
                    "value": "nMaxPoolFilterTaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "numMaxPoolStride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Dropout_193": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_207": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ],
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 3, 1, 3, 1]",
                            "List"
                        ],
                        [
                            "[1, 3, 1, 3]",
                            "List"
                        ],
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_219": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ],
                        [
                            "[3] + [32, 32, 64, 64]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_220": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_230": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT.py": {
        "torch": {
            "Sequential_212": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isnan_271": {
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_275": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_254": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_234": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_246": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_252": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_100": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_136": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT_bottleneck.py": {
        "torch": {
            "Sequential_214": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isnan_273": {
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_277": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_248": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_254": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_138": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT_bottleneck_SkipAddGNN.py": {
        "torch": {
            "Sequential_198": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_304": {
                "variable": {
                    "value": "sharedFeature_skipConCate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "compressfeature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compressMLP(featureMapFlatten).to(self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sharedFeature_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sharedFeature.permute([0, 2, 1]).to(self.config.device).reshape(B * N, num_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_260": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_235": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_214": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_232": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_100": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT_bottleneck_SkipConcat.py": {
        "torch": {
            "Sequential_214": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "sharedFeature_skipConCate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(featureMapFlatten, sharedFeature_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_276": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_248": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_254": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_102": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_138": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT_bottleneck_SkipConcatGNN.py": {
        "torch": {
            "Sequential_214": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "sharedFeature_skipConCate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(compressfeature, sharedFeature_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_276": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_248": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_254": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_102": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_138": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT_bottleneck_SkipConcatGNN_returnAttentionGSO.py": {
        "torch": {
            "Sequential_215": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "sharedFeature_skipConCate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(compressfeature, sharedFeature_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_277": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_95": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_237": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_249": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_130": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_139": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT_noBatch.py": {
        "torch": {
            "Sequential_232": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "extractFeatureMap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputTensor.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.numFeatures2Share",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.numAgents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_294": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_268": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_273": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_248": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_254": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_265": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_271": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_177": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_GAT_returnAttentionGSO.py": {
        "torch": {
            "Sequential_213": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_258": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isnan_272": {
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_276": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] * self.config.nAttentionHeads] + numActionFeatures",
                            "BinOp"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_247": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_bottleneck.py": {
        "torch": {
            "Sequential_212": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isnan_270": {
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_274": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_232": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_244": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_250": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_118": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_155": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_bottleneck_SkipAddGNN.py": {
        "torch": {
            "Sequential_205": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "sharedFeature_skipConCate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "compressfeature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compressMLP(featureMapFlatten).to(self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "sharedFeature_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sharedFeature_permute.reshape(B * N, num_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_266": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_219": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_237": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_243": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_bottleneck_SkipConcat.py": {
        "torch": {
            "Sequential_205": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "sharedFeature_skipConCate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(featureMapFlatten, sharedFeature_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_266": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_219": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numFeatureMap] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_237": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_243": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_bottleneck_SkipConcatGNN.py": {
        "torch": {
            "Sequential_205": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "sharedFeature_skipConCate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(compressfeature, sharedFeature_stack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_266": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.bottleneckFeature]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_219": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[self.config.numInputFeatures, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1] + numCompressFeatures[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_237": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_243": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.numInputFeatures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/decentralplanner_noBatch.py": {
        "torch": {
            "Sequential_230": {
                "variable": {
                    "value": "self.GFL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gfl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.actionsMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*actionsfc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "extractFeatureMap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputTensor.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.numFeatures2Share",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.numAgents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.ConvLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convl",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.compressMLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*compressmlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_like_291": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_270": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "numChannel[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "nFilterTaps[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "numStride[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "nPaddingSzie[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1] * numConv",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "numChannel[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[3] + [32, 32, 64, 64, 128]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_170": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "numCompressFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numCompressFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7]",
                            "List"
                        ],
                        [
                            "[128]",
                            "List"
                        ],
                        [
                            "[numFeatureMap] + numCompressFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_199": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "in_features": {
                    "value": "numActionFeatures[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "numActionFeatures[l + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[2 ** 7, numAction]",
                            "List"
                        ],
                        [
                            "[numAction]",
                            "List"
                        ],
                        [
                            "[self.F[-1]] + numActionFeatures",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_250": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_262": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_268": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(numConv)",
                            "Call"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ],
                        [
                            "range(dimCompressMLP)",
                            "Call"
                        ],
                        [
                            "range(dimActionMLP)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "range(self.L)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_176": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/resnet_pytorch.py": {
        "torch": {
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_277": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_279": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_286": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_345": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_347": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_348": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_438": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_440": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_441": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_174": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_302": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_354": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_355": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_399": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_448": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "28",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_449": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_464": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_481": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_493": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_303": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_305": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_373": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_465": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_467": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_213": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_216": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_217": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_393": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_396": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_397": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_487": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_490": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_491": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/weights_initializer.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {}
    },
    "main_test.py": {
        "torch": {}
    },
    "utils/graphUtils/graphML.py": {
        "torch": {
            "matmul_143": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "h.reshape([F, E * K * G]).permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_143": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "VHx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "VH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VH.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "np.zeros([self.E, self.N, self.N])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_235": {
                "variable": {
                    "value": "VHx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "VdiaghVHx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Vdiagh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V * diagh",
                            "BinOp"
                        ],
                        [
                            "Vdiagh.reshape([1, F, E, G, N, N])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "VHx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(VH, x).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "VHx.reshape([B, 1, E, G, N, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_258": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_260": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_354": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z * h",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_355": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_356": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_432": {
                "variable": {
                    "value": "Sk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(0).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_432": {
                "variable": {
                    "value": "Sk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_437": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(S, 2, torch.tensor(0).to(S.device)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "Sk.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(S, 2, torch.tensor(k).to(S.device)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "Sk.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_454": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_456": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_458": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_536": {
                "variable": {
                    "value": "Stilde",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_537": {
                "variable": {
                    "value": "DiagS",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_544": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_544": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 1, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_556": {
                "variable": {
                    "value": "SbarInvX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SbarInv.reshape([1, F, E, P, G, N, N])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x.reshape([B, 1, 1, 1, G, N, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_556": {
                "variable": {
                    "value": "SbarInvX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_560": {
                "variable": {
                    "value": "SbarInvStilde",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SbarInv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (Sbar + offDiagonalOnes)",
                            "BinOp"
                        ],
                        [
                            "SbarInv * torch.eye(N).to(Sbar.device)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Stilde.reshape([1, E, 1, 1, N, N])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "variable": {
                    "value": "thisCoeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(-1.0) ** np.arange(0, tMax + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_595": {
                "variable": {
                    "value": "H1x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "thisCoeffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor((-1.0) ** np.arange(0, tMax + 1)).to(x.device)",
                            "Call"
                        ],
                        [
                            "thisCoeffs.reshape([1, 1, 1, tMax + 1, 1, 1]) * varphi.reshape([1, F, E, 1, P, G]).repeat(1, 1, 1, tMax + 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "thisCoeffs.permute(0, 4, 1, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "thisCoeffs.reshape([1, P, F, E * (tMax + 1) * G]).unsqueeze(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_595": {
                "variable": {
                    "value": "H1x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_599": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SbarInvStilde.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_599": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_602": {
                "variable": {
                    "value": "H2x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H2x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-y if np.mod(tMax, 2) == 0 else y",
                            "IfExp"
                        ],
                        [
                            "torch.sum(H2x, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(H2x, dim=2)",
                            "Call"
                        ],
                        [
                            "H2x.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_603": {
                "variable": {
                    "value": "H2x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H2x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-y if np.mod(tMax, 2) == 0 else y",
                            "IfExp"
                        ],
                        [
                            "torch.sum(H2x, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(H2x, dim=2)",
                            "Call"
                        ],
                        [
                            "H2x.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_676": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_679": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_680": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F, 2 * F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_681": {
                "variable": {
                    "value": "a1Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_682": {
                "variable": {
                    "value": "a2Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_691": {
                "variable": {
                    "value": "eij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aWx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([aWx_cos, aWx_kl], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_699": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_706": {
                "variable": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eij * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_779": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_783": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_784": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F, 2 * F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_785": {
                "variable": {
                    "value": "a1Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_786": {
                "variable": {
                    "value": "a2Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_796": {
                "variable": {
                    "value": "eij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aWx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([aWx_cos, aWx_kl], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_808": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_808": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[B, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_815": {
                "variable": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eij * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_895": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_902": {
                "variable": {
                    "value": "concat_Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repeated_Wx_1, repeated_Wx_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "leaky_relu_933": {
                "variable": {
                    "value": "eij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSTM_output[-1].reshape((B, P, E, N * N, 1)).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "output.reshape(B, P, E, N * N)",
                            "Call"
                        ],
                        [
                            "output.reshape(B, P, E, N, N).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_945": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_945": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[B, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_952": {
                "variable": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eij * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1030": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_1033": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1034": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F, 2 * F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1035": {
                "variable": {
                    "value": "a1Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1036": {
                "variable": {
                    "value": "a2Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_1045": {
                "variable": {
                    "value": "eij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aWx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "a1Wx + a2Wx.permute(0, 1, 2, 4, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([aWx_cos, aWx_kl], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_1057": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1057": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[B, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1064": {
                "variable": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eij * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1138": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_1141": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1142": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(F, 2 * F).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1143": {
                "variable": {
                    "value": "a1Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1144": {
                "variable": {
                    "value": "a2Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2.reshape([1, P, E, 1, F])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_1154": {
                "variable": {
                    "value": "eij",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, P, E, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1161": {
                "variable": {
                    "value": "S_all_one",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, E, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_1162": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S_all_one.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1162": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[B, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1172": {
                "variable": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eij * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1257": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_key.permute([0, 1, 2, 4, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1262": {
                "variable": {
                    "value": "xWx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute([0, 2, 1]).reshape([B, 1, 1, N, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1274": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1274": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[B, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1284": {
                "variable": {
                    "value": "aij_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eij * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1392": {
                "variable": {
                    "value": "W_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(P).type(torch.int64).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_1393": {
                "variable": {
                    "value": "W_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(P, 2 * P).type(torch.int64).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CosineSimilarity_1396": {
                "variable": {
                    "value": "cos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "zeroTolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-09",
                            "float"
                        ]
                    ]
                }
            },
            "matmul_1397": {
                "variable": {
                    "value": "Wx_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(W, 1, torch.arange(P).type(torch.int64).to(x.device))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1404": {
                "variable": {
                    "value": "Wx_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(W, 1, torch.arange(P, 2 * P).type(torch.int64).to(x.device))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1413": {
                "variable": {
                    "value": "aWx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aWx_cos, aWx_kl]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1432": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1432": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[B, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1440": {
                "variable": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aWx * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_1515": {
                "variable": {
                    "value": "cos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "zeroTolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-09",
                            "float"
                        ]
                    ]
                }
            },
            "matmul_1530": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1553": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(S.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1553": {
                "variable": {
                    "value": "maskEdges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[B, 1, 1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1560": {
                "variable": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aWx_cos * maskEdges - infinityMask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1630": {
                "variable": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1634": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Wx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "Wx + W_b.reshape([1, P, E, F, 1]).repeat(T, B, 1, 1, 1, N)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x_query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "S.reshape([1, 1, E, N, N]) * aij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_1717": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1770": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1822": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1878": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1932": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1997": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_2087": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_2174": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_2221": {
                "variable": {
                    "value": "W0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(0).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_2221": {
                "variable": {
                    "value": "W0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2224": {
                "variable": {
                    "value": "W0x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(W, 1, torch.tensor(0).to(S.device)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "W0.reshape([1, P, E, F, G])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x.reshape([B, 1, 1, G, N])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_2229": {
                "variable": {
                    "value": "thisa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(0).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_2229": {
                "variable": {
                    "value": "thisa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_2230": {
                "variable": {
                    "value": "thisW",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(0).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_2230": {
                "variable": {
                    "value": "thisW",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2233": {
                "variable": {
                    "value": "W0x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W0x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W0, x.reshape([B, 1, 1, G, N]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(W0x, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W0x, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "S.reshape([1, 1, E, N, N]) * aij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_2249": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2371": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_2460": {
                "variable": {
                    "value": "CK",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_2461": {
                "variable": {
                    "value": "zeroRow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, K - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "CK.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_2462": {
                "variable": {
                    "value": "CK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(CK, zeroRow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_2471": {
                "variable": {
                    "value": "zerosK",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K - 1, H, N)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_2473": {
                "variable": {
                    "value": "zK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z0.unsqueeze(1), zerosK)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2483": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.unsqueeze(0).reshape(1, H, E * K * H)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "zK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((z0.unsqueeze(1), zerosK), dim=1)",
                            "Call"
                        ],
                        [
                            "zK.reshape(B, 1, K, H, N).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "zK.permute(0, 4, 1, 2, 3).reshape(B, N, E * K * H).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_2490": {
                "variable": {
                    "value": "a0x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSIGF_DB(a, S, x, b=xBias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(0, device=Ax.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_2490": {
                "variable": {
                    "value": "a0x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_5308": {
                "variable": {
                    "value": "thisSK",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_5366": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "SK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thisSK.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.cat((SK, thisSK.unsqueeze(2)), dim=2)",
                            "Call"
                        ],
                        [
                            "SK.squeeze(1)",
                            "Call"
                        ],
                        [
                            "SK.permute(1, 2, 0, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_5376": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape([1, F, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 2 * P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, 1, E, K, 1])",
                            "Call"
                        ],
                        [
                            "h * W",
                            "BinOp"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape([1, P, F, E * K * G])",
                            "Call"
                        ],
                        [
                            "h.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "h.reshape(F, E * K * G)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "h.reshape([F, G * E * K]).permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_5573": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "h.reshape([F, E * K * G]).permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_5573": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_5724": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "h.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_5724": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "xr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(xr, Sr)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Sr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_342": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_443": {
                "variable": {
                    "value": "Sk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(k).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_443": {
                "variable": {
                    "value": "Sk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_448": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(S, 2, torch.tensor(0).to(S.device)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "Sk.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(S, 2, torch.tensor(k).to(S.device)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "Sk.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_452": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, Sx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_539": {
                "variable": {
                    "value": "thisS",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(e).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_539": {
                "variable": {
                    "value": "thisS",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_540": {
                "input": {
                    "value": "thisS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(S, 0, torch.tensor(e).to(S.device)).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_542": {
                "variable": {
                    "value": "Stilde",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Stilde, DiagOffS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_543": {
                "variable": {
                    "value": "DiagS",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(DiagS, thisDiagS.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_575": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SbarInvStilde.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SbarInvX.unsqueeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_578": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, x1.squeeze(6).unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_580": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SbarInvStilde.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1636": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1704": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1706": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1757": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1759": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1809": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1811": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1865": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1867": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1919": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1921": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1984": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1986": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2074": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_2076": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "aij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(eij * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(aWx_cos * maskEdges - infinityMask, dim=4)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_KeyQuery(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_LSTM(x, a, W, W_b, S, LSTM_layer=LSTM_layer, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_DualHead(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch_origin(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSOBatch(x, a, W, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnSimilarityAttentionGSOBatch(x, a, W, W_b, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ],
                        [
                            "learnAttentionGSO(x, thisa, thisW, S, negative_slope=negative_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_2163": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xAij)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_2239": {
                "variable": {
                    "value": "thisa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(k).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_2239": {
                "variable": {
                    "value": "thisa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_2240": {
                "variable": {
                    "value": "thisW",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, 2 * P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, G, G])",
                            "Call"
                        ],
                        [
                            "W.reshape([1, P, E, F, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ],
                        [
                            "W.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "W.reshape([P, F, E, 1, G])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(k).to(S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_2240": {
                "variable": {
                    "value": "thisW",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2243": {
                "variable": {
                    "value": "W0x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W0x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W0, x.reshape([B, 1, 1, G, N]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(W0x, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(W0x, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "S.reshape([1, 1, E, N, N]) * aij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_2348": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[T - 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_2352": {
                "variable": {
                    "value": "zeroRow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_2353": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zeroRow, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_2359": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2563": {
                "variable": {
                    "value": "Bzt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.unsqueeze(0).reshape(1, H, E * K * H)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "bSz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SzPad.permute(0, 4, 2, 1, 3).reshape(B, N, E * K * H)",
                            "Call"
                        ],
                        [
                            "Sz.permute(0, 4, 2, 1, 3).reshape(B, N, E * K * H)",
                            "Call"
                        ],
                        [
                            "bSz.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_2568": {
                "variable": {
                    "value": "Axt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSIGF_DB(a, S, x, b=xBias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(t, device=Ax.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_2572": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, zt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_2630": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.K + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_2716": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "xK.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.cat((xK, v), 3)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "xK.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.cat([xK, kHopMedian], 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_2785": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.K + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_2846": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "xK.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.cat((xK, v), 3)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "xK.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.cat([xK, kHopMedian], 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_3006": {
                "variable": {
                    "value": "neighborhood",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "neighborhood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "graphTools.computeNeighborhood(S, self.nHops, self.nOutputNodes, self.nInputNodes, 'matrix')",
                            "Call"
                        ],
                        [
                            "torch.tensor(neighborhood).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_3060": {
                "variable": {
                    "value": "xNeighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gatherNeighbor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.neighborhood[k - 1].reshape([1, 1, self.N, self.maxNeighborhoodSizes[k - 1]])",
                            "Call"
                        ],
                        [
                            "gatherNeighbor.repeat([batchSize, dimNodeSignals, 1, 1])",
                            "Call"
                        ],
                        [
                            "self.neighborhood.reshape([1, 1, self.nOutputNodes, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "gatherNeighbor.repeat([batchSize, dimNodeSignals, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_3065": {
                "variable": {
                    "value": "(v, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "xNeighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x_aux, 2, gatherNeighbor.long().to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.gather(x, 2, gatherNeighbor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_3148": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3269": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, G, M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_3313": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V.reshape([1, E, 1, N, N])",
                            "Call"
                        ],
                        [
                            "np.zeros([self.E, self.N, self.N])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_3314": {
                "variable": {
                    "value": "self.VH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "VH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VH.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "np.zeros([self.E, self.N, self.N])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_3315": {
                "variable": {
                    "value": "self.splineKernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "splineKernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.E, self.N, self.M])",
                            "Call"
                        ],
                        [
                            "self.splineKernel.reshape([1, self.E, self.N, self.M])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_3435": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, K, G, M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3634": {
                "variable": {
                    "value": "self.weightEV",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, K, G, N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_3665": {
                "variable": {
                    "value": "multipleIdentity",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_3665": {
                "variable": {
                    "value": "multipleIdentity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, self.N, self.N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_3834": {
                "variable": {
                    "value": "self.inverseWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, P, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3835": {
                "variable": {
                    "value": "self.directWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, P, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3836": {
                "variable": {
                    "value": "self.filterWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3963": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K, E, 2 * F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3964": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K, E, F, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4099": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, 2 * F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4100": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, F, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4101": {
                "variable": {
                    "value": "self.filterWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(E, K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4249": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, 2 * F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4250": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, F, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4251": {
                "variable": {
                    "value": "self.filterWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(E, K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4415": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * P, E, 2 * F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4416": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * P, E, F, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4417": {
                "variable": {
                    "value": "self.weight_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * P, E, F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4418": {
                "variable": {
                    "value": "self.filterWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * P, F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4579": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, 2 * F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4581": {
                "variable": {
                    "value": "self.weight_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4582": {
                "variable": {
                    "value": "self.filterWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4764": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, 2 * F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4765": {
                "variable": {
                    "value": "self.weight_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4766": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, F, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4768": {
                "variable": {
                    "value": "self.filterWeight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4932": {
                "variable": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, K, E, 2 * F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4933": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, K, E, F, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5080": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5199": {
                "variable": {
                    "value": "self.aWeights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, E, K, F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5200": {
                "variable": {
                    "value": "self.bWeights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, E, K, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_5248": {
                "variable": {
                    "value": "zT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "xr.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.reshape([B, 1, E, K, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, F, E, 1, G, N, 1]).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, Sx), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=3)",
                            "Call"
                        ],
                        [
                            "SbarInvX.reshape([B, F, E, 1, P, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, x1.squeeze(6).unsqueeze(3)), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 4, 1, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, P, F, N, E * (tMax + 1) * G)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, 2 * P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, 2 * P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N]).repeat(1, P, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xAij), dim=3)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 2, 3, 4).reshape([B, P, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, E, G, N])",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 5, 3, 2, 4)",
                            "Call"
                        ],
                        [
                            "z.reshape(B, T, N, E * K * G)",
                            "Call"
                        ],
                        [
                            "zt.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, zt), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, SK)",
                            "Call"
                        ],
                        [
                            "z.permute(2, 4, 0, 1, 3).reshape([B, N, E * K * G])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N]).repeat(1, E, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, xS), dim=2)",
                            "Call"
                        ],
                        [
                            "GRNN_DB(self.aWeights, self.bWeights, self.S, x, z0, self.sigma, xBias=self.xBias, zBias=self.zBias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(T - 1, device=z.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_5311": {
                "variable": {
                    "value": "thisSK",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thisSK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(N).repeat([B, E, 1, 1]).to(S.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(thisSK, S)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_5312": {
                "variable": {
                    "value": "SK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(SK, thisSK.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_5562": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "S.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_5564": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, xS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_5646": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5797": {
                "variable": {
                    "value": "self.weight_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5798": {
                "variable": {
                    "value": "self.weight_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5799": {
                "variable": {
                    "value": "self.weight_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_5855": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_5953": {
                "variable": {
                    "value": "self.weight_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5954": {
                "variable": {
                    "value": "self.weight_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5955": {
                "variable": {
                    "value": "self.weight_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_6011": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_555": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_607": {
                "input": {
                    "value": "H1x + H2x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_665": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_665": {
                "input": {
                    "value": "[1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_679": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_680": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "2 * F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_699": {
                "input": {
                    "value": "S.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_783": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_784": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "2 * F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_1018": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1018": {
                "input": {
                    "value": "[1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_1033": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_1034": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "2 * F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1141": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_1142": {
                "start": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "2 * F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1392": {
                "start": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi.shape[2]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(a.shape[0] / 2)",
                            "Call"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(a.shape[0] / 2)",
                            "Call"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_1393": {
                "start": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi.shape[2]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(a.shape[0] / 2)",
                            "Call"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(a.shape[0] / 2)",
                            "Call"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "2 * P",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_1503": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1503": {
                "input": {
                    "value": "[1, N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_2504": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(t, device=S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_2510": {
                "variable": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z0.reshape(B, 1, 1, H, N).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, St)",
                            "Call"
                        ],
                        [
                            "torch.cat((ztThis, Sz), dim=1)",
                            "Call"
                        ],
                        [
                            "Sz.permute(0, 2, 3, 4, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, CK)",
                            "Call"
                        ],
                        [
                            "Sz.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, St)",
                            "Call"
                        ],
                        [
                            "torch.cat((ztThis, Sz), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(S, 1, torch.tensor(t, device=S.device))",
                            "Call"
                        ],
                        [
                            "St.repeat(1, t, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(S, 1, torch.tensor(t, device=S.device))",
                            "Call"
                        ],
                        [
                            "St.repeat(1, K - 1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_2519": {
                "variable": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ztThis, Sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_2523": {
                "variable": {
                    "value": "zeroRow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K - (t + 1), E, H, N)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "Sz.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_2524": {
                "variable": {
                    "value": "SzPad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Sz, zeroRow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2539": {
                "variable": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z0.reshape(B, 1, 1, H, N).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, St)",
                            "Call"
                        ],
                        [
                            "torch.cat((ztThis, Sz), dim=1)",
                            "Call"
                        ],
                        [
                            "Sz.permute(0, 2, 3, 4, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, CK)",
                            "Call"
                        ],
                        [
                            "Sz.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, St)",
                            "Call"
                        ],
                        [
                            "torch.cat((ztThis, Sz), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "CK",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(K - 1, device=S.device)",
                            "Call"
                        ],
                        [
                            "torch.cat((CK, zeroRow), dim=0)",
                            "Call"
                        ],
                        [
                            "CK.reshape(1, 1, 1, K, K - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_2543": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.tensor(t, device=S.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_2549": {
                "variable": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z0.reshape(B, 1, 1, H, N).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, St)",
                            "Call"
                        ],
                        [
                            "torch.cat((ztThis, Sz), dim=1)",
                            "Call"
                        ],
                        [
                            "Sz.permute(0, 2, 3, 4, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, CK)",
                            "Call"
                        ],
                        [
                            "Sz.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sz, St)",
                            "Call"
                        ],
                        [
                            "torch.cat((ztThis, Sz), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(S, 1, torch.tensor(t, device=S.device))",
                            "Call"
                        ],
                        [
                            "St.repeat(1, t, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(S, 1, torch.tensor(t, device=S.device))",
                            "Call"
                        ],
                        [
                            "St.repeat(1, K - 1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_2554": {
                "variable": {
                    "value": "Sz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ztThis, Sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_2708": {
                "variable": {
                    "value": "xNeighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSizes[k - 1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gatherNeighbor.long().to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_2713": {
                "variable": {
                    "value": "(v, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "xNeighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x_aux, 2, gatherNeighbor.long().to(x.device))",
                            "Call"
                        ],
                        [
                            "torch.gather(x, 2, gatherNeighbor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2715": {
                "variable": {
                    "value": "xK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xK, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_2822": {
                "variable": {
                    "value": "kHopMedian",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2845": {
                "variable": {
                    "value": "xK",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xK, kHopMedian]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_3150": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_3179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_3190": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3271": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_3336": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "splineKernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.E, self.N, self.M])",
                            "Call"
                        ],
                        [
                            "self.splineKernel.reshape([1, self.E, self.N, self.M])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_3342": {
                "variable": {
                    "value": "zeroPad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_3343": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, zeroPad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_3351": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3437": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_3507": {
                "variable": {
                    "value": "self.copyNodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "copyNodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[m for m in range(self.M)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "index_select_3533": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.copyNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_3536": {
                "variable": {
                    "value": "zeroPad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_3537": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, zeroPad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_3545": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3637": {
                "variable": {
                    "value": "self.weightLSI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, E, K, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3641": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_3676": {
                "variable": {
                    "value": "hybridMaskOnesRows",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.M, self.N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_3678": {
                "variable": {
                    "value": "hybridMaskOnesCols",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.N - self.M, self.M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_3680": {
                "variable": {
                    "value": "hybridMaskZeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.N - self.M, self.N - self.M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_3682": {
                "variable": {
                    "value": "hybridMask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hybridMaskOnesCols, hybridMaskZeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_3684": {
                "variable": {
                    "value": "hybridMask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hybridMaskOnesRows, hybridMask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_3686": {
                "variable": {
                    "value": "hybridMask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.N, self.N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_3711": {
                "variable": {
                    "value": "sparsityPattern",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(multipleIdentity, sparsityPattern)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_3727": {
                "variable": {
                    "value": "zeroPad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_3728": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, zeroPad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_3737": {
                "variable": {
                    "value": "uLSI",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "uEV.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_3745": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_3838": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_3869": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_3881": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_3990": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_4009": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_4014": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(y.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4103": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_4134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_4154": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_4159": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(y.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4253": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_4297": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_4319": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_4324": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(y.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4420": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_4465": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_4487": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(y.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4584": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4591": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, F, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_4643": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_4665": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_4670": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(y.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4770": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_4815": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_4836": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_4841": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(y.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_4935": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_4965": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_4984": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_4989": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "VdiaghVHx.squeeze(5)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(zh, dim=4)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.sum(z, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "x.reshape([B, 1, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y)",
                            "Call"
                        ],
                        [
                            "torch.matmul(SbarInvStilde.unsqueeze(0), y).squeeze(6)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Wx, S.reshape([1, 1, E, N, N]) * aij)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "W0x",
                            "variable"
                        ],
                        [
                            "y + W0x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z, h)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(z.permute(0, 4, 1, 2, 3).reshape([B, N, E * K * G]), h.reshape([F, E * K * G]).permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x.permute(0, 2, 1), h.permute(1, 0)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "graphAttention(x, self.mixer, self.weight, self.S)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionLSIGF(self.filterWeight, x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, 2 * self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.P * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ],
                        [
                            "graphAttentionEVGF(x, self.mixer, self.weight, self.S, b=self.bias)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "y.permute(0, 3, 1, 2).reshape([B, self.N, self.K * self.F]).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=1)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(y)",
                            "Call"
                        ],
                        [
                            "torch.index_select(y, 2, torch.arange(Nin).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(y.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5082": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5202": {
                "variable": {
                    "value": "self.xBias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5203": {
                "variable": {
                    "value": "self.zBias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5648": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_5677": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_5688": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5801": {
                "variable": {
                    "value": "self.bias_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5802": {
                "variable": {
                    "value": "self.bias_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5803": {
                "variable": {
                    "value": "self.bias_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_5847": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_5872": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5957": {
                "variable": {
                    "value": "self.bias_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5958": {
                "variable": {
                    "value": "self.bias_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(H, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_5959": {
                "variable": {
                    "value": "self.bias_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(F, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_6003": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_6025": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(H1x + H2x, dim=1) + H3x",
                            "BinOp"
                        ],
                        [
                            "u + b",
                            "BinOp"
                        ],
                        [
                            "LSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "spectralGF(self.h, self.V, self.VH, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "NVGF(self.h, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "uEV + uLSI",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "jARMA(self.inverseWeight, self.directWeight, self.filterWeight, self.S, x, b=self.bias, tMax=self.tMax)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "LSIGF_DB(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "BatchLSIGF(self.weight, self.S, x, self.bias)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ],
                        [
                            "torchpermul(self.weight_D, self.hiddenStateNext, self.bias_D)",
                            "Call"
                        ],
                        [
                            "torch.index_select(u, 2, torch.arange(Nin).to(u.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(Nin).to(u.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_2568": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, T)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "Ax.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_2831": {
                "variable": {
                    "value": "nodeNeighborhood",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(kHopNeighborhood[n])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_2836": {
                "variable": {
                    "value": "xNodeNeighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N]).permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N, 1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Sk, x)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([T, B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x[-1].reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, aij)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, T, 1, G, N]).repeat(1, 1, E, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zeroRow, x), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S)",
                            "Call"
                        ],
                        [
                            "x.reshape([B, 1, G, N])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, S.float())",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat([1, 1, 1, self.maxNeighborhoodSize])",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, zeroPad), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, torch.zeros(B, F, self.N - Nin).type(x.dtype).to(x.device)), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gatherNode.long().to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "median_2838": {
                "variable": {
                    "value": "(nodeMedian, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "xNodeNeighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x, 2, gatherNode.long().to(x.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_2841": {
                "variable": {
                    "value": "kHopMedian",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kHopMedian, nodeMedian]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_3510": {
                "variable": {
                    "value": "self.copyNodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_3516": {
                "variable": {
                    "value": "self.copyNodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_4597": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(P, E, G, G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_5248": {
                "data": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_432": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_553": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_553": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "h.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "S.shape[4]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[1]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[3]",
                            "Subscript"
                        ],
                        [
                            "S.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_808": {
                "input": {
                    "value": "S.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_945": {
                "input": {
                    "value": "S.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1057": {
                "input": {
                    "value": "S.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1162": {
                "input": {
                    "value": "S_all_one.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1274": {
                "input": {
                    "value": "S.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1432": {
                "input": {
                    "value": "S.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1553": {
                "input": {
                    "value": "S.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_2221": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_2229": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_2230": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_2490": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "Ax.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_2504": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, T)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_2543": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, T)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_2652": {
                "data": {
                    "value": "thisNeighborhood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graphTools.computeNeighborhood(S, k, outputType='matrix')",
                            "Call"
                        ],
                        [
                            "graphTools.computeNeighborhood(S, k, outputType='list')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_3190": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_3351": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_3545": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_3668": {
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S.reshape([1, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N).reshape([1, N, N]).repeat(E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.type(torch.float) + torch.eye(N, dtype=torch.float).reshape([1, N, N]).repeat(B, E, 1, 1).to(S.device)",
                            "BinOp"
                        ],
                        [
                            "S.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "S.reshape([B, E, N, N])",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "S.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(S.cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_3745": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_3881": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_4014": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_4159": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_4324": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_4487": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_4670": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_4841": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_4989": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_5688": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_5872": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_6025": {
                "start": {
                    "value": "Nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_443": {
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_539": {
                "data": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(E)",
                            "Call"
                        ],
                        [
                            "range(self.E)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_2239": {
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_2240": {
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, K)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.K + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_3180": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_3870": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_3991": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_4135": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_4298": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_4466": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_4644": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_4816": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_4966": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_5678": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_5848": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_6004": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "SK.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "S.shape[0]",
                            "Subscript"
                        ],
                        [
                            "psi.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "h.shape[4]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[2]",
                            "Subscript"
                        ],
                        [
                            "W.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "a.shape[3]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "h.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.N - Nin",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/graphUtils/miscTools.py": {
        "torch": {
            "set_rng_state_93": {
                "new_state": {
                    "value": "module['state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "module['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loaddata_utils.py": {
        "torch": {}
    },
    "utils/metrics.py": {
        "torch": {}
    },
    "utils/misc.py": {
        "torch": {
            "device_count_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/multipathvisualizerCombine.py": {
        "torch": {}
    },
    "utils/multirobotsim_dcenlocal_onlineExpert_distributed_action.py": {
        "torch": {
            "LogSoftmax_99": {
                "variable": {
                    "value": "self.fun_Softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "self.stopKeyValue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "self.reset_disabled_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_object.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_481": {
                "variable": {
                    "value": "GSO_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "GSO",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_492": {
                "variable": {
                    "value": "tensor_currentState",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.config.num_agents, 3, self.size_map[0], self.size_map[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_522": {
                "variable": {
                    "value": "store_goalAgents",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.config.num_agents, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_523": {
                "variable": {
                    "value": "store_stateAgents",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.config.num_agents, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_677": {
                "variable": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actionVec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "variable": {
                    "value": "channel_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.size_map[0], self.size_map[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "variable": {
                    "value": "channel_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.size_map[0], self.size_map[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_239": {
                "variable": {
                    "value": "nextState_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentState_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.status_MultiAgent[name_agent]['start']",
                            "Subscript"
                        ],
                        [
                            "nextState_target",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "action_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.delta[actionKey_target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_655": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_672": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_679": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_730": {
                "variable": {
                    "value": "nextState_predict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentState_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "variable"
                        ],
                        [
                            "state",
                            "variable"
                        ],
                        [
                            "self.status_MultiAgent[name_agent]['currentState']",
                            "Subscript"
                        ],
                        [
                            "self.status_MultiAgent[name_agent]['currentState']",
                            "Subscript"
                        ],
                        [
                            "self.status_MultiAgent[name_agent]['currentState']",
                            "Subscript"
                        ],
                        [
                            "self.status_MultiAgent[name_agent]['currentState']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.delta[actionKey_predict]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_155": {
                "input": {
                    "value": "actionVec_target_CurrentAgents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.List_MultiAgent_ActionVec_target[id_agent, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_663": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_665": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_717": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/new_simulator.py": {
        "torch": {
            "LogSoftmax_150": {
                "variable": {
                    "value": "self.fun_Softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "GSO_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "GSO",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_733": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_object.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_879": {
                "variable": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actionVec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_859": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_874": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_881": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_866": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_868": {
                "input": {
                    "value": "actionVec_current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fun_Softmax(actionVec)",
                            "Call"
                        ],
                        [
                            "self.normalize(actionVec)",
                            "Call"
                        ],
                        [
                            "torch.exp(actionVec)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}