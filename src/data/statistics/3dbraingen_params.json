{
    "ADNI_dataset.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "imageout",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nib.load(os.path.join(path, 'image.nii'))",
                            "Call"
                        ],
                        [
                            "np.swapaxes(img.get_data(), 1, 2)",
                            "Call"
                        ],
                        [
                            "np.flip(img, 1)",
                            "Call"
                        ],
                        [
                            "np.flip(img, 2)",
                            "Call"
                        ],
                        [
                            "resize(img, (sp_size, sp_size, sp_size), mode='constant')",
                            "Call"
                        ],
                        [
                            "np.flip(img, 0)",
                            "Call"
                        ],
                        [
                            "img * random_i.data.cpu().numpy()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_52": {
                "variable": {
                    "value": "random_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ATLAS_dataset.py": {
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "imageout",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resize(B, (sp_size, sp_size, sp_size), mode='constant')",
                            "Call"
                        ],
                        [
                            "1.0 * img",
                            "BinOp"
                        ],
                        [
                            "(img - np.min(img)) / (np.max(img) - np.min(img))",
                            "BinOp"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.flip(img, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_38": {
                "variable": {
                    "value": "random_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "BRATS_dataset.py": {
        "torch": {
            "from_numpy_96": {
                "variable": {
                    "value": "imageout",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nib.load(os.path.join(path, self.imglist[index] + '_' + self.imgtype + '.nii.gz'))",
                            "Call"
                        ],
                        [
                            "resize(B, (sp_size, sp_size, sp_size), mode='constant')",
                            "Call"
                        ],
                        [
                            "1.0 * img",
                            "BinOp"
                        ],
                        [
                            "exposure.rescale_intensity(img)",
                            "Call"
                        ],
                        [
                            "(img - np.min(img)) / (np.max(img) - np.min(img))",
                            "BinOp"
                        ],
                        [
                            "2 * img - 1",
                            "BinOp"
                        ],
                        [
                            "np.flip(img, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_86": {
                "variable": {
                    "value": "random_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Model_VAEGAN.py": {
        "torch": {
            "Conv3d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_17": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_18": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_19": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_20": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_21": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_22": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_class",
                            "Name"
                        ],
                        [
                            "out_class",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_27": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(h1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_29": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(h2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_30": {
                "variable": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(h3))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h5.view(h5.size()[0], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_44": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_45": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_46": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_48": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32768, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32768, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_63": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_64": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(h1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_65": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(h2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_66": {
                "variable": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(h3))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512 * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm3d_83": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_85": {
                "variable": {
                    "value": "self.tp_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_86": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_88": {
                "variable": {
                    "value": "self.tp_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_89": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_91": {
                "variable": {
                    "value": "self.tp_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_92": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv3d_94": {
                "variable": {
                    "value": "self.tp_conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_102": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_106": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_110": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_114": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_117": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "32768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_52": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "32768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_57": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "(batch_size, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Model_WGAN.py": {
        "torch": {
            "Conv3d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_17": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_18": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_20": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_22": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_25": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_26": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(h1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_27": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(h2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "variable": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(h3))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512 * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm3d_42": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_44": {
                "variable": {
                    "value": "self.tp_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.tp_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_48": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_50": {
                "variable": {
                    "value": "self.tp_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_51": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv3d_53": {
                "variable": {
                    "value": "self.tp_conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_61": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_65": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_69": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_73": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(noise)",
                            "Call"
                        ],
                        [
                            "h.view(-1, 512, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Model_alphaGAN.py": {
        "torch": {
            "Conv3d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_23": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_24": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_26": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_class",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_29": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_30": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(h1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_31": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(h2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "variable": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(h3))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(code_size, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_units, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(self.bn3(self.conv3(h2)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.l3(h2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_69": {
                "variable": {
                    "value": "self.tp_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise.view(-1, self.noise, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "variable": {
                    "value": "self.tp_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_75": {
                "variable": {
                    "value": "self.tp_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_76": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "variable": {
                    "value": "self.tp_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv3d_81": {
                "variable": {
                    "value": "self.tp_conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_89": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_93": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_97": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_101": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h5.view(h5.size()[0], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "code_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_47": {
                "num_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_50": {
                "num_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_51": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Model_alphaWGAN.py": {
        "torch": {
            "Conv3d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_23": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_24": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_25": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_class",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_29": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(h1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_30": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(h2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_31": {
                "variable": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(h3))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(code_size, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_units, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_64": {
                "variable": {
                    "value": "self.tp_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noise.view(-1, self.noise, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "variable": {
                    "value": "self.tp_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_70": {
                "variable": {
                    "value": "self.tp_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_71": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_73": {
                "variable": {
                    "value": "self.tp_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_74": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv3d_76": {
                "variable": {
                    "value": "self.tp_conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_84": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_88": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_92": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_96": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tp_conv1(noise)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv2(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn2(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv3(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn3(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv4(h)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn4(h))",
                            "Call"
                        ],
                        [
                            "F.upsample(h, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.tp_conv5(h)",
                            "Call"
                        ],
                        [
                            "F.tanh(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "code_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_42": {
                "num_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_43": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_45": {
                "num_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "750",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_46": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_ssim/__init__.py": {
        "torch": {
            "Tensor_9": {
                "variable": {
                    "value": "gauss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_66": {
                "variable": {
                    "value": "mu1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv3d_67": {
                "variable": {
                    "value": "mu2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img2, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_82": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 / v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_122": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow1[:-1] * pow2[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_183": {
                "variable": {
                    "value": "mu1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_184": {
                "variable": {
                    "value": "mu2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img2, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_199": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 / v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_227": {
                "variable": {
                    "value": "mssim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mssim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(mssim)",
                            "Call"
                        ],
                        [
                            "(mssim + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mssim)",
                            "Call"
                        ],
                        [
                            "(mssim + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_228": {
                "variable": {
                    "value": "mcs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mcs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(mcs)",
                            "Call"
                        ],
                        [
                            "(mcs + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mcs)",
                            "Call"
                        ],
                        [
                            "(mcs + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "prod_238": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow1[:-1] * pow2[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool3d_107": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool3d_108": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img2, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_224": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_225": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img2, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv3d_73": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv3d_74": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv3d_75": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_190": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_191": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_192": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_47": {
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_52": {
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_164": {
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_169": {
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.avg_pool3d(img1, (2, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}