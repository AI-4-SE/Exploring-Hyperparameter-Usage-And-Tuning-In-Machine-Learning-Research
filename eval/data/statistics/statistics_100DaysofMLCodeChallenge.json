{
    "Classification/Decision_Tree_Classification/decision_tree_classification.py": {
        "StandardScaler_19": {},
        "DecisionTreeClassifier_25": {
            "criterion": "entropy",
            "random_state": "0"
        }
    },
    "Classification/K-Nearest_Neighbors(K-NN)/knn.py": {
        "StandardScaler_19": {},
        "KNeighborsClassifier_25": {
            "n_neighbors": "5",
            "metric": "minkowski",
            "p": "2"
        }
    },
    "Classification/Kernel_SVM/kernal_svm.py": {
        "StandardScaler_19": {},
        "SVC_25": {
            "kernel": "rbf",
            "random_state": "0"
        }
    },
    "Classification/Logistic_Regression/logistic_regression.py": {
        "StandardScaler_19": {},
        "LogisticRegression_25": {
            "random_state": "0"
        }
    },
    "Classification/Naive_Bayes/naive_bayes.py": {
        "StandardScaler_19": {},
        "GaussianNB_25": {}
    },
    "Classification/Random_Forest_Classification/random_forest_classification.py": {
        "StandardScaler_19": {},
        "RandomForestClassifier_25": {
            "n_estimators": "10",
            "criterion": "entropy",
            "random_state": "0"
        }
    },
    "Classification/Support_Vector_Machine(SVM)/svm.py": {
        "StandardScaler_19": {},
        "SVC_25": {
            "kernel": "linear",
            "random_state": "0"
        }
    },
    "Clustering/Hierarchical-Clustering/hc.py": {
        "AgglomerativeClustering_35": {
            "n_clusters": "5",
            "affinity": "euclidean",
            "linkage": "ward"
        }
    },
    "Clustering/K-Means_Clustering/kmeans.py": {
        "KMeans_39": {
            "n_clusters": "5",
            "init": "k-means++",
            "random_state": "42"
        },
        "KMeans_29": {
            "n_clusters": "i",
            "init": "k-means++",
            "random_state": "42"
        }
    },
    "Data-Preprocessing/categorical_data.py": {
        "LabelEncoder_22": {},
        "OneHotEncoder_24": {
            "categorical_features": "[0]"
        },
        "LabelEncoder_27": {}
    },
    "Data-Preprocessing/data_preprocessing_template.py": {
        "StandardScaler_19": {},
        "StandardScaler_22": {}
    },
    "Data-Preprocessing/missing_data.py": {},
    "Deep-Learning/Artificial-Neural-Networks(ANN)/ann.py": {
        "LabelEncoder_26": {},
        "LabelEncoder_28": {},
        "OneHotEncoder_30": {
            "categorical_features": "[1]"
        },
        "StandardScaler_40": {}
    },
    "Deep-Learning/Mega_Case_Study/ann.py": {
        "LabelEncoder_26": {},
        "LabelEncoder_28": {},
        "OneHotEncoder_30": {
            "categorical_features": "[1]"
        },
        "StandardScaler_40": {}
    },
    "Deep-Learning/Mega_Case_Study/mega_case_study.py": {
        "MinMaxScaler_19": {
            "feature_range": "(0, 1)"
        },
        "StandardScaler_66": {}
    },
    "Deep-Learning/Mega_Case_Study/som.py": {
        "MinMaxScaler_15": {
            "feature_range": "(0, 1)"
        }
    },
    "Deep-Learning/Recurrent_Neural_Networks(RNN)/rnn.py": {
        "MinMaxScaler_18": {
            "feature_range": "(0, 1)"
        }
    },
    "Deep-Learning/Self-Organizing-Maps (SOM)/som.py": {
        "MinMaxScaler_15": {
            "feature_range": "(0, 1)"
        }
    },
    "Dimensionality-Reduction/Kernel_PCA/kernel_pca.py": {
        "StandardScaler_19": {},
        "KernelPCA_25": {
            "n_components": "2",
            "kernel": "rbf"
        },
        "LogisticRegression_31": {
            "random_state": "0"
        }
    },
    "Dimensionality-Reduction/Linear_Discriminant_Analysis(LDA)/lda.py": {
        "StandardScaler_19": {},
        "LogisticRegression_31": {
            "random_state": "0"
        }
    },
    "Dimensionality-Reduction/Principal_Component_Analysis(PCA)/pca.py": {
        "StandardScaler_19": {},
        "PCA_25": {
            "n_components": "2"
        },
        "LogisticRegression_32": {
            "random_state": "0"
        }
    },
    "Model-Selection-&-Boosting/Model-Selection/grid_search.py": {
        "StandardScaler_19": {},
        "SVC_25": {
            "kernel": "rbf",
            "random_state": "0"
        },
        "GridSearchCV_45": {
            "estimator": "classifier",
            "param_grid": "parameters",
            "scoring": "accuracy",
            "cv": "10",
            "n_jobs": "-1"
        }
    },
    "Model-Selection-&-Boosting/Model-Selection/k_fold_cross_validation.py": {
        "StandardScaler_19": {},
        "SVC_25": {
            "kernel": "rbf",
            "random_state": "0"
        }
    },
    "Model-Selection-&-Boosting/XGBoost/xgboost.py": {
        "LabelEncoder_17": {},
        "LabelEncoder_19": {},
        "OneHotEncoder_21": {
            "categorical_features": "[1]"
        }
    },
    "Natural-Language-Processing/natural_language_processing.py": {
        "CountVectorizer_29": {
            "max_features": "1500"
        },
        "GaussianNB_39": {}
    },
    "Regression/Decision-Tree-Regression/decision_tree_regression.py": {
        "DecisionTreeRegressor_27": {
            "random_state": "0"
        }
    },
    "Regression/Multiple-Linear-Regression/multiple_linear_regression.py": {
        "LabelEncoder_15": {},
        "OneHotEncoder_17": {
            "categorical_features": "[3]"
        },
        "LinearRegression_37": {}
    },
    "Regression/Polynomial-Regression/polynomial_regression.py": {
        "LinearRegression_25": {},
        "PolynomialFeatures_30": {
            "degree": "4"
        },
        "LinearRegression_33": {}
    },
    "Regression/Random-Forest-Regression/random_forest_regression.py": {
        "RandomForestRegressor_27": {
            "n_estimators": "300",
            "random_state": "0"
        }
    },
    "Regression/Simple-Linear-Regression/simple_linear_regression.py": {
        "LinearRegression_27": {}
    },
    "Regression/Support-Vector-Regression(SVR)/svr.py": {
        "StandardScaler_19": {},
        "StandardScaler_20": {},
        "SVR_26": {
            "kernel": "rbf"
        }
    },
    "Regression/regression_template.py": {}
}