{
    "DessiLBI/code/slbi_opt.py": {
        "torch": {
            "reshape_170": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ts.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_171": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.mul(torch.transpose(ts_reshape, 0, 1), ts_shrink), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts_return, ts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_173": {
                "input": {
                    "value": "torch.transpose(ts_reshape, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(ts_norm), torch.ones_like(ts_norm) - torch.div(torch.ones_like(ts_norm), ts_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_172": {
                "input": {
                    "value": "torch.ones_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_107": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_125": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_109": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_129": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_107": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_125": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_109": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_129": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/code/slbi_toolbox.py": {
        "torch": {
            "qr_250": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coordinate_matrix_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coordinate_matrix.view(-1, w * h * cin).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_251": {
                "variable": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_253": {
                "variable": {
                    "value": "(sorted_d, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(r_d)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_253": {
                "input": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_255": {
                "input": {
                    "value": "sorted_d",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_263": {
                "variable": {
                    "value": "init_matrix[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "basis[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(w * h * cin)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_79": {
                "variable": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_212": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_228": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_34": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_63": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_216": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_279": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_304": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_305": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_like_306": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_332": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_344": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_105": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_106": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_107": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_110": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_113": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_114": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_153": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_186": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_38": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_39": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_120": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_123": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_124": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_310": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_47": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_115": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_121": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_126": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_105": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_110": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/model/MobileNetV2.py": {
        "torch": {
            "Sequential_6": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_7": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_8": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_9": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp * expand_ratio, inp * expand_ratio, 3, stride, 1, groups=inp * expand_ratio, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, inp * expand_ratio, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "kernel_size": {
                    "value": "int(input_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_158": {
                "kernel_size": {
                    "value": "int(input_size / 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "inp * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/model/resnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_105": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/model/resnet_cifar10.py": {
        "torch": {
            "AvgPool2d_19": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.shortcut(x) + self.conv(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "(x, torch.zeros(x.size(0), self.out_channels - x.size(1), x.size(2), x.size(3), device='cuda'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_67": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels - x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/model/resnet_wn.py": {
        "torch": {
            "AvgPool2d_19": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "torch.nn.utils.weight_norm(nn.Conv2d(inp, oup, 3, stride, 1, bias=False))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.utils.weight_norm(nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.shortcut(x) + self.conv(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.utils.weight_norm(nn.Linear(64, num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_30": {
                "module": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "(x, torch.zeros(x.size(0), self.out_channels - x.size(1), x.size(2), x.size(3), device='cuda'))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_39": {
                "module": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_42": {
                "module": {
                    "value": "nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_67": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_70": {
                "module": {
                    "value": "nn.Linear(64, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels - x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/model/vgg.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/pretrain_lbi_weight_norm.py": {
        "torch": {
            "SummaryWriter_45": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.logname",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_106": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "initial_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(net.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + '_init.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + 'pretrain_w.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "z_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.get_z_state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.get_z_state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + 'pretrain_z.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_305": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + 'final.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + str(epoch) + '_pretrain_w.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "z_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.get_z_state_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.get_z_state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + str(epoch) + '_pretrain_z.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + str(epoch) + '_mask.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.logname.split('/')[-1] + 'final.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/resnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_105": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/sgd_with_mask.py": {
        "torch": {
            "empty_cache_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_136": {
                "input": {
                    "value": "torch.abs(p.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_116": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p * param_state['mask'].cuda()",
                            "BinOp"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "clone_172": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p * param_state['mask'].cuda()",
                            "BinOp"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_136": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/slbi_noconv_with_normalize.py": {
        "torch": {
            "reshape_195": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ts.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_196": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_197": {
                "variable": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_198": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.mul(torch.transpose(ts_reshape, 0, 1), ts_shrink), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts_return, ts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "qr_445": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coordinate_matrix_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coordinate_matrix.view(-1, w * h * cin).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_446": {
                "variable": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_448": {
                "variable": {
                    "value": "(sorted_d, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(r_d)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_603": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_622": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_189": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_197": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "param_state['w_star']",
                            "Subscript"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_198": {
                "input": {
                    "value": "torch.transpose(ts_reshape, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(ts_norm), torch.ones_like(ts_norm) - torch.div(torch.ones_like(ts_norm), ts_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_448": {
                "input": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_450": {
                "input": {
                    "value": "sorted_d",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_458": {
                "variable": {
                    "value": "init_matrix[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "basis[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(w * h * cin)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_108": {
                "variable": {
                    "value": "norm_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.clone()",
                            "Call"
                        ],
                        [
                            "param_state['gamma_buffer'].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_109": {
                "variable": {
                    "value": "norm_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(tmp_p)",
                            "Call"
                        ],
                        [
                            "torch.clamp(norm_scale, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_189": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_197": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "param_state['w_star']",
                            "Subscript"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_197": {
                "input": {
                    "value": "torch.ones_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "param_state['w_star']",
                            "Subscript"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_274": {
                "variable": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_407": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_423": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gt_627": {
                "input": {
                    "value": "torch.abs(p.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_627": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_212": {
                "variable": {
                    "value": "N_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['w_star'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_212": {
                "variable": {
                    "value": "N_s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_257": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_258": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_259": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_411": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_474": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_498": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_499": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_500": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_like_501": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_527": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_539": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "buf",
                            "Name"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "gt_613": {
                "variable": {
                    "value": "mask[param_state[name]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "variable": {
                    "value": "gbuf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_113": {
                "input": {
                    "value": "torch.abs(tmp_p)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_189": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_299": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_300": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_301": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_302": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_305": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_308": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_309": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_348": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_381": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_133": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_154": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_218": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "param_state['w_star']",
                            "Subscript"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_219": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "param_state['w_star']",
                            "Subscript"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_220": {
                "input": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_state['z_buffer']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_221": {
                "input": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_state['z_buffer']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_313": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_314": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_315": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_318": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_319": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_505": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_610": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_613": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_135": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_303": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_310": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_228": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "param_state['w_star']",
                            "Subscript"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_231": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "param_state['w_star']",
                            "Subscript"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_234": {
                "input": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_state['z_buffer']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_237": {
                "input": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_state['z_buffer']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_303": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_316": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_321": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_627": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_133": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_154": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_300": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_305": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_610": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_135": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_314": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_318": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_113": {
                "input": {
                    "value": "tmp_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.clone()",
                            "Call"
                        ],
                        [
                            "param_state['gamma_buffer'].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_212": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_611": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/cifar_prune/train_utils.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_152": {
                "variable": {
                    "value": "p_numpy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_155": {
                "variable": {
                    "value": "mask[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(p.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "thre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.quantile(p_numpy, ratio)",
                            "Call"
                        ],
                        [
                            "np.quantile(p_numpy, ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "p_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_dict[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(p.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_161": {
                "variable": {
                    "value": "p_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(p, (p.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_164": {
                "variable": {
                    "value": "p_numpy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(p_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_41": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_155": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/grow-network/flops_counter.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/grow-network/main-grow-netowrk.py": {
        "torch": {
            "CrossEntropyLoss_73": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'best_ckpt.t7')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'epoch': len(train_acc), 'best_acc': BEST_ACC}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'finetune_best_ckpt.t7')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/grow-network/model.py": {
        "torch": {
            "randn_272": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_resolution * self.out_resolution * num_filters[-2][-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_filters[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear1(out))",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.drop_out1(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.drop_out2(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_102": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear1(out))",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.drop_out1(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.drop_out2(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear1(out))",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.drop_out1(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.drop_out2(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_108": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear1(out))",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.drop_out1(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.drop_out2(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_183": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_214": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear1(out))",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.drop_out1(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.drop_out2(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_227": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters[3][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_247": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_255": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.linear1(out))",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.drop_out1(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "self.drop_out2(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_69": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filters[-1][-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.drop_out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.drop_out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_210": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_202": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, d1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_205": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, d1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/grow-network/slbi_opt.py": {
        "torch": {
            "reshape_170": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ts.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_171": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.mul(torch.transpose(ts_reshape, 0, 1), ts_shrink), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts_return, ts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_173": {
                "input": {
                    "value": "torch.transpose(ts_reshape, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(ts_norm), torch.ones_like(ts_norm) - torch.div(torch.ones_like(ts_norm) * lam, ts_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_172": {
                "input": {
                    "value": "torch.ones_like(ts_norm) * lam",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_107": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_125": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_109": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_129": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_107": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_125": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_109": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_129": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/grow-network/slbi_toolbox.py": {
        "torch": {
            "qr_276": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coordinate_matrix_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coordinate_matrix.view(-1, w * h * cin).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_277": {
                "variable": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_279": {
                "variable": {
                    "value": "(sorted_d, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(r_d)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_279": {
                "input": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_281": {
                "input": {
                    "value": "sorted_d",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_289": {
                "variable": {
                    "value": "init_matrix[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "basis[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(w * h * cin)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(size_n[0] * (size_n[1] + step * add_num))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_100": {
                "variable": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_237": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_253": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_50": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_79": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_241": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_304": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_328": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_329": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_like_330": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_356": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_368": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_429": {
                "variable": {
                    "value": "add_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(add_num, size[1], size[2], size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "new_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p.data, add_weight)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(param_state['epoch_record'], -2000.0 * torch.ones((add_num, size[1], size[2], size[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_435": {
                "variable": {
                    "value": "param_state[prune_order]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(param_state['prune_order'], -2000.0 * torch.ones(add_num).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "param_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(param_state['momentum_buffer'], torch.zeros((add_num, size[1], size[2], size[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(param_state['gamma_buffer'], torch.zeros((add_num, size[1], size[2], size[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(param_state['z_buffer'], torch.zeros((add_num, size[1], size[2], size[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "param_state[w_star]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(param_state['w_star'], torch.zeros((add_num, size[1], size[2], size[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_125": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_127": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_133": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_136": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_138": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_181": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_213": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_54": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_55": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_146": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_147": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_151": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_152": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_454": {
                "variable": {
                    "value": "new_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_b.data, torch.zeros(add_num).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "p_b_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_b_state['momentum_buffer'], torch.zeros(add_num).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_63": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_130": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_141": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "*size": {
                    "value": "(add_num, size[1], size[2], size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_444": {
                "*size": {
                    "value": "(add_num, size[1], size[2], size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "*size": {
                    "value": "(add_num, size[1], size[2], size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "*size": {
                    "value": "(add_num, size[1], size[2], size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_468": {
                "variable": {
                    "value": "p_n.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n.data, torch.zeros((size_n[0], add_num, size_n[2], size_n[3]), requires_grad=True).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "p_n_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['momentum_buffer'], torch.zeros((size_n[0], add_num, size_n[2], size_n[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_474": {
                "variable": {
                    "value": "p_n_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['epoch_record'], -2000.0 * torch.ones((size_n[0], add_num, size_n[2], size_n[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "p_n_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['gamma_buffer'], torch.zeros((size_n[0], add_num, size_n[2], size_n[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "p_n_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['z_buffer'], torch.zeros((size_n[0], add_num, size_n[2], size_n[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_482": {
                "variable": {
                    "value": "p_n_state[w_star]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['w_star'], torch.zeros((size_n[0], add_num, size_n[2], size_n[3])).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_488": {
                "variable": {
                    "value": "add_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size_n[0], int(step * add_num))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "p_n.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n.data, add_weight)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "p_n_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['momentum_buffer'], torch.zeros((size_n[0], int(add_num * step))).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "p_n_state[prune_order]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['prune_order'], -2000.0 * torch.ones((size_n[0], int(add_num * step))).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "p_n_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['epoch_record'], -2000.0 * torch.ones((size_n[0], int(add_num * step))).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_503": {
                "variable": {
                    "value": "p_n_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['gamma_buffer'], torch.zeros((size_n[0], int(add_num * step))).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_505": {
                "variable": {
                    "value": "p_n_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['z_buffer'], torch.zeros((size_n[0], int(add_num * step))).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "p_n_state[w_star]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['w_star'], torch.zeros((size_n[0], int(add_num * step))).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_516": {
                "variable": {
                    "value": "add_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(add_num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "p_n_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['momentum_buffer'], torch.zeros((add_num,)).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "p_n.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n.data, add_weight.uniform_(0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_149": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_155": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_433": {
                "*size": {
                    "value": "(add_num, size[1], size[2], size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_436": {
                "*size": {
                    "value": "add_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_521": {
                "variable": {
                    "value": "add_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(add_num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "p_n_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n_state['momentum_buffer'], torch.zeros(add_num).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "p_n.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_n.data, add_weight)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_124": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_133": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "*size": {
                    "value": "add_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_456": {
                "*size": {
                    "value": "add_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_146": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_151": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_469": {
                "*size": {
                    "value": "(size_n[0], add_num, size_n[2], size_n[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "*size": {
                    "value": "(size_n[0], add_num, size_n[2], size_n[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "*size": {
                    "value": "(size_n[0], add_num, size_n[2], size_n[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_480": {
                "*size": {
                    "value": "(size_n[0], add_num, size_n[2], size_n[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_482": {
                "*size": {
                    "value": "(size_n[0], add_num, size_n[2], size_n[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_493": {
                "*size": {
                    "value": "(size_n[0], int(add_num * step))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_503": {
                "*size": {
                    "value": "(size_n[0], int(add_num * step))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "(size_n[0], int(add_num * step))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "*size": {
                    "value": "(size_n[0], int(add_num * step))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_518": {
                "*size": {
                    "value": "(add_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_475": {
                "*size": {
                    "value": "(size_n[0], add_num, size_n[2], size_n[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_497": {
                "*size": {
                    "value": "(size_n[0], int(add_num * step))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_501": {
                "*size": {
                    "value": "(size_n[0], int(add_num * step))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_523": {
                "*size": {
                    "value": "add_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_81": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(ts_norm != 0).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(ts_norm != 0).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(ts_norm != 0).item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DessiLBI/example/grow-network/utils.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/imagenet/data_loader.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder('/home/lc/data/ILSVRC2012/train', transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder('/home/lc/data/ILSVRC2012/val/', transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "'ImageNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder('/home/lc/data/ILSVRC2012/train', transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder('/home/lc/data/ILSVRC2012/val/', transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "'ImageNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/imagenet/resnet_imagenet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_126": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "planes[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/imagenet/train_imagenet_slbi.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.resnet50().to(device)",
                            "Call"
                        ],
                        [
                            "resnet.resnet101().to(device)",
                            "Call"
                        ],
                        [
                            "resnet.resnet152().to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "resnet.resnet34().to(device)",
                            "Call"
                        ],
                        [
                            "resnet.resnet18().to(device)",
                            "Call"
                        ],
                        [
                            "alexnet.alexnet().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_153": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/imagenet/utils.py": {
        "torch": {}
    },
    "DessiLBI/example/imagenet/utils/train_val_utils.py": {
        "torch": {
            "topk_19": {
                "variable": {
                    "value": "(_, pred_t5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_35": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_39": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/imagenet_plot/src/cnn_layer_visualization.py": {
        "torch": {
            "Adam_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[processed_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[processed_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_63": {
                "input": {
                    "value": "self.conv_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_105": {
                "input": {
                    "value": "self.conv_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/imagenet_plot/src/misc_functions.py": {
        "torch": {
            "from_numpy_174": {
                "variable": {
                    "value": "im_as_ten",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_as_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(pil_im)",
                            "Call"
                        ],
                        [
                            "im_as_arr.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DessiLBI/example/lottery/cifar.py": {
        "torch": {
            "is_available_100": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_106": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_163": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_108": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_192": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_387": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in args._get_kwargs()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "mask_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.generate_strong_mask_dict()",
                            "Call"
                        ],
                        [
                            "optimizer.generate_strong_mask_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/masks/epoch{}.t7'.format(args.save_dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/lottery_ticket.py": {
        "torch": {
            "is_available_93": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_101": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_201": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/init.pth.tar'.format(args.save_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_371": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in args._get_kwargs()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_171": {
                "variable": {
                    "value": "mask_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/masks/epoch{}.t7'.format(args.save_dir, args.gamma_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/pruned_p{}.pth.tar'.format(args.save_dir, args.percent)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_189": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/pruned_p{}_epoch{}.pth.tar'.format(args.save_dir, args.percent, args.sgd_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/mask_utils.py": {
        "torch": {}
    },
    "DessiLBI/example/lottery/models/cifar/alexnet.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_14": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/models/cifar/densenet.py": {
        "torch": {
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(self.inplanes // compressionRate))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_103": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/models/cifar/preresnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_105": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/models/cifar/resnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_105": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/models/cifar/resnext.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_reduce.forward(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn.forward(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1.forward(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3.forward(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1.forward(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage_1.forward(x)",
                            "Call"
                        ],
                        [
                            "self.stage_2.forward(x)",
                            "Call"
                        ],
                        [
                            "self.stage_3.forward(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 8, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "residual + bottleneck",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/models/cifar/slbi.py": {
        "torch": {
            "reshape_256": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(s_t.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_257": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(s_t, (s_t.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 3)",
                            "Call"
                        ],
                        [
                            "ts_norm.repeat(1, s_t.size()[1], s_t.size()[2], s_t.size()[3])",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_259": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 3)",
                            "Call"
                        ],
                        [
                            "ts_norm.repeat(1, s_t.size()[1], s_t.size()[2], s_t.size()[3])",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_260": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 3)",
                            "Call"
                        ],
                        [
                            "ts_norm.repeat(1, s_t.size()[1], s_t.size()[2], s_t.size()[3])",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ts.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_277": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(s_t, (s_t.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_278": {
                "variable": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_279": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(s_t, (s_t.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.mul(torch.transpose(ts_reshape, 0, 1), ts_shrink), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts_return, ts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "gamma_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./'",
                            "MethodArgument"
                        ],
                        [
                            "'./'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_250": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_262": {
                "input": {
                    "value": "s_t.abs() - lam * ts_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_278": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 3)",
                            "Call"
                        ],
                        [
                            "ts_norm.repeat(1, s_t.size()[1], s_t.size()[2], s_t.size()[3])",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_279": {
                "input": {
                    "value": "torch.transpose(ts_reshape, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(ts_norm), torch.ones_like(ts_norm) - torch.div(torch.ones_like(ts_norm), ts_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_59": {
                "variable": {
                    "value": "mask[param_state[name]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_250": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_278": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 3)",
                            "Call"
                        ],
                        [
                            "ts_norm.repeat(1, s_t.size()[1], s_t.size()[2], s_t.size()[3])",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_278": {
                "input": {
                    "value": "torch.ones_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(ts_norm, 3)",
                            "Call"
                        ],
                        [
                            "ts_norm.repeat(1, s_t.size()[1], s_t.size()[2], s_t.size()[3])",
                            "Call"
                        ],
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_93": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_175": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_250": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_227": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_233": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_227": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_228": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_233": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_234": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/models/cifar/vgg.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_31": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/models/cifar/wrn.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_33": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/slbi.py": {
        "torch": {
            "reshape_338": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ts.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_340": {
                "variable": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_341": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "variable": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.mul(torch.transpose(ts_reshape, 0, 1), ts_shrink), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts_return, ts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "gamma_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_cache_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_318": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_339": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_340": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1) * (1 / math.sqrt(ts_reshape.shape[1]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_341": {
                "input": {
                    "value": "torch.transpose(ts_reshape, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(ts_norm), torch.ones_like(ts_norm) - torch.div(lam * torch.ones_like(ts_norm), ts_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_70": {
                "variable": {
                    "value": "mask[param_state[name]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_318": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_340": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1) * (1 / math.sqrt(ts_reshape.shape[1]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_340": {
                "input": {
                    "value": "lam * torch.ones_like(ts_norm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1) * (1 / math.sqrt(ts_reshape.shape[1]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_115": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_116": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_79": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_318": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_186": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_193": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_194": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_70": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_203": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_206": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_222": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_229": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_230": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_79": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_242": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_245": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_260": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_268": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_269": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_186": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_281": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_284": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_222": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_260": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_187": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_223": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_261": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/slbi_noconv.py": {
        "torch": {
            "save_61": {
                "obj": {
                    "value": "gamma_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_cache_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_292": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_69": {
                "variable": {
                    "value": "mask[param_state[name]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_292": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_115": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_144": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_78": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_292": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_185": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_69": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_195": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_198": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_214": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_226": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_229": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gt_244": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_185": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_255": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_258": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_214": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_244": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_186": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_215": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_245": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/utils/misc.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "m.weight.data.eq(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_53": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/lottery/utils/visualize.py": {
        "torch": {
            "exp_19": {
                "input": {
                    "value": "-torch.pow(torch.add(x, -b), 2).div(2 * c * c)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_19": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, x.size(1), x.size(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.size(0), 3, x.size(2), x.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_19": {
                "input": {
                    "value": "torch.add(x, -b)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_19": {
                "input": {
                    "value": "2 * c * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "-b",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/mnist_plot_example/get_small_model.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(__input_dir__, 'checkpoint/ckpt_lbi_group_resume.t7')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/mnist_plot_example/lenet5.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.convnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('c1', nn.Conv2d(1, 6, kernel_size=(5, 5))), ('relu1', nn.ReLU()), ('s2', nn.MaxPool2d(kernel_size=(2, 2), stride=2)), ('c3', nn.Conv2d(6, 16, kernel_size=(5, 5))), ('relu3', nn.ReLU()), ('s4', nn.MaxPool2d(kernel_size=(2, 2), stride=2)), ('c5', nn.Conv2d(16, 120, kernel_size=(5, 5))), ('relu5', nn.ReLU())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('f6', nn.Linear(120, 84)), ('relu6', nn.ReLU()), ('f7', nn.Linear(84, 10)), ('sig7', nn.LogSoftmax())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('f300', nn.Linear(784, 300)), ('relu300', nn.ReLU()), ('f100', nn.Linear(300, 100)), ('relu100', nn.ReLU()), ('f10', nn.Linear(100, 10)), ('sig', nn.LogSoftmax())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/mnist_plot_example/lenet_v.py": {
        "torch": {
            "pow_28": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, 1:, :] - x[:, :, :h_x - 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_29": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, 1:] - x[:, :, :, :w_x - 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.processed_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.processed_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_model.convnet.c5.weight.data",
                            "Attribute"
                        ],
                        [
                            "torch.reshape(linear, [120, -1])",
                            "Call"
                        ],
                        [
                            "torch.sum(linear * linear, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[120, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear * linear",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_87": {
                "input": {
                    "value": "self.conv_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "self.conv_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/mnist_plot_example/misc_functions.py": {
        "torch": {
            "from_numpy_90": {
                "variable": {
                    "value": "cv2im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cv2im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(cv2im).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DessiLBI/example/mnist_plot_example/model.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.convnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('c1', nn.Conv2d(1, 6, kernel_size=(5, 5))), ('relu1', nn.ReLU()), ('s2', nn.MaxPool2d(kernel_size=(2, 2), stride=2)), ('c3', nn.Conv2d(6, 16, kernel_size=(5, 5))), ('relu3', nn.ReLU()), ('s4', nn.MaxPool2d(kernel_size=(2, 2), stride=2)), ('c5', nn.Conv2d(16, 120, kernel_size=(5, 5))), ('relu5', nn.ReLU())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('f6', nn.Linear(120, 84)), ('relu6', nn.ReLU()), ('f7', nn.Linear(84, 10)), ('sig7', nn.LogSoftmax())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('f300', nn.Linear(784, 300)), ('relu300', nn.ReLU()), ('f100', nn.Linear(300, 100)), ('relu100', nn.ReLU()), ('f10', nn.Linear(100, 10)), ('sig', nn.LogSoftmax())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/prune/data_loader.py": {
        "torch": {
            "DataLoader_14": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data/MNIST', train=train, download=download, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "DessiLBI/example/prune/lenet.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_16": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_17": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/prune/prune_lenet.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "load_pth",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "lenet.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/prune/slbi_opt.py": {
        "torch": {
            "reshape_170": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ts.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_171": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.mul(torch.transpose(ts_reshape, 0, 1), ts_shrink), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts_return, ts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_173": {
                "input": {
                    "value": "torch.transpose(ts_reshape, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(ts_norm), torch.ones_like(ts_norm) - torch.div(torch.ones_like(ts_norm), ts_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_172": {
                "input": {
                    "value": "torch.ones_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_107": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_125": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_109": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_129": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_107": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_125": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_109": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_129": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/prune/slbi_toolbox.py": {
        "torch": {
            "qr_250": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coordinate_matrix_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coordinate_matrix.view(-1, w * h * cin).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_251": {
                "variable": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_253": {
                "variable": {
                    "value": "(sorted_d, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(r_d)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_253": {
                "input": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_255": {
                "input": {
                    "value": "sorted_d",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_263": {
                "variable": {
                    "value": "init_matrix[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "basis[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(w * h * cin)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_79": {
                "variable": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_212": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_228": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_34": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_63": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_216": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_279": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_304": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_305": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_like_306": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_332": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_344": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_105": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_106": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_107": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_110": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_113": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_114": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_153": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_186": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_38": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_39": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_120": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_123": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_124": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_310": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_47": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_115": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_121": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_126": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_105": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_110": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/prune/utils.py": {
        "torch": {
            "load_99": {
                "variable": {
                    "value": "loaded_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_18": {
                "variable": {
                    "value": "(_, pred_t5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "new_running_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "new_running_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/train/data_loader.py": {
        "torch": {
            "DataLoader_14": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data/MNIST', train=train, download=download, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "DessiLBI/example/train/lenet.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(F.relu(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 120)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_16": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_17": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/train/slbi_opt.py": {
        "torch": {
            "reshape_170": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ts.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_171": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ts, (ts.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.mul(torch.transpose(ts_reshape, 0, 1), ts_shrink), 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ts_return, ts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "s_t.abs() - lam * torch.ones_like(s_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_173": {
                "input": {
                    "value": "torch.transpose(ts_reshape, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_shrink",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.zeros_like(ts_norm), torch.ones_like(ts_norm) - torch.div(torch.ones_like(ts_norm), ts_norm))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_172": {
                "input": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_172": {
                "input": {
                    "value": "torch.ones_like(ts_norm)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(ts_reshape, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "param_state[z_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "param_state[gamma_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "s_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_107": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_125": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_109": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gt_129": {
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_107": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_125": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_109": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_129": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/train/slbi_toolbox.py": {
        "torch": {
            "qr_250": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "coordinate_matrix_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coordinate_matrix.view(-1, w * h * cin).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_251": {
                "variable": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_253": {
                "variable": {
                    "value": "(sorted_d, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(r_d)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_253": {
                "input": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_255": {
                "input": {
                    "value": "sorted_d",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_263": {
                "variable": {
                    "value": "init_matrix[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "basis[k, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(w * h * cin)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_79": {
                "variable": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_212": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_228": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_34": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_63": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_216": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_279": {
                "variable": {
                    "value": "(sorted_filter, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['w_star'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_304": {
                "variable": {
                    "value": "ts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(param_state['w_star'], (param_state['w_star'].shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_305": {
                "variable": {
                    "value": "num_selected_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts_norm != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_like_306": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_332": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_344": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_105": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_106": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_107": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_110": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_113": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_114": {
                "variable": {
                    "value": "(epoch_per_filer, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(param_state['epoch_record'], (param_state['epoch_record'].shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_153": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_186": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_state['prune_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ],
                        [
                            "np.percentile(order, percent)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_38": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_39": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_120": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_123": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param_state['gamma_buffer'])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_124": {
                "variable": {
                    "value": "param_state[epoch_record]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - mask) * 2000.0 + mask * float(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_310": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_47": {
                "input": {
                    "value": "param_state['w_star']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "input": {
                    "value": "param_state['epoch_record']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(param_state['epoch_record'].shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_115": {
                "input": {
                    "value": "torch.reshape(p.data, (p.data.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(p.data.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_121": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_126": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_105": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_110": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "param_state['gamma_buffer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/train/train_lenet.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lenet.Net().to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DessiLBI/example/train/utils.py": {
        "torch": {
            "load_99": {
                "variable": {
                    "value": "loaded_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_18": {
                "variable": {
                    "value": "(_, pred_t5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "new_running_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "new_running_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}