{
    "train_pbfgs.py": {
        "sklearn": {
            "PCA_157": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "eye_298": {
                "variable": {
                    "value": "Bk",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_141": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "get_model(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.array(pca.components_)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(P).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_172": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_309": {
                "variable": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.array(pca.components_)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(P).cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "grad.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_311": {
                "variable": {
                    "value": "grad_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_grad_vec(model) / args.accumulate",
                            "BinOp"
                        ],
                        [
                            "torch.mm(P, grad.reshape(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "233",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "233",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PBFGS.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_333": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.arch + '_temporary.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_422": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_166": {
                "f": {
                    "value": "os.path.join(args.save_dir, str(args.params_start) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_324": {
                "input": {
                    "value": "Bk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(args.n_components).cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(t1.transpose(0, 1), Bk), t1) + torch.mm(pk * sk, sk.transpose(0, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_grad_vec(model) / args.accumulate",
                            "BinOp"
                        ],
                        [
                            "torch.mm(P, grad.reshape(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_329": {
                "input": {
                    "value": "gk.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mm(Bk, gk)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_151": {
                "f": {
                    "value": "os.path.join(args.save_dir, str(i) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_317": {
                "input": {
                    "value": "yk.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dk",
                            "variable"
                        ],
                        [
                            "sk * rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_337": {
                "input": {
                    "value": "P.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "-sk",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_342": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.arch + '_temporary.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_361": {
                "input": {
                    "value": "P.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "-sk",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_320": {
                "n": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_320": {
                "input": {
                    "value": "pk * yk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sk.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_321": {
                "input": {
                    "value": "t1.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Bk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(args.n_components).cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(t1.transpose(0, 1), Bk), t1) + torch.mm(pk * sk, sk.transpose(0, 1))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train_pbfgs_imagenet.py": {
        "sklearn": {
            "PCA_156": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "eye_292": {
                "variable": {
                    "value": "Bk",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "get_model(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.array(pca.components_)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(P).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_172": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_303": {
                "variable": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.array(pca.components_)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(P).cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "grad.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_305": {
                "variable": {
                    "value": "grad_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_grad_vec(model)",
                            "Call"
                        ],
                        [
                            "torch.mm(P, grad.reshape(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "233",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "233",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PBFGS.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.arch + '_temporary.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_416": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_165": {
                "f": {
                    "value": "os.path.join(args.save_dir, str(args.params_start) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_318": {
                "input": {
                    "value": "Bk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(args.n_components).cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(t1.transpose(0, 1), Bk), t1) + torch.mm(pk * sk, sk.transpose(0, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_grad_vec(model)",
                            "Call"
                        ],
                        [
                            "torch.mm(P, grad.reshape(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_323": {
                "input": {
                    "value": "gk.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mm(Bk, gk)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "no_grad_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_150": {
                "f": {
                    "value": "os.path.join(args.save_dir, str(i) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_311": {
                "input": {
                    "value": "yk.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dk",
                            "variable"
                        ],
                        [
                            "sk * rho",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_331": {
                "input": {
                    "value": "P.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "-sk",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_336": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.arch + '_temporary.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_355": {
                "input": {
                    "value": "P.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "-sk",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_355": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_314": {
                "n": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_314": {
                "input": {
                    "value": "pk * yk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sk.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_315": {
                "input": {
                    "value": "t1.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Bk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(args.n_components).cuda()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(t1.transpose(0, 1), Bk), t1) + torch.mm(pk * sk, sk.transpose(0, 1))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train_psgd.py": {
        "sklearn": {
            "PCA_155": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "eye_288": {
                "variable": {
                    "value": "Bk",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.n_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "get_model(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.array(pca.components_)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(P).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_170": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_178": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[30, 50]",
                    "type": "List",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "args.start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_299": {
                "variable": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.array(pca.components_)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(P).cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "grad.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_301": {
                "variable": {
                    "value": "grad_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_grad_vec(model)",
                            "Call"
                        ],
                        [
                            "torch.mm(P, grad.reshape(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "233",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "233",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_209": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PSGD.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_366": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_164": {
                "f": {
                    "value": "os.path.join(args.save_dir, str(args.params_start) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_149": {
                "f": {
                    "value": "os.path.join(args.save_dir, str(i) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_param_vec(model)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(p0).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "X.cuda()",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_like_72": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "X.cuda()",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader",
                            "variable"
                        ],
                        [
                            "X.cuda()",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('../data', train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('../data', train=False, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_260": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root='../data', train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_210": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_283": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_132": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_196": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_250": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_208": {
                "obj": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_225": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_238": {
                "obj": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root='../data', train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cifar10_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar10_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(args.corrupt) + '_corruptedlabel'",
                            "BinOp"
                        ],
                        [
                            "'cifar100_' + str(percent) + '_smalldataset'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_count_133": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_204": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_206": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_258": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_250": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_427": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_116": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_ + args.arch + / + str(sample_idx) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_186": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_191": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_215": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_219": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_179": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_193": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_201": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_367": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_ + args.arch + / + str(sample_idx) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/attention.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.residual_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_105": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_113": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_121": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown4(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape2)",
                            "Call"
                        ],
                        [
                            "x_s + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup4(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_s.size(2), x_s.size(3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown4(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape2)",
                            "Call"
                        ],
                        [
                            "x_s + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup4(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_s.size(2), x_s.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x_s.size(2), x_s.size(3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "interpolate_140": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown4(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape2)",
                            "Call"
                        ],
                        [
                            "x_s + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup4(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_197": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_205": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown4(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape2)",
                            "Call"
                        ],
                        [
                            "x_s + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup4(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_s.size(2), x_s.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x_s.size(2), x_s.size(3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "interpolate_219": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown4(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape2)",
                            "Call"
                        ],
                        [
                            "x_s + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup4(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_271": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "(1 + x_s) * x_t",
                            "BinOp"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_280": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown4(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape2)",
                            "Call"
                        ],
                        [
                            "x_s + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup4(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown3(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=shape1)",
                            "Call"
                        ],
                        [
                            "self.soft_resup3(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resdown2(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup1(x_s)",
                            "Call"
                        ],
                        [
                            "self.soft_resup2(x_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_s, size=input_size)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x_s)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ],
                        [
                            "(x.size(2), x.size(3))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.stage4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PreActResidualUnit(1024, 2048, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_319": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_320": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "bottleneck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_channels / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "bottleneck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "bottleneck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_channels / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "bottleneck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(out_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_179": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_180": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_254": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_257": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_306": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_307": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_308": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/densenet.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.bottle_neck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.down_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "inner_channels + growth_rate * nblocks[len(nblocks) - 1]",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_100": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "inner_channels + growth_rate * nblocks[len(nblocks) - 1]",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "dense_block",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[x, self.bottle_neck(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "inner_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "inner_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(reduction * inner_channels)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "inner_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "inner_channels + growth_rate * nblocks[len(nblocks) - 1]",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/efficientnet.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SameConv(inchannels, outchannels, kernelsize, stride, dilation, groups, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_59": {
                "variable": {
                    "value": "self.AvgPool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.SEblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inchannels, mid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_83": {
                "variable": {
                    "value": "random",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.pointwise2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SameConv(mid, outchannels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_102": {
                "variable": {
                    "value": "self.dc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SameConv(3, renew_width(32), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MBblock(renew_width(32), renew_width(16), 1, 3, 1, se_ratio, renew_depth(1), True, dc_ratio, bn_momentum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SameConv(renew_width(320), renew_width(1280), 1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "renew_width(1280)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [0, col_is_odd, 0, row_is_odd])",
                            "Call"
                        ],
                        [
                            "x * width_multipler",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, col_is_odd, 0, row_is_odd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [0, col_is_odd, 0, row_is_odd])",
                            "Call"
                        ],
                        [
                            "x * width_multipler",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(row_padding_needed // 2, col_padding_needed // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outchannels",
                            "Method Argument"
                        ],
                        [
                            "outchannels",
                            "Method Argument"
                        ],
                        [
                            "outchannels",
                            "Method Argument"
                        ],
                        [
                            "outchannels",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [0, col_is_odd, 0, row_is_odd])",
                            "Call"
                        ],
                        [
                            "x * width_multipler",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expan * inchannels",
                            "BinOp"
                        ],
                        [
                            "mid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expan * inchannels",
                            "BinOp"
                        ],
                        [
                            "mid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ],
                        [
                            "inchannels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.AvgPool(x)",
                            "Call"
                        ],
                        [
                            "out.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.SEblock(out)",
                            "Call"
                        ],
                        [
                            "out.view(x.size(0), x.size(1), 1, 1)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "residual",
                            "variable"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(out)",
                            "Call"
                        ],
                        [
                            "self.stage3(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.FC(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_86": {
                "input": {
                    "value": "random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((x.size(0), 1, 1, 1), device=x.device)",
                            "Call"
                        ],
                        [
                            "random + self.survival",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Identity_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outchannels",
                            "Method Argument"
                        ],
                        [
                            "outchannels",
                            "Method Argument"
                        ],
                        [
                            "outchannels",
                            "Method Argument"
                        ],
                        [
                            "outchannels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_156": {
                "num_features": {
                    "value": "renew_width(32)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_172": {
                "num_features": {
                    "value": "renew_width(1280)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_174": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "p": {
                    "value": "do_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "do_ratio",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/googlenet.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, n1x1, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, n3x3_reduce, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, n5x5_reduce, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.b4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.prelayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_90": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_102": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout2d_103": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[self.b1(x), self.b2(x), self.b3(x), self.b4(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n1x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n1x1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "n1x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n1x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n3x3_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3_reduce",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "n3x3_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3_reduce",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "n3x3_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3_reduce",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "n3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5_reduce",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "n5x5_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5_reduce",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "n5x5_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5_reduce",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "pool_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_proj",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "pool_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_proj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/inceptionv3.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.branch5x5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 48, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 64, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 64, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_86": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, c7, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.branch7x7stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, c7, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.branch_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 192, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 192, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_172": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.branch_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "branch3x3stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3stack(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3stack_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3stack_2(branch3x3stack)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack_3a(branch3x3stack), self.branch3x3stack_3b(branch3x3stack)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3stack, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_276": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout2d_277": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_278": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_48": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_133": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_206": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/inceptionv4.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reduction_a.output_channels",
                            "Attribute"
                        ],
                        [
                            "self.reduction_a.output_channels",
                            "Attribute"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reduction_a.output_channels",
                            "Attribute"
                        ],
                        [
                            "self.reduction_a.output_channels",
                            "Attribute"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 32, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "variable": {
                    "value": "self.branch3x3_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.branch7x7a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.branch7x7b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.branchpoola",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 64, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 64, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, k, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_138": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.branch7x7stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 192, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 192, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 192, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_209": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 384, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "branch3x3stack_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3stack_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3stack(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stacka(branch3x3stack_output), self.branch3x3stackb(branch3x3stack_output)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3stack_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "branch3x3_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3a(branch3x3_output), self.branch3x3b(branch3x3_output)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_288": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_291": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - 0.8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 32, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 32, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_338": {
                "variable": {
                    "value": "self.reduction1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_339": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_340": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_341": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.branch1x1(x), self.branch3x3(x), self.branch3x3stack(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual)",
                            "Call"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ],
                        [
                            "[self.branch1x1(x), self.branch3x3(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_367": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 128, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "variable": {
                    "value": "self.reduction1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1154",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_376": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1154",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_378": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1154",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_379": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.branch1x1(x), self.branch3x3(x), self.branch3x3stack(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual)",
                            "Call"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ],
                        [
                            "[self.branch1x1(x), self.branch3x3(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 192, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "variable": {
                    "value": "self.reduction1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_416": {
                "variable": {
                    "value": "self.shorcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_417": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_418": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_426": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.branch1x1(x), self.branch3x3(x), self.branch3x3stack(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual)",
                            "Call"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ],
                        [
                            "[self.branch1x1(x), self.branch3x3(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(residual, 1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_446": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, k, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_453": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_475": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_477": {
                "variable": {
                    "value": "self.branch3x3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_482": {
                "variable": {
                    "value": "self.branch3x3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_487": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(input_channels, 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_501": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_517": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout2d_519": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - 0.8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_539": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1_output, branch3x3_output, branch3x3stack_output, branchpool]",
                            "List"
                        ],
                        [
                            "self.bn(shortcut + residual)",
                            "Call"
                        ],
                        [
                            "self.relu(output)",
                            "Call"
                        ],
                        [
                            "self.bn(residual + shortcut)",
                            "Call"
                        ],
                        [
                            "self.relu(output)",
                            "Call"
                        ],
                        [
                            "self.bn(shorcut + residual)",
                            "Call"
                        ],
                        [
                            "self.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_464": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x), self.branch3x3_pool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x), self.branch7x7b(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branchpoola(x), self.branchpoolb(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branch1x1(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x), self.branch7x7(x), self.branch7x7stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x), self.branch7x7(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1536)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x), self.branch3x3(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x), self.branch3x3b(x), self.branch3x3stack(x), self.branchpool(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2048)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_106": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_175": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_244": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/mobilenet.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, input_channels, kernel_size, groups=input_channels, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(3, int(32 * alpha), 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(64 * alpha), int(128 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(128 * alpha), int(256 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(256 * alpha), int(512 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthSeperabelConv2d(int(512 * alpha), int(1024 * alpha), 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(1024 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_193": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/mobilenetv2.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels * t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(320, 1280, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.stage5(x)",
                            "Call"
                        ],
                        [
                            "self.stage6(x)",
                            "Call"
                        ],
                        [
                            "self.stage7(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU6_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU6_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/nasnet.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConstantPad2d((0, 1, 0, 1), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.dim_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.dem_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.block1_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_150": {
                "variable": {
                    "value": "self.block3_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.block3_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_153": {
                "variable": {
                    "value": "self.block4_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_154": {
                "variable": {
                    "value": "self.block4_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.dim_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_206": {
                "variable": {
                    "value": "self.layer1block2_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_210": {
                "variable": {
                    "value": "self.layer1block3_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_214": {
                "variable": {
                    "value": "self.layer2block1_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_218": {
                "variable": {
                    "value": "self.layer2block2_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.layer2block2_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, stemfilter, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_260": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.filters * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_308": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_74": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(filters / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantPad2d_80": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConstantPad2d_81": {
                "padding": {
                    "value": "(-1, 0, -1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_82": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(filters / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p1, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_188": {
                "tensors": {
                    "value": "[prev, x1, x2, x3, x4, x5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "[layer1block2, layer1block3, layer2block1, layer2block2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "stemfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stemfilter",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_250": {
                "num_features": {
                    "value": "stemfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stemfilter",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/preactresnet.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * PreActBasic.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * PreActBottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * PreActBasic.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * PreActBottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.residual_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.residual_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_97": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * BasicBlock.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * BottleNeck.expansion, stride=stride, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "out_channels * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "out_channels * BottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnext.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.split_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, C * D, kernel_size=1, groups=C, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_81": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * 4, stride=stride, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "input": {
                    "value": "self.split_transforms(x) + self.shortcut(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C * D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CARDINALITY",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "C * D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "C * D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C * D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CARDINALITY",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "C * D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "C * D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "out_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "out_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/rir.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.residual_stream_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.transient_stream_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.residual_stream_conv_across",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.transient_stream_conv_across",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.residual_bn_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.transient_bn_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.short_cut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.residual_pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, base, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.transient_pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, base, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(384, num_classes, kernel_size=3, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(900, 450)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_residual, x_transient]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.short_cut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, out_channel, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(96 / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "900",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "450",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_143": {
                "in_features": {
                    "value": "450",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/senet.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, stride=stride, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_39": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.excitation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_channels * self.expansion, out_channels * self.expansion // r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_81": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.excitation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_channels * self.expansion, out_channels * self.expansion // r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual * excitation.expand_as(residual) + shortcut",
                            "BinOp"
                        ],
                        [
                            "residual * excitation.expand_as(residual) + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * self.expansion, 1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual * excitation.expand_as(residual) + shortcut",
                            "BinOp"
                        ],
                        [
                            "residual * excitation.expand_as(residual) + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * self.expansion, 1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_108": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual * excitation.expand_as(residual) + shortcut",
                            "BinOp"
                        ],
                        [
                            "residual * excitation.expand_as(residual) + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels * self.expansion // r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "out_channels * self.expansion // r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels * self.expansion // r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "out_channels * self.expansion // r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/shufflenet.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, kernel_size, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 1, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.bottlneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PointwiseConv2d(input_channels, int(output_channels / 4), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_206": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.bottlneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PointwiseConv2d(input_channels, int(output_channels / 4), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_131": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_142": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, self.groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.avg(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "*args": {
                    "value": "*stage",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/shufflenetv2.py": {
        "torch": {
            "split_23": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1, height, width)",
                            "Call"
                        ],
                        [
                            "torch.cat([shortcut, residual], dim=1)",
                            "Call"
                        ],
                        [
                            "channel_shuffle(x, 2)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shortcut, residual]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 24, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_channels[2], out_channels[3], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1, height, width)",
                            "Call"
                        ],
                        [
                            "torch.cat([shortcut, residual], dim=1)",
                            "Call"
                        ],
                        [
                            "channel_shuffle(x, 2)",
                            "Call"
                        ],
                        [
                            "self.pre(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, 3, stride=stride, padding=1, groups=in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "out_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(out_channels / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "int(out_channels / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(out_channels / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "int(out_channels / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels / 2)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/squeezenet.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, squzee_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.expand_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(squzee_channel, int(out_channel / 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.expand_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(squzee_channel, int(out_channel / 2), 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.expand_1x1(x), self.expand_3x3(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_71": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_72": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "squzee_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squzee_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "squzee_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squzee_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "squzee_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squzee_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(out_channel / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "int(out_channel / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "squzee_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squzee_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(out_channel / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "int(out_channel / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/stochasticdepth.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_40": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(self.p).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_120": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(self.p).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_154": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * StochasticDepthBasicBlock.expansion, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_41": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bernoulli(torch.tensor(self.p).float())",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(torch.tensor(self.p).float())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(1).float().to(var.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels * StochasticDepthBottleNeck.expansion, stride=stride, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_121": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bernoulli(torch.tensor(self.p).float())",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(torch.tensor(self.p).float())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(1).float().to(var.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * StochasticDepthBasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "data": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * StochasticDepthBottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "num_features": {
                    "value": "out_channels * StochasticDepthBottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * StochasticDepthBasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * StochasticDepthBottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "out_channels * StochasticDepthBottleNeck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "l",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "models/wideresidual.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_59": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/xception.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.conv3_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SeperableConv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv3_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv4_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv4_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.conv5_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.conv5_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 728, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(728, 1024, 1, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SeperableConv2d(1024, 1536, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_194": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_163": {
                "*args": {
                    "value": "*flows",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_177": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "728",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "num_features": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_110": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_71": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_sgd.py": {
        "torch": {
            "DataParallel_100": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "get_model(args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_140": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[100, 150]",
                    "type": "List",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "args.start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, str(0) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_346": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_107": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_144": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[150]",
                    "type": "List",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "args.start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, str(epoch + 1) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}