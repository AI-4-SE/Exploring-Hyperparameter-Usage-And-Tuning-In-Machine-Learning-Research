{
    "monoloco/eval/eval_activity.py": {
        "sklearn": {
            "accuracy_score_241": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_gt['all']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_pred['all']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_score_229": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_gt[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_pred[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/activity.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "dds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(dds).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "dds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(stds).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "dic_out['stds_ale']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "stds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "laplace_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dds, stds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/eval/generate_kitti.py": {
        "torch": {
            "is_available_39": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/eval/reid_baseline.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_64": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform_test(image) for image in images]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "751",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_87": {
                "variable": {
                    "value": "distmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query / query.norm(dim=1)[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "reference_norm.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_38": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_81": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_1",
                            "variable"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_82": {
                "input": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_2",
                            "variable"
                        ],
                        [
                            "features_1",
                            "variable"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_82": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/network/architectures.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.stereo_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.linear_stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.linear_stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.w3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.w_aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.w_fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, aux)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_83": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_122": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.linear_stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.linear_stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_157": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_160": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.l_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/network/net.py": {
        "torch": {
            "empty_142": {
                "variable": {
                    "value": "total_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, inputs.size()[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(keypoints).to(self.device)",
                            "Call"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kk).to(self.device)",
                            "Call"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(db[:, 0:1], bi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "total_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_outputs, samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_292": {
                "variable": {
                    "value": "dic_out[xyzd][idx][3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_out['xyzd'][idx][0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "keypoints_r",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints_r.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(keypoints_r).to(self.device)",
                            "Call"
                        ],
                        [
                            "keypoints[0:1, :].clone()",
                            "Call"
                        ],
                        [
                            "keypoints_r",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "monoloco/network/process.py": {
        "torch": {
            "empty_33": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 68)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_105": {
                "variable": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Laplace_119": {
                "variable": {
                    "value": "laplace",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(outputs[:, 1])",
                            "Call"
                        ],
                        [
                            "torch.exp(loc[:, 1:2]) * loc[:, 0:1]",
                            "BinOp"
                        ],
                        [
                            "unnormalize_bi(dic_out['d'])",
                            "Call"
                        ],
                        [
                            "unnormalize_bi(dic_out['zb'])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_265": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d ** 2 - x ** 2 - y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "dic_out[xyzd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_272": {
                "variable": {
                    "value": "yaw_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_out['ori'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "dic_out['ori'][:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_351": {
                "variable": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_out['xyz']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "dic_out[xyzd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dic_out['xyz'], dd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_356": {
                "variable": {
                    "value": "yaw_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_out['ori'][:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "dic_out['ori'][:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(keypoints)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kk)",
                            "Call"
                        ],
                        [
                            "[[im_size[0] * focal_length / Sx, 0.0, im_size[0] / 2], [0.0, im_size[1] * focal_length / Sy, im_size[1] / 2], [0.0, 0.0, 1.0]]",
                            "List"
                        ],
                        [
                            "configs[calibration]['intrinsics']",
                            "Subscript"
                        ],
                        [
                            "dic_names[name]['K']",
                            "Subscript"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_115": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "get_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.get_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_277": {
                "variable": {
                    "value": "dic_out[aux]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_out['aux']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inp_l, inp_l - inp_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_131": {
                "input": {
                    "value": "loc[:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/predict.py": {
        "torch": {
            "device_117": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_120": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/prep/preprocess_kitti.py": {
        "torch": {
            "cat_246": {
                "variable": {
                    "value": "keypoint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kp_aug, kp_aug_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_l, input_l - input_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "dic_kps['right'][ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/train/datasets.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "self.inputs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic_jo[phase]['X']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "self.outputs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic_jo[phase]['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.inputs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic_jo[phase]['X']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.outputs_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic_jo[phase]['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "self.kps_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic_jo[phase]['kps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.dic_clst[clst]['X']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.dic_clst[clst]['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/train/hyp_tuning.py": {
        "torch": {
            "save_109": {
                "obj": {
                    "value": "model_best.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/train/losses.py": {
        "torch": {
            "atan2_243": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orient[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "orient[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_244": {
                "variable": {
                    "value": "gt_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_orient[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "gt_orient[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_253": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(out[:, 0:1] - gt_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "losses_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.multi_loss_tr[l] for l in self.tasks]",
                            "ListComp"
                        ],
                        [
                            "losses_tr",
                            "Method Argument"
                        ],
                        [
                            "losses_tr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.log_sigmas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((len(lambdas),), dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "losses_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.multi_loss_tr[l] for l in self.tasks]",
                            "ListComp"
                        ],
                        [
                            "losses_tr",
                            "Method Argument"
                        ],
                        [
                            "losses_tr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_165": {
                "variable": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_si",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(si.size()).cuda(self.device) * 0.1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_168": {
                "variable": {
                    "value": "term_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "si * math.sqrt(2 * math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_weights(unnormalized_output, self.beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_140": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.laplacian_1d(outputs, targets)",
                            "Call"
                        ],
                        [
                            "self.gaussian_1d(outputs, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_142": {
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.laplacian_1d(outputs, targets)",
                            "Call"
                        ],
                        [
                            "self.gaussian_1d(outputs, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_184": {
                "variable": {
                    "value": "mean_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.laplacian_1d(outputs, targets)",
                            "Call"
                        ],
                        [
                            "self.gaussian_1d(outputs, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_186": {
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.laplacian_1d(outputs, targets)",
                            "Call"
                        ],
                        [
                            "self.gaussian_1d(outputs, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_253": {
                "input": {
                    "value": "out[:, 0:1] - gt_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "(len(lambdas),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_164": {
                "*size": {
                    "value": "si.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_236": {
                "input": {
                    "value": "output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_247": {
                "input": {
                    "value": "torch.abs(angles - gt_angles)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_125": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - mu / xx",
                            "BinOp"
                        ],
                        [
                            "xx - mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_125": {
                "input": {
                    "value": "-si",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_127": {
                "input": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_si[:, 1:2]",
                            "Subscript"
                        ],
                        [
                            "mu_si[:, 1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.max(min_si, si)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_247": {
                "input": {
                    "value": "angles - gt_angles",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_93": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/train/trainer.py": {
        "torch": {
            "is_available_81": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "all_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chain(self.model.parameters(), self.mt_loss.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_130": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StepLR_131": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.sched_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.sched_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_262": {
                "variable": {
                    "value": "errs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "extract_outputs(outputs)['d'] - extract_labels(labels)['d']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "self.r_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_388": {
                "input": {
                    "value": "torch.abs(mask.float() - labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "self.r_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "dataset": {
                    "value": "KeypointsDataset(self.joints, phase=phase)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_267": {
                "input": {
                    "value": "bis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_outputs(outputs)['bi'].cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_203": {
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sum_268": {
                "input": {
                    "value": "errs <= bis",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_388": {
                "input": {
                    "value": "mask.float() - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_153": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clip_grad_norm__159": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "monoloco/utils/camera.py": {
        "torch": {
            "pad_23": {
                "variable": {
                    "value": "uv_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uv_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(uv_tensor)",
                            "Call"
                        ],
                        [
                            "uv_tensor.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "uv_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_25": {
                "variable": {
                    "value": "kk_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kk)",
                            "Call"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "xyz_met_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uv_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(uv_tensor, pad=(0, 1), mode='constant', value=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kk_1.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_203": {
                "variable": {
                    "value": "corrections",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "xyz[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "uv_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "uv_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(uv_tensor)",
                            "Call"
                        ],
                        [
                            "uv_tensor.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "uv_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kk)",
                            "Call"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ],
                        [
                            "kk",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(keypoints)",
                            "Call"
                        ],
                        [
                            "keypoints.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(distances).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "distances.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "distances",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_169": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "kps_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kps_out_x, kps_out_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_177": {
                "input": {
                    "value": "1 + xy_centers[:, 0:1].pow(2) + xy_centers[:, 1:2].pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_240": {
                "input": {
                    "value": "rtp[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_241": {
                "input": {
                    "value": "rtp[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_242": {
                "input": {
                    "value": "rtp[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_232": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtp[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_236": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtp[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_240": {
                "input": {
                    "value": "rtp[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_232": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtp[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "monoloco/visuals/webcam.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_44": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.PilImageList([pil_image], preprocess=predictor.preprocess)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.collate_images_anns_meta",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}