{
    "better_mistakes/data/softmax_cascade.py": {
        "torch": {
            "Parameter_53": {
                "variable": {
                    "value": "self.softmax_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([num_softmaxes, num_edges], dtype=torch.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.path_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([num_edges, num_edges])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "[num_softmaxes, num_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "[num_edges, num_edges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_107": {
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normalise(inputs, norm_fn=torch.log_softmax)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(self.path_onehot, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "normalised_inputs * onehot * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "input": {
                    "value": "self.path_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "better_mistakes/model/init.py": {
        "torch": {}
    },
    "better_mistakes/model/labels.py": {
        "torch": {
            "Tensor_5": {
                "variable": {
                    "value": "distance_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_6": {
                "variable": {
                    "value": "max_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[distances[c1, c2] for c1 in classes] for c2 in classes])",
                            "Call"
                        ],
                        [
                            "distance_matrix / max_distance",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "soft_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_8": {
                "input": {
                    "value": "-hardness * distance_matrix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "torch.exp(-hardness * distance_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "better_mistakes/model/losses.py": {
        "torch": {
            "Parameter_66": {
                "variable": {
                    "value": "self.onehot_den",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([num_classes, num_classes, num_edges])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.onehot_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([num_classes, num_classes, num_edges])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([num_classes, num_edges])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_88": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(inputs, self.onehot_num[target])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "den",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(inputs, self.onehot_den[target])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.flip(self.weights[target] * num, dims=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_124": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_140": {
                "variable": {
                    "value": "inputs_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_143": {
                "variable": {
                    "value": "loss_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_143": {
                "variable": {
                    "value": "loss_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_161": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_162": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self._embeddings.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "negate_item",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs * true_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_184": {
                "variable": {
                    "value": "summed_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.ReLU()(full_rank_mat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.unsqueeze(torch.tensor([weights_dict[c] for c in classes], dtype=torch.float32), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_99": {
                "input": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.bmm(inputs, self.onehot_num[target]))",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.flip(self.weights[target] * num, dims=[1]), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "dot_product_pruned",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negate_item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(inputs * true_embeddings, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "[num_classes, num_classes, num_edges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "[num_classes, num_classes, num_edges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "[num_classes, num_edges]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_90": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.onehot_num[target]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_92": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.onehot_den[target]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "num[idx] / den[idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flip_97": {
                "input": {
                    "value": "self.weights[target] * num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_126": {
                "x1": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "emb_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embeddings(target)",
                            "Call"
                        ],
                        [
                            "self._embeddings(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_142": {
                "x1": {
                    "value": "inputs_cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.normalize(inputs, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "emb_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embeddings(target)",
                            "Call"
                        ],
                        [
                            "self._embeddings(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_171": {
                "variable": {
                    "value": "num_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_margin_violating[i, :] != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_219": {
                "input": {
                    "value": "torch.tensor([weights_dict[c] for c in classes], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "[weights_dict[c] for c in classes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "better_mistakes/model/performance.py": {
        "torch": {
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "better_mistakes/model/run_nn.py": {
        "torch": {
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "better_mistakes/model/run_xent.py": {
        "torch": {
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_79": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(embeddings)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "corrector(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "better_mistakes/util/label_embeddings.py": {
        "torch": {
            "from_numpy_6": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_8": {
                "variable": {
                    "value": "emb_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix.size()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "better_mistakes/util/rand.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_11": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/start_testing.py": {
        "torch": {
            "device_count_31": {
                "variable": {
                    "value": "gpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_dir, val_transforms(opts.data, normalize=True))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_99": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_101": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_140": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(test_opts.experiments_path, experiment, 'model_snapshots', checkpoint_id)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/start_training.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_dir, train_transforms(opts.target_size, opts.data, augment=opts.data_augmentation, normalize=True))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(val_dir, val_transforms(opts.data, normalize=True))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_348": {
                "variable": {
                    "value": "gpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opts.out_folder, 'checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'steps': steps, 'arch': opts.arch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_folder, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "KLDivLoss_122": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_250": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_252": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_215": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opts.pretrained_folder, 'checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_217": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts.pretrained_folder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_255": {
                "params": {
                    "value": "[{'params': model.conv1.parameters()}, {'params': model.layer1.parameters()}, {'params': model.layer2.parameters()}, {'params': model.layer3.parameters()}, {'params': model.layer4.parameters()}, {'params': model.fc.parameters(), 'lr': opts.lr_fc, 'weight_decay': opts.weight_decay_fc}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_269": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_271": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_273": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}