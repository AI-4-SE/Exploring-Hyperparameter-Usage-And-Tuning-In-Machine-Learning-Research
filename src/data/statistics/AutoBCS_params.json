{
    "Inference/Evaluate_set5.py": {
        "torch": {
            "DataParallel_24": {
                "variable": {
                    "value": "IniReconNet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "IniReconNet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSM_IniReconNet(256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(IniReconNet)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "DeepOctNet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "DeepOctNet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OctNet(2)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(DeepOctNet)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['img_label']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['img_label']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['img_label']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "pred_IR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_IR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IniReconNet(image)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_IR, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_IR, 0)",
                            "Call"
                        ],
                        [
                            "pred_IR.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_IR.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "pred_IR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_IR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IniReconNet(image)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_IR, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_IR, 0)",
                            "Call"
                        ],
                        [
                            "pred_IR.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_IR.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "pred_FR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_FR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DeepOctNet(pred_IR)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_FR, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_FR, 0)",
                            "Call"
                        ],
                        [
                            "pred_FR.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_FR.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "pred_FR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_FR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DeepOctNet(pred_IR)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_FR, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_FR, 0)",
                            "Call"
                        ],
                        [
                            "pred_FR.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_FR.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "../Pre-TrainedModel/IniReconNet_ScalingFactor_4.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_33": {
                "f": {
                    "value": "../Pre-TrainedModel/DeepOctNet_ScalingFactor_4.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Model/LSM_and_Initial_Recon.py": {
        "torch": {
            "randn_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.sampling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "SamplingPoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SamplingPoints",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "BlockSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.init_bl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "SamplingPoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SamplingPoints",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "BlockSize ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "x_IR",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_patches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.SamplingPoints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "y_IR",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_patches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.BlockSize ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H * L // BlockSize ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "BlockSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "BlockSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.oriH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.oriL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "temp_IR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_IR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_IR[:, i, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(temp_IR, 1)",
                            "Call"
                        ],
                        [
                            "temp_IR.to(device)",
                            "Call"
                        ],
                        [
                            "self.init_bl(temp_IR)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, i, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "temp.to(device)",
                            "Call"
                        ],
                        [
                            "self.sampling(temp)",
                            "Call"
                        ],
                        [
                            "x[:, :, i:i + BlockSize, j:j + BlockSize]",
                            "Subscript"
                        ],
                        [
                            "x[:, count, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(temp, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(temp, [nb, 1, BlockSize, BlockSize])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, i, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "temp.to(device)",
                            "Call"
                        ],
                        [
                            "self.sampling(temp)",
                            "Call"
                        ],
                        [
                            "x[:, :, i:i + BlockSize, j:j + BlockSize]",
                            "Subscript"
                        ],
                        [
                            "x[:, count, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(temp, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(temp, [nb, 1, BlockSize, BlockSize])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb, 1, BlockSize, BlockSize]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Model/OctNet.py": {
        "torch": {
            "max_pool2d_56": {
                "variable": {
                    "value": "x_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.InputOct(x_h, x_l)",
                            "Call"
                        ],
                        [
                            "temp_conv(x_h, x_l)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x_h, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x_h, x_l)",
                            "Call"
                        ],
                        [
                            "temp_conv(x_h, x_l, x_h2, x_l2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_57": {
                "variable": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.InputOct(x_h, x_l)",
                            "Call"
                        ],
                        [
                            "temp_conv(x_h, x_l)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x_l, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x_h, x_l)",
                            "Call"
                        ],
                        [
                            "temp_conv(x_h, x_l, x_h2, x_l2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Model/OctNetBlocks.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "x_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_h1, x_h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l1, x_l2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_58": {
                "variable": {
                    "value": "self.up_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "variable": {
                    "value": "self.up_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.BN_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_62": {
                "variable": {
                    "value": "self.up_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.up_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.BN_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "variable": {
                    "value": "self.up_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_68": {
                "variable": {
                    "value": "self.up_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.BN_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_71": {
                "variable": {
                    "value": "self.up_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.up_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.BN_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_139": {
                "variable": {
                    "value": "y_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_114": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.FinalConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.convLL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_125": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "variable": {
                    "value": "self.BN_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_170": {
                "variable": {
                    "value": "y_l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ],
                        [
                            "x_h",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Training/DataLoad.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['subim_input']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['subim_input']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Training/TrainAutoBCS.py": {
        "torch": {
            "L1Loss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "IniReconNet.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "octReconNet.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_38": {
                "variable": {
                    "value": "scheduler1",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(IniReconNet.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_39": {
                "variable": {
                    "value": "scheduler2",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(octReconNet.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "IniReconNet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./IniReconNet_100EPO_64BATCH_ScalingFactor_4.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "octReconNet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./DeepOctNet_100EPO_64BATCH_ScalingFactor_4.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "IniReconNet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "IniReconNet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSM_IniReconNet(256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(IniReconNet)",
                            "Call"
                        ],
                        [
                            "IniReconNet",
                            "Method Argument"
                        ],
                        [
                            "IniReconNet",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "octReconNet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "octReconNet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OctNet(2)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(octReconNet)",
                            "Call"
                        ],
                        [
                            "octReconNet",
                            "Method Argument"
                        ],
                        [
                            "octReconNet",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}