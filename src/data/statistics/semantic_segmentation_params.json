{
    "config.py": {
        "torch": {}
    },
    "datasets/__init__.py": {
        "torch": {
            "DataLoader_174": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset_cls(mode=val_name, joint_transform_list=val_joint_transform_list, img_transform=val_input_transform, label_transform=target_transform, eval_folder=args.eval_folder)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(val_set, pad=False, permutation=False, consecutive_sample=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "dataset_cls(mode=mode, joint_transform_list=train_joint_transform_list, img_transform=train_input_transform, label_transform=target_train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.bs_trn",
                            "Attribute"
                        ],
                        [
                            "args.bs_trn * args.ngpu",
                            "BinOp"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(train_set, pad=True, permutation=True, consecutive_sample=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/base_loader.py": {
        "torch": {}
    },
    "datasets/nullloader.py": {
        "torch": {}
    },
    "datasets/randaugment.py": {
        "torch": {
            "Tensor_217": {
                "variable": {
                    "value": "self.eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_218": {
                "variable": {
                    "value": "self.eigvec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.transform(mask.size, Image.AFFINE, affine_params, resample=Image.NEAREST, fillcolor=fillmask)",
                            "Call"
                        ],
                        [
                            "mask.rotate(v, resample=Image.NEAREST, fillcolor=fillmask)",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/sampler.py": {
        "torch": {
            "Generator_80": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_84": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/uniform.py": {
        "torch": {}
    },
    "loss/optimizer.py": {
        "torch": {
            "load_114": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LambdaLR_88": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.SGD(param_groups, lr=args.lr, weight_decay=args.weight_decay, momentum=args.momentum, nesterov=False)",
                            "Call"
                        ],
                        [
                            "optim.Adam(param_groups, lr=args.lr, weight_decay=args.weight_decay, amsgrad=args.amsgrad)",
                            "Call"
                        ],
                        [
                            "RAdam(param_groups, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda epoch: math.pow(1 - epoch / args.max_epoch, args.poly_exp) if epoch < rescale_thresh else scale_value * math.pow(1 - (epoch - rescale_thresh) / (args.max_epoch - rescale_thresh), args.repoly)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "args.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_90": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.SGD(param_groups, lr=args.lr, weight_decay=args.weight_decay, momentum=args.momentum, nesterov=False)",
                            "Call"
                        ],
                        [
                            "optim.Adam(param_groups, lr=args.lr, weight_decay=args.weight_decay, amsgrad=args.amsgrad)",
                            "Call"
                        ],
                        [
                            "RAdam(param_groups, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "poly2_schd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LambdaLR_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.SGD(param_groups, lr=args.lr, weight_decay=args.weight_decay, momentum=args.momentum, nesterov=False)",
                            "Call"
                        ],
                        [
                            "optim.Adam(param_groups, lr=args.lr, weight_decay=args.weight_decay, amsgrad=args.amsgrad)",
                            "Call"
                        ],
                        [
                            "RAdam(param_groups, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "poly_schd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_114": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "loss/radam.py": {
        "torch": {
            "zeros_like_52": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "loss/rmi.py": {
        "torch": {
            "binary_cross_entropy_with_logits_38": {
                "variable": {
                    "value": "binary_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits_4D.permute(0, 2, 3, 1).contiguous().view([-1, self.num_classes])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "valid_onehot_label_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "valid_onehot_labels_4D.view([-1, self.num_classes]).requires_grad_(False)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "label_mask_flat.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_mask_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label_mask_3D.view([-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "div_50": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(binary_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "valid_pixels + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_119": {
                "variable": {
                    "value": "valid_onehot_labels_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_4D.long() * label_mask_3D.long()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_203": {
                "variable": {
                    "value": "diag_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.half_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_203": {
                "variable": {
                    "value": "diag_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "la_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "la_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "la_vectors - la_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "la_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_211": {
                "variable": {
                    "value": "pr_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pr_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pr_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "pr_vectors - pr_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pr_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "la_pr_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "la_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "la_vectors - la_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pr_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_240": {
                "variable": {
                    "value": "rmi_per_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmi_per_class",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "float(self.half_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_mask_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label_mask_3D.view([-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_135": {
                "variable": {
                    "value": "binary_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits_4D.permute(0, 2, 3, 1).contiguous().view([-1, self.num_classes])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "valid_onehot_label_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "valid_onehot_labels_4D.view([-1, self.num_classes]).requires_grad_(False)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "label_mask_flat.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_139": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(logits_flat, target=valid_onehot_label_flat, weight=label_mask_flat.unsqueeze(dim=1), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss_hard",
                            "Name"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(logits_flat, target=valid_onehot_label_flat, weight=label_mask_flat.unsqueeze(dim=1), reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_pixels + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_165": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "torch.tensor(thresh, requires_grad=False, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "binary_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(logits_flat, target=valid_onehot_label_flat, weight=label_mask_flat.unsqueeze(dim=1), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss_hard",
                            "Name"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(logits_flat, target=valid_onehot_label_flat, weight=label_mask_flat.unsqueeze(dim=1), reduction='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_179": {
                "variable": {
                    "value": "labels_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_180": {
                "variable": {
                    "value": "probs_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "input": {
                    "value": "la_pr_cov.matmul(pr_cov_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "la_pr_cov.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_242": {
                "input": {
                    "value": "rmi_per_class",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_242": {
                "input": {
                    "value": "rmi_per_class",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_35": {
                "data": {
                    "value": "thresh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.thresh.to(binary_loss.device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_182": {
                "variable": {
                    "value": "labels_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_183": {
                "variable": {
                    "value": "probs_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_188": {
                "variable": {
                    "value": "labels_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "probs_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "loss/rmi_utils.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_classeses, 1, radius, radius]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cholesky_105": {
                "variable": {
                    "value": "chol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cholesky_115": {
                "variable": {
                    "value": "chol_low",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "variable": {
                    "value": "invL",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_144": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logdet_147": {
                "variable": {
                    "value": "res_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_156": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_159": {
                "variable": {
                    "value": "res_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_166": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "x_var_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(x - x_mean).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "xy_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(y - y_mean).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "p_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pair_ns",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ],
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "la_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "la_ns",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "pr_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pr_ns",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "p_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pair_ns",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ],
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "la_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "la_ns",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "pr_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pr_ns",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "input": {
                    "value": "chol_low_inv.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "chol_low_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_low_tri_inv(chol_low)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_77": {
                "variable": {
                    "value": "la_now",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel_now",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel.clone()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "radius",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "radius // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_classeses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "pr_now",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel_now",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel.clone()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "radius",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "radius // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_classeses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_107": {
                "input": {
                    "value": "torch.log(torch.diagonal(chol, dim1=-2, dim2=-1) + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_174": {
                "input": {
                    "value": "x_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.sum(dim=1, keepdim=True) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x_sum.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(0, radius, 1)",
                            "Call"
                        ],
                        [
                            "range(0, radius, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(3, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "torch.diagonal(chol, dim1=-2, dim2=-1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diagonal_107": {
                "input": {
                    "value": "chol",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cholesky(matrix)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "loss/utils.py": {
        "torch": {
            "softmax_141": {
                "variable": {
                    "value": "soft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_80": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histc_91": {
                "variable": {
                    "value": "bins",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ]
                    ]
                },
                "bins": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_130": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_144": {
                "input": {
                    "value": "torch.max(soft, multihotmask * (soft * multihotmask).sum(1, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_273": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_145": {
                "input": {
                    "value": "soft",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_284": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_291": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "self.reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_296": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_356": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges[i].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nll_loss(F.log_softmax(inputs[i].unsqueeze(0)), targets[i].unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.mul(edges[i].unsqueeze(0), out)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_134": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_352": {
                "variable": {
                    "value": "self.nll_loss.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_116": {
                "input": {
                    "value": "inputs[i].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_354": {
                "input": {
                    "value": "inputs[i].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_227": {},
            "nonzero_300": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "network/Resnet.py": {
        "torch": {
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_147": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_152": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/SEresnext.py": {
        "torch": {
            "AdaptiveAvgPool2d_76": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layer0_modules)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_313": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=downsample_kernel_size, stride=stride, padding=downsample_padding, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_314": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_271": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_267": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/__init__.py": {
        "torch": {
            "DataParallel_41": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model(network='network.' + args.arch, num_classes=cfg.DATASET.NUM_CLASSES, criterion=criterion)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "apex.parallel.DistributedDataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net_func(num_classes=num_classes, criterion=criterion)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/adnb.py": {
        "torch": {
            "sum_25": {
                "variable": {
                    "value": "valid_H",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, :, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_26": {
                "variable": {
                    "value": "valid_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, 0, :]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "valid_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[valid_ratio_w, valid_ratio_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_42": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_50": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_91": {
                "variable": {
                    "value": "reference_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_points_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.level_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_feature_levels, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.reference_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "reference_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_points_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "src_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "src_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(src_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "mask_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_179": {
                "variable": {
                    "value": "spatial_shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "spatial_shapes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(spatial_shapes, dtype=torch.long, device=src_flatten.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_flatten.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "level_start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spatial_shapes.new_zeros((1,)), spatial_shapes.prod(1).cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_181": {
                "variable": {
                    "value": "valid_ratios",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_valid_ratio(m) for m in masks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "meshgrid_85": {
                "variable": {
                    "value": "(ref_y, ref_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(0.5, H_ - 0.5, H_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0.5, W_ - 0.5, W_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_x, ref_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_143": {
                "variable": {
                    "value": "(ref_y, ref_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(0.5, H_ - 0.5, H_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0.5, W_ - 0.5, W_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_147": {
                "variable": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_x, ref_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lvl_pos_embed_flatten, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_85": {
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "H_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_86": {
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "W_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_143": {
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "H_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_144": {
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "W_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "network/afnb.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(size, dimension) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[stage(feats).view(n, c, -1) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(low_feats, high_feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.f_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=high_in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_query(high_feats).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_key(low_feats)",
                            "Call"
                        ],
                        [
                            "self.psp(key)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.psp(self.f_value(low_feats))",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage([low_in_channels, high_in_channels], out_channels, key_channels, value_channels, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_channels + high_in_channels, out_channels, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_17": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_19": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "high_in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "out_channels + high_in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_133": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[context, high_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_21": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "network/apnb.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(size, dimension) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[stage(feats).view(n, c, -1) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_query(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_key(x)",
                            "Call"
                        ],
                        [
                            "self.psp(key)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.psp(self.f_value(x))",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(in_channels, out_channels, key_channels, value_channels, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * in_channels, out_channels, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_20": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_22": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_129": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_24": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "network/asnb.py": {
        "torch": {
            "MaxPool2d_54": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.f_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=high_in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_query(high_feats).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_key(low_feats)",
                            "Call"
                        ],
                        [
                            "self.spool(key)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.spool(self.f_value(low_feats))",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage([low_in_channels, high_in_channels], out_channels, key_channels, value_channels, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_channels + high_in_channels, out_channels, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_20": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "int(s1 * self.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_23": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(int(s1 * self.scale), int(s2 * self.scale))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "high_in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "out_channels + high_in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_133": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[context, high_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_26": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(int(s1 * self.scale), int(s2 * self.scale), int(s3 * self.scale))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "network/attnscale.py": {
        "torch": {
            "Conv2d_62": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ],
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "concat_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concat_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[feats_1x]",
                            "List"
                        ],
                        [
                            "torch.cat(concat_feats, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([all_feats[lo_scale], all_feats[hi_scale]], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ],
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "concat_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_feats[lo_scale], all_feats[hi_scale]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_243": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/basic.py": {
        "torch": {
            "Conv2d_78": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/bn_helper.py": {
        "torch": {}
    },
    "network/deeper.py": {
        "torch": {
            "Conv2d_50": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s4_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv_up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s4_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/deepv3.py": {
        "torch": {
            "Conv2d_54": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/deepv3attn.py": {
        "torch": {
            "Conv2d_58": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/hrnetv2.py": {
        "torch": {
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "interpolate_440": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_442": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_444": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_447": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0], x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "modules": {
                    "value": "branches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_225": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_351": {
                "modules": {
                    "value": "transition_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_356": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_463": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.HRNET_CHECKPOINT",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "{'cuda:0': 'cpu'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_223": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_357": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_246": {
                "input": {
                    "value": "self.fuse_layers[i][j](x[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[height_output, width_output]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_345": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_348": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_207": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "network/module_helper.py": {
        "torch": {
            "load_138": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_152": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_174": {
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "nn.BatchNorm2d(num_features, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "BatchNorm2d(num_features, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "*args": {
                    "value": "BatchNorm2d(num_features, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "nn.InstanceNorm2d(num_features, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_43": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/mscale.py": {
        "torch": {
            "Conv2d_249": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "cat_s4_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4_attn, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_391": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_392": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s4_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_393": {
                "variable": {
                    "value": "self.conv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_396": {
                "variable": {
                    "value": "self.conv_up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s4_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_428": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_502": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "scale_float",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_292": {
                "variable": {
                    "value": "a_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "scale_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_tensor, a_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "network/mscale2.py": {
        "torch": {
            "cat_139": {
                "variable": {
                    "value": "cat_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_lo, feats_hi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(scale_in_ch, 256, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "cat_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_lo, feats_hi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "cat_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, last_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "scale_in_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * (256 + 48)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/mscaleAttn.py": {
        "torch": {
            "Conv2d_251": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "cat_s4_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4_attn, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_396": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s4_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "variable": {
                    "value": "self.conv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "variable": {
                    "value": "self.conv_up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s4_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_506": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "scale_float",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_292": {
                "variable": {
                    "value": "a_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_263": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "scale_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_tensor, a_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "network/mscaleBiFeatureFusion.py": {
        "torch": {
            "cat_134": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred1, pred2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_218": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_classes * self.feature_expansion, num_classes, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "cat_s4_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_dict[fmt_scale('cat_s4_attn', s)]",
                            "Subscript"
                        ],
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4_attn, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_374": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s4_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_376": {
                "variable": {
                    "value": "self.conv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "variable": {
                    "value": "self.conv_up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s4_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_485": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_90": {
                "variable": {
                    "value": "scale_float",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_266": {
                "variable": {
                    "value": "a_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_165": {
                "tensors": {
                    "value": "[joint_pred1, joint_pred2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes * self.feature_expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "num_classes * self.feature_expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "scale_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_tensor, a_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "network/mscaleFeatureFusion.py": {
        "torch": {
            "Conv2d_257": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_classes * self.feature_expansion, num_classes, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "cat_s4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "cat_s4_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4_attn, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_403": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_404": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s4_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_405": {
                "variable": {
                    "value": "self.conv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_408": {
                "variable": {
                    "value": "self.conv_up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_437": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s4_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_514": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "scale_float",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_304": {
                "variable": {
                    "value": "a_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_265": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_268": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes * self.feature_expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "num_classes * self.feature_expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "scale_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_tensor, a_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "network/mynn.py": {
        "torch": {
            "interpolate_47": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_56": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_61": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_66": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_77": {
                "variable": {
                    "value": "x_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "y_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y.size(2), y.size(3))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "x_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "y_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y.size(2), y.size(3))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_92": {
                "variable": {
                    "value": "x_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_96": {
                "variable": {
                    "value": "x_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_107": {
                "variable": {
                    "value": "x_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_111": {
                "variable": {
                    "value": "x_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "network/ocr_utils.py": {
        "torch": {
            "softmax_43": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "ocr_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.f_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.f_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.f_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.f_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.key_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_pixel(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.f_object(proxy).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_down(proxy).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(_in_channels, out_channels, kernel_size=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_116": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(sim_map, value)",
                            "Call"
                        ],
                        [
                            "context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "context.view(batch_size, self.key_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.f_up(context)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=context, size=(h, w), mode='bilinear', align_corners=cfg.MODEL.ALIGN_CORNERS)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "cfg.MODEL.ALIGN_CORNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "_in_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * in_channels + aspp_out_ch",
                            "BinOp"
                        ],
                        [
                            "2 * in_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_146": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[context, aspp, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/ocrnet.py": {
        "torch": {
            "Sequential_54": {
                "variable": {
                    "value": "self.conv3x3_ocr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(high_level_ch, ocr_mid_channels, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ocr_mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.OCR.MID_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.DATASET.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(high_level_ch, high_level_ch, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ocr_mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.OCR.MID_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "high_level_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.DATASET.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/ops/functions/ms_deform_attn_func.py": {
        "torch": {
            "grid_sample_55": {
                "variable": {
                    "value": "sampling_value_l_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_l_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "value_list[lid_].flatten(2).transpose(1, 2).reshape(N_ * M_, D_, H_, W_)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid_l_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sampling_grids[:, :, :, lid_].transpose(1, 2).flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "sampling_value_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "network/ops/modules/ms_deform_attn.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.sampling_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.value_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_65": {
                "variable": {
                    "value": "grid_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[thetas.cos(), thetas.sin()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_weights(query).view(N, Len_q, self.n_heads, self.n_levels * self.n_points)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weights, -1).view(N, Len_q, self.n_heads, self.n_levels, self.n_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.sampling_offsets.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_init.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "offset_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_spatial_shapes[..., 1], input_spatial_shapes[..., 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_64": {
                "start": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/ops/setup.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/ops/test.py": {
        "torch": {
            "as_tensor_23": {
                "variable": {
                    "value": "shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(6, 4), (3, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "level_start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shapes.new_zeros((1,)), shapes.prod(1).cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_40": {
                "variable": {
                    "value": "fwdok",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_cuda",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step).detach().cpu()",
                            "Call"
                        ],
                        [
                            "MSDeformAttnFunction.apply(value, shapes, level_start_index, sampling_locations, attention_weights, im2col_step).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_pytorch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ms_deform_attn_core_pytorch(value.double(), shapes, sampling_locations.double(), attention_weights.double()).detach().cpu()",
                            "Call"
                        ],
                        [
                            "ms_deform_attn_core_pytorch(value, shapes, sampling_locations, attention_weights).detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_56": {
                "variable": {
                    "value": "fwdok",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_cuda",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step).detach().cpu()",
                            "Call"
                        ],
                        [
                            "MSDeformAttnFunction.apply(value, shapes, level_start_index, sampling_locations, attention_weights, im2col_step).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_pytorch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ms_deform_attn_core_pytorch(value.double(), shapes, sampling_locations.double(), attention_weights.double()).detach().cpu()",
                            "Call"
                        ],
                        [
                            "ms_deform_attn_core_pytorch(value, shapes, sampling_locations, attention_weights).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradcheck_76": {
                "variable": {
                    "value": "gradok",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[30, 32, 64, 71, 1025, 2048, 3096]",
                            "List"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_67": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "network/utils.py": {
        "torch": {
            "Conv2d_369": {
                "variable": {
                    "value": "od[conv2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_370": {
                "variable": {
                    "value": "od[sig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_372": {
                "variable": {
                    "value": "attn_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "od",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_378": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_200": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_203": {
                "variable": {
                    "value": "self.img_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.edge_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, reduction_dim, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, edge_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=3, dilation=dil, padding=dil, bias=False, groups=groups)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_294": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b, c, d, e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "*args": {
                    "value": "Norm2d(ch)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "*args": {
                    "value": "nn.Conv2d(in_ch, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "variable": {
                    "value": "od[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_364": {
                "variable": {
                    "value": "od[re1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_367": {
                "variable": {
                    "value": "od[drop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.img_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.img_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dil",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "dil",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm2d_265": {
                "num_features": {
                    "value": "reduction_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_266": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_332": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_381": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_382": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_384": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_385": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "resnet.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=3, dilation=r, padding=r, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_355": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_358": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "resnet.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rates",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rates",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/wider_resnet.py": {
        "torch": {
            "Sequential_49": {
                "*args": {
                    "value": "mynn.Norm2d(channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.mod1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, 3, stride=1, padding=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.mod1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, 3, stride=1, padding=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_406": {
                "variable": {
                    "value": "wide_resnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "wide_resnet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "wider_resnet38_a2(classes=1000, dilation=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(wide_resnet)",
                            "Call"
                        ],
                        [
                            "wide_resnet.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.proj_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avg_pool', GlobalAvgPool2d()), ('fc', nn.Linear(in_channels, classes))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avg_pool', GlobalAvgPool2d()), ('fc', nn.Linear(in_channels, classes))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_409": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.WRN38_CHECKPOINT",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "*args": {
                    "value": "OrderedDict(blocks)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "*args": {
                    "value": "OrderedDict(blocks)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_243": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_356": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_312": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_364": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "network/xception.py": {
        "torch": {
            "pad_20": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(pad_beg, pad_end, pad_beg, pad_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_285": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_272": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.X71_CHECKPOINT",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "set_device_309": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_365": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "auto_resume_details.get('RESUME_FILE', None)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_404": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_405": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_376": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_387": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_485": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, args.arch + '_' + str(epoch) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_486": {
                "obj": {
                    "value": "optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, args.arch + '_' + str(epoch) + '.state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_366": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_377": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_388": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "transforms/transforms.py": {
        "torch": {
            "from_numpy_72": {
                "ndarray": {
                    "value": "np.array(img, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "ndarray": {
                    "value": "one_hot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "one_hot + self.new_one_hot_converter(shifted)",
                            "BinOp"
                        ],
                        [
                            "np.where(np.expand_dims(mask, 2), one_hot_orig, one_hot)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(one_hot, -1, 0)",
                            "Call"
                        ],
                        [
                            "np.where(border_prediction, 2 * one_hot, 1 * one_hot)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "device_count_74": {
                "variable": {
                    "value": "args.ngpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_422": {
                "variable": {
                    "value": "imgs_to_tensorboard",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flattenned",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/my_data_parallel.py": {
        "torch": {
            "get_device_properties_53": {
                "device": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_101": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "parallel_apply(replicas, inputs, module_kwargs, used_device_ids)",
                            "Call"
                        ],
                        [
                            "self.parallel_apply(replicas, inputs, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "output_device",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "device_ids[0]",
                            "Subscript"
                        ],
                        [
                            "device_ids[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "index": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_202": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "parallel_apply(replicas, inputs, module_kwargs, used_device_ids)",
                            "Call"
                        ],
                        [
                            "self.parallel_apply(replicas, inputs, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/trnval_utils.py": {
        "torch": {
            "interpolate_52": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(inputs, size=target_size, mode='bilinear', align_corners=cfg.MODEL.ALIGN_CORNERS)",
                            "Call"
                        ],
                        [
                            "flip_tensor(ori_images, 3)",
                            "Call"
                        ],
                        [
                            "ori_images",
                            "Name"
                        ],
                        [
                            "resize_tensor(inputs, infer_size)",
                            "Call"
                        ],
                        [
                            "in_image.cuda()",
                            "Call"
                        ],
                        [
                            "{'images': inputs, 'gts': gt_image}",
                            "Dict"
                        ]
                    ]
                },
                "size": {
                    "value": "target_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "cfg.MODEL.ALIGN_CORNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_355": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "output / len(scales) / len(flips)",
                            "BinOp"
                        ],
                        [
                            "output + flip_tensor(_pred, 3)",
                            "BinOp"
                        ],
                        [
                            "output + _pred",
                            "BinOp"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_235": {
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "output / len(scales) / len(flips)",
                            "BinOp"
                        ],
                        [
                            "output + flip_tensor(_pred, 3)",
                            "BinOp"
                        ],
                        [
                            "output + _pred",
                            "BinOp"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_244": {
                "variable": {
                    "value": "smax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_dict[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "x.size(i) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}