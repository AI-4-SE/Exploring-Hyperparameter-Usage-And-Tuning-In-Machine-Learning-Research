{
    "eval/eval_quality/eval_quality.py": {
        "sklearn": {}
    },
    "eval/eval_recognition/eval_1v1.py": {
        "sklearn": {
            "KFold_97": {
                "variable": {
                    "value": "k_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "nrof_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KFold_140": {
                "variable": {
                    "value": "self.k_fold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "eval/eval_recognition/eval_ijb.py": {
        "sklearn": {
            "roc_curve_170": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "read_template_pair_list('{}/meta/ijb{}_template_pair_label.txt'.format(args.base_dir, args.type))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(p1),))",
                            "Call"
                        ],
                        [
                            "verification(template_feats, unique_templates, p1, p2)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_171": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(label, scores)",
                            "Call"
                        ],
                        [
                            "np.flipud(fpr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(label, scores)",
                            "Call"
                        ],
                        [
                            "np.flipud(tpr)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "zeros_82": {
                "variable": {
                    "value": "template_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_templates), img_feats.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CosineSimilarity_118": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_119": {
                "variable": {
                    "value": "simi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos(embeddings0, embeddings1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "media_norm_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "media_norm_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "media_norm_feats + [np.mean(face_norm_feats[ind_m], 0, keepdims=False)]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(media_norm_feats)",
                            "Call"
                        ],
                        [
                            "F.normalize(media_norm_feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_103": {
                "variable": {
                    "value": "template_feats[count_template]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "media_norm_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "media_norm_feats + [np.mean(face_norm_feats[ind_m], 0, keepdims=False)]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(media_norm_feats)",
                            "Call"
                        ],
                        [
                            "F.normalize(media_norm_feats)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_101": {
                "variable": {
                    "value": "media_norm_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "media_norm_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "media_norm_feats + [np.mean(face_norm_feats[ind_m], 0, keepdims=False)]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(media_norm_feats)",
                            "Call"
                        ],
                        [
                            "F.normalize(media_norm_feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_120": {
                "input": {
                    "value": "simi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(cos(embeddings0, embeddings1), min=-1, max=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader/dataloader.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MagTrainDataset(args.train_list, transform=train_trans)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/dataloader_dist.py": {
        "torch": {
            "DataLoader_140": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MagTrainDataset(args.train_list, transform=train_trans, rank=args.rank, num_replicas=args.world_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ParallelDistributedSampler(train_dataset, rank=args.rank, num_replicas=args.world_size, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Generator_103": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_106": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inference/gen_feat.py": {
        "torch": {
            "device_count_84": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "builder_inf(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "inf_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "inf_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImgInfLoader(ann_file=args.inf_list, transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/network_inf.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_55": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/iresnet.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_35": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_80": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_88": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_92": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion * self.fc_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_94": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/magface.py": {
        "torch": {
            "Parameter_79": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_88": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l_a",
                            "Method Argument"
                        ],
                        [
                            "l_a",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "u_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_a",
                            "Method Argument"
                        ],
                        [
                            "u_a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_93": {
                "variable": {
                    "value": "weight_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_94": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(self.weight, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_96": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - torch.pow(cos_theta, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_133": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(F.normalize(x), weight_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.scale * cos_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_entropy_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot * cos_theta_m + (1.0 - one_hot) * cos_theta",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_99": {
                "variable": {
                    "value": "cos_theta_m",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cos_theta > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_theta * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cos_theta > 0, cos_theta_m, cos_theta)",
                            "Call"
                        ],
                        [
                            "torch.where(cos_theta > threshold, cos_theta_m, cos_theta - mm)",
                            "Call"
                        ],
                        [
                            "self.scale * cos_theta_m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(F.normalize(x), weight_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.scale * cos_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_102": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "math.pi - ada_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_103": {
                "variable": {
                    "value": "cos_theta_m",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cos_theta > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos_theta * cos_m - sin_theta * sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cos_theta > 0, cos_theta_m, cos_theta)",
                            "Call"
                        ],
                        [
                            "torch.where(cos_theta > threshold, cos_theta_m, cos_theta - mm)",
                            "Call"
                        ],
                        [
                            "self.scale * cos_theta_m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_theta - mm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_127": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / self.u_a ** 2 * x_norm + 1 / x_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_90": {
                "input": {
                    "value": "ada_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_90": {
                "input": {
                    "value": "ada_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_94": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_96": {
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(F.normalize(x), weight_norm)",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.scale * cos_theta",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_101": {
                "input": {
                    "value": "math.pi - ada_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/magface_dist.py": {
        "torch": {
            "DistributedDataParallel_22": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features.to(args.gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_92": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "ts.distributed.gather(x, dim=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "self.u_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/parallel_maglinear.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_65": {
                "variable": {
                    "value": "weight_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_66": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight_norm.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_72": {
                "variable": {
                    "value": "cos_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ada_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_73": {
                "variable": {
                    "value": "sin_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ada_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_75": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - torch.pow(cos_theta, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_67": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ts.distributed.copy(x.float())",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_80": {
                "variable": {
                    "value": "cos_theta_m",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cos_theta.float() > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_theta.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_87": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "math.pi - ada_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_88": {
                "variable": {
                    "value": "cos_theta_m",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cos_theta.float() > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cos_theta_m.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_theta.float() - mm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_75": {
                "input": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(F.normalize(x), weight_norm.t())",
                            "Call"
                        ],
                        [
                            "cos_theta.clamp(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.scale * cos_theta",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_86": {
                "input": {
                    "value": "math.pi - ada_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/parallel_magloss.py": {
        "torch": {
            "zeros_33": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(cos_theta.size(0), world_size * cos_theta.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cos_theta.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / self.u_a ** 2 * x_norm + 1 / x_norm",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "run/trainer.py": {
        "torch": {
            "device_count_103": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_114": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "magface.builder(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_243": {
                "variable": {
                    "value": "mean_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, target)",
                            "Call"
                        ],
                        [
                            "x_norm.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_244": {
                "variable": {
                    "value": "max_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, target)",
                            "Call"
                        ],
                        [
                            "x_norm.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_245": {
                "variable": {
                    "value": "min_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, target)",
                            "Call"
                        ],
                        [
                            "x_norm.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_230": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "one_hot.bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_232": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(output[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "one_hot.bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_233": {
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "run/trainer_dist.py": {
        "torch": {
            "device_count_118": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_156": {
                "variable": {
                    "value": "grad_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "args.amp_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_277": {
                "variable": {
                    "value": "mean_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, target)",
                            "Call"
                        ],
                        [
                            "x_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_278": {
                "variable": {
                    "value": "max_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, target)",
                            "Call"
                        ],
                        [
                            "x_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_279": {
                "variable": {
                    "value": "min_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input, target)",
                            "Call"
                        ],
                        [
                            "x_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_122": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "synchronize_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_224": {
                "enabled": {
                    "value": "args.amp_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_231": {
                "enabled": {
                    "value": "args.amp_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/cv2_funcs.py": {
        "torch": {
            "as_tensor_126": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean, dtype=dtype, device=tensor.device)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_127": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(std, dtype=dtype, device=tensor.device)",
                            "Call"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_33": {
                "obj": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int32, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int16, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.float32, copy=False))",
                            "Call"
                        ],
                        [
                            "img.view(pic.size[1], pic.size[0], nchannel)",
                            "Call"
                        ],
                        [
                            "img.transpose(0, 1).transpose(0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "255 * torch.from_numpy(np.array(pic, np.uint8, copy=False))",
                            "BinOp"
                        ],
                        [
                            "torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))",
                            "Call"
                        ],
                        [
                            "crop(img, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "resize(img, size, interpolation)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "nppic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([pic.channels, pic.height, pic.width], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.float32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "np.array(pic, np.uint8, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/cv2_trans.py": {
        "torch": {}
    },
    "utils/utils.py": {
        "torch": {
            "norm_65": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_66": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(input, 2, axis, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_71": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ],
                        [
                            "'log.txt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}