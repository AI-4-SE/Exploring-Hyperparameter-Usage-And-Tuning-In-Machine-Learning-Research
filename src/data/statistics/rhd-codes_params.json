{
    "1_digit_model/1_digit_model.py": {
        "sklearn": {
            "train_test_split_144": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Birthplaces/Fsted_training.py": {
        "sklearn": {
            "train_test_split_76": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HelperFunctions/GND_Clustering/Clustering.py": {
        "sklearn": {
            "GaussianMixture_122": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_init": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(self.components, init_weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HelperFunctions/GND_Clustering/Clustering_28-28.py": {
        "sklearn": {
            "GaussianMixture_122": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_init": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(self.components, init_weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HelperFunctions/GND_Clustering/ImageSegClustering.py": {
        "sklearn": {
            "GaussianMixture_175": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_init": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(self.components, init_weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Model_Evaluation/PrecisionRecall_curves.py": {
        "sklearn": {}
    },
    "Model_Evaluation/calculate_recall_precision_score.py": {
        "sklearn": {
            "precision_score_24": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_25": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_26": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_29": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_30": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_31": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_34": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_35": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_36": {
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Model_Evaluation/confusionMatrix.py": {
        "sklearn": {
            "confusion_matrix_57": {
                "variable": {
                    "value": "cf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "list_of_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "list_of_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(fp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Testing/validation.py": {
        "sklearn": {
            "classification_report_91": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5', 'Class 6', 'Class 7', 'Class 8', 'Class 9']",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "classification_report_144": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "np.load('C:\\\\Models\\\\Ground_truth_arrays\\\\3_digit_greyscale_ground_truth_labels.npy')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "classification_report_205": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_arr",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "classification_report_272": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_arr.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "target_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5', 'Class 6', 'Class 7', 'Class 8', 'Class 9']",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Training/create_models_and_ground_truth.py": {
        "sklearn": {
            "StratifiedKFold_393": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_379": {
                "variable": {
                    "value": "(X, X_val, y, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_337": {
                "variable": {
                    "value": "(X_indices, X_val_indices, y, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "fake_X_indeices",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_X_y(data, db, table, color)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, shuffle=True)",
                            "Call"
                        ],
                        [
                            "np.array([i[4] for i in data_list])",
                            "Call"
                        ],
                        [
                            "train_test_split(fake_X_indeices, y, test_size=0.2, stratify=y, shuffle=True)",
                            "Call"
                        ],
                        [
                            "data_augmentation_augment_and_upload(X, iterations)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "create_X_y(data, db, table, color)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, stratify=y, shuffle=True)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "[temp.get(elem) for elem in y]",
                            "ListComp"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_366": {
                "variable": {
                    "value": "(X, X_val, y, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_X_y(data, db, table, color)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, shuffle=True)",
                            "Call"
                        ],
                        [
                            "np.array([i[4] for i in data_list])",
                            "Call"
                        ],
                        [
                            "train_test_split(fake_X_indeices, y, test_size=0.2, stratify=y, shuffle=True)",
                            "Call"
                        ],
                        [
                            "data_augmentation_augment_and_upload(X, iterations)",
                            "Call"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "create_X_y(data, db, table, color)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, stratify=y, shuffle=True)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "[temp.get(elem) for elem in y]",
                            "ListComp"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Training/train_model.py": {
        "sklearn": {
            "train_test_split_202": {
                "variable": {
                    "value": "(X, X_val, y, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "classification_report_97": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "validation_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validation_y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StratifiedKFold_264": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Validation_methods/label_validation.py": {
        "sklearn": {}
    },
    "3_digit_model/3_digit_model_training.py": {
        "tensorflow": {}
    },
    "Testing/inference.py": {
        "tensorflow": {
            "StringLookup_78": {
                "variable": {
                    "value": "char_to_num",
                    "type": "variable",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "list(characters)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_oov_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "mask_token": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "StringLookup_81": {
                "variable": {
                    "value": "num_to_char",
                    "type": "variable",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "char_to_num.get_vocabulary()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask_token": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "invert": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "decode_png_23": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_image_dtype_25": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_27": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_join_43": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "num_to_char(res)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Testing/inference_runner.py": {
        "tensorflow": {
            "load_model_34": {
                "variable": {
                    "value": "prediction_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "<Path_to_saved_model>",
                    "type": "str",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Training/ctc_training.py": {
        "tensorflow": {
            "StringLookup_196": {
                "variable": {
                    "value": "char_to_num",
                    "type": "variable",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "list(characters)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_oov_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "mask_token": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "StringLookup_199": {
                "variable": {
                    "value": "num_to_char",
                    "type": "variable",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "char_to_num.get_vocabulary()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask_token": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "invert": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EarlyStopping_240": {
                "variable": {
                    "value": "early_stopping",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "early_stopping_patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "restore_best_weights": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Model_255": {
                "variable": {
                    "value": "prediction_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "model.get_layer(name='image').input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "model.get_layer(name='dense2').output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_44": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(img_width, img_height, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_47": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_90": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_img, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CTCLayer(name='ctc_loss')(labels, x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ocr_model_v1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "read_file_129": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_png_131": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_images[i] * 255).numpy().astype('uint8')",
                            "Call"
                        ],
                        [
                            "img[:, :, 0].T",
                            "Attribute"
                        ],
                        [
                            "tf.io.read_file(img_path)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_image_dtype_133": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_images[i] * 255).numpy().astype('uint8')",
                            "Call"
                        ],
                        [
                            "img[:, :, 0].T",
                            "Attribute"
                        ],
                        [
                            "tf.io.read_file(img_path)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_135": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_images[i] * 255).numpy().astype('uint8')",
                            "Call"
                        ],
                        [
                            "img[:, :, 0].T",
                            "Attribute"
                        ],
                        [
                            "tf.io.read_file(img_path)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[img_height, img_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_images[i] * 255).numpy().astype('uint8')",
                            "Call"
                        ],
                        [
                            "img[:, :, 0].T",
                            "Attribute"
                        ],
                        [
                            "tf.io.read_file(img_path)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_png(img, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [img_height, img_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_27": {
                "variable": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(y_true)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "input_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(y_pred)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "label_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(y_true)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_154": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "num_to_char(res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_join_319": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "num_to_char(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_50": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_58": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_61": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "Conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_69": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_75": {
                "target_shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(img_width // downsample_factor, img_height // downsample_factor * 64)",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "reshape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_76": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Bidirectional_80": {
                "layer": {
                    "value": "layers.LSTM(128, return_sequences=True, dropout=0.25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bidirectional_81": {
                "layer": {
                    "value": "layers.LSTM(64, return_sequences=True, dropout=0.25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_84": {
                "units": {
                    "value": "len(characters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unicode_split_139": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_labels",
                            "variable"
                        ],
                        [
                            "tf.strings.reduce_join(num_to_char(label)).numpy().decode('utf-8')",
                            "Call"
                        ],
                        [
                            "char_to_num(tf.strings.unicode_split(label, input_encoding='UTF-8'))",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "input_encoding": {
                    "value": "UTF-8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_31": {
                "shape": {
                    "value": "(batch_len, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_32": {
                "shape": {
                    "value": "(batch_len, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTM_80": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_81": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_28": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_29": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}