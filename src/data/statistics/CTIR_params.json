{
    "capsnet-CTIR/main.py": {
        "sklearn": {
            "normalize_77": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data['all_class_vec']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data['uc_vec']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_score_154": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "total_y_test",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_y_test, batch_test))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "total_unseen_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_unseen_pred, te_batch_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_361": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "batch_y_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_tr_id[batch_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "tr_batch_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(clone_logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_362": {
                "variable": {
                    "value": "SUID_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "batch_y_id_SUID",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.LongTensor(len(batch_y_id))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "SUID_tr_batch_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(clone_SUID_logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_155": {
                "y_true": {
                    "value": "total_y_test",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_y_test, batch_test))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "total_unseen_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_unseen_pred, te_batch_pred))",
                            "Call"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CosineSimilarity_86": {
                "variable": {
                    "value": "cossim",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "sc_intents",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sc_intents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(sc_intents)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "uc_intents",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uc_intents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(uc_intents)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_91": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tool.compute_label_sim(u, s, config['sim_scale'])",
                            "Call"
                        ],
                        [
                            "[cossim(xi.view(1, feature_len), yi.view(1, feature_len)) for xi in sc_intents for yi in uc_intents]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sim)",
                            "Call"
                        ],
                        [
                            "sim.view(len(sc_intents), len(uc_intents))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(sim_ori, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(sim, [seen_votes.shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(sim, 0)",
                            "Call"
                        ],
                        [
                            "np.tile(sim, [seen_votes.shape[0], 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_93": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_166": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logit_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "logit_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logit_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "batch_len_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_len",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "s_len[batch_index]",
                            "Subscript"
                        ],
                        [
                            "u_len[begin_index:end_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(batch_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_274": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lstm.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "setting(data)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(logit_shape[0], logit_shape[1], logit_shape[2])",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_190": {
                "variable": {
                    "value": "preactivate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preact_trans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preactivate_unrolled.permute(r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_squash(preactivate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "votes * act_replicated",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "batch_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_len",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "s_len[batch_index]",
                            "Subscript"
                        ],
                        [
                            "u_len[begin_index:end_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(batch_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "batch_te",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_te",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_te_original[perm_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(batch_te)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_128": {
                "variable": {
                    "value": "test_avg_att_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_148": {
                "variable": {
                    "value": "unseen_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "batch_y_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_y[perm_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "ndarray": {
                    "value": "batch_ind_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_ind[perm_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_340": {
                "variable": {
                    "value": "avg_att_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lstm.forward(batch_x, batch_len, torch.from_numpy(embedding))",
                            "Call"
                        ],
                        [
                            "features_tensor.detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_348": {
                "variable": {
                    "value": "batch_y_ind_SUID",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_data.get_label(batch_y_id_SUID)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_277": {
                "f": {
                    "value": "config['ckpt_dir'] + 'best_model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_375": {
                "ndarray": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['embedding']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_379": {
                "obj": {
                    "value": "lstm.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "config['ckpt_dir'] + 'best_model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "ndarray": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['embedding']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "zerodnn-CTIR/zerodnn_main.py": {
        "sklearn": {
            "accuracy_score_148": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "total_y_test",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_y_test, batch_y_id))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "total_unseen_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_unseen_pred, y_pred_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_150": {
                "variable": {
                    "value": "logclasses",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "total_y_test",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_y_test, batch_y_id))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "total_unseen_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_unseen_pred, y_pred_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_205": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_pred_id",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.argmax(y_pred, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(y_pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "batch_y_id",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y_tr_id[batch_index]",
                            "Subscript"
                        ],
                        [
                            "y_te_id[batch_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "classification_report_149": {
                "y_true": {
                    "value": "total_y_test",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_y_test, batch_y_id))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "total_unseen_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.concatenate((total_unseen_pred, y_pred_id))",
                            "Call"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "x_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['x_tr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "x_te",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['x_te']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "y_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['y_tr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "y_tr_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['y_tr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "y_te_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['y_te']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "y_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['s_label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "s_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['s_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['embedding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "u_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['u_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "y_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(y_emb_tr, (config['batch_size'], 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "y_emb_te",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(y_emb_te, (config['test_sample_num'], 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "zerodnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "StepLR_167": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(zerodnn.parameters(), lr=config['learning_rate'])",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2021",
                            "Constant"
                        ]
                    ]
                }
            },
            "argmax_204": {
                "variable": {
                    "value": "y_pred_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_143": {
                "variable": {
                    "value": "y_pred_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "zerodnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "config['ckpt_dir'] + 'best_model' + config['experiment_time'] + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "capsnet-CTIR/model_torch.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['word_emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_26": {
                "variable": {
                    "value": "self.bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['word_emb_size']",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['keep_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.ws1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['d_a']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.ws2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['d_a']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['r']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_41": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_42": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.capsule_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((self.r, self.hidden_size * 2, self.s_cnum * self.output_atoms))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_68": {
                "variable": {
                    "value": "packed_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.word_embedding(input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.ws2(hbar).view(size[0], size[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_82": {
                "variable": {
                    "value": "self.sentence_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "outp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bilstm(packed_emb, (h_0, c_0))[0]",
                            "Subscript"
                        ],
                        [
                            "pad_packed_sequence(outp)[0].transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_88": {
                "variable": {
                    "value": "input_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dropout_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.drop(self.sentence_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tiled * self.capsule_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "votes_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "votes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(input_tiled * self.capsule_weights, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_dim, self.output_dim, self.output_atoms]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_102": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(logit_shape[0], logit_shape[1], logit_shape[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_137": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "self.SUID_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seen_logits, unseen_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "sc_intents",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sc_intents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(sc_intents)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(sc_intents[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "uc_intents",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uc_intents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(uc_intents)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(uc_intents[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_193": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[self.cossim(xi.view(1, feature_len), yi.view(1, feature_len)) for xi in sc_intents for yi in uc_intents]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sim)",
                            "Call"
                        ],
                        [
                            "sim.view(len(sc_intents), len(uc_intents))",
                            "Call"
                        ],
                        [
                            "[self.cossim(xi.view(1, self.emb_len), yi.view(1, self.emb_len)) for xi in sc_intents for yi in uc_intents]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sim)",
                            "Call"
                        ],
                        [
                            "sim.view(len(sc_intents), len(uc_intents))",
                            "Call"
                        ],
                        [
                            "self.softmax(sim)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_209": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[self.cossim(xi.view(1, feature_len), yi.view(1, feature_len)) for xi in sc_intents for yi in uc_intents]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sim)",
                            "Call"
                        ],
                        [
                            "sim.view(len(sc_intents), len(uc_intents))",
                            "Call"
                        ],
                        [
                            "[self.cossim(xi.view(1, self.emb_len), yi.view(1, self.emb_len)) for xi in sc_intents for yi in uc_intents]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sim)",
                            "Call"
                        ],
                        [
                            "sim.view(len(sc_intents), len(uc_intents))",
                            "Call"
                        ],
                        [
                            "self.softmax(sim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_216": {
                "variable": {
                    "value": "InnerPro",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I1 * I2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_217": {
                "variable": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I1",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_218": {
                "variable": {
                    "value": "len2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I2",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_221": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "divisor",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len1 * len2",
                            "BinOp"
                        ],
                        [
                            "divisor + mask.float() * c",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_223": {
                "variable": {
                    "value": "cosA",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "InnerPro / divisor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_230": {
                "variable": {
                    "value": "loss_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.MT_Loss(alpha, label, self.logits, seen_n, SUID_label)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_232": {
                "variable": {
                    "value": "self_atten_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.attention.permute([0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.norm(self.activation, dim=-1)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(torch.zeros(logit_shape[0], logit_shape[1], logit_shape[2]))",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ],
                        [
                            "raw_logits - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_123": {
                "variable": {
                    "value": "preactivate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preact_trans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preactivate_unrolled.permute(r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "votes * act_replicated",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "[0.5 * positive_cost + downweight * 0.5 * negative_cost, lambda_ * (0.5 * new_positive_cost + downweight * 0.5 * new_negative_cost)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "(self.r, self.hidden_size * 2, self.s_cnum * self.output_atoms)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "logit_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "logit_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logit_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_170": {
                "input": {
                    "value": "seen_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(seen_logits, dim=1, keepdim=True) / seen_n",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_171": {
                "input": {
                    "value": "unseen_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(unseen_logits, dim=1, keepdim=True) / (raw_logits.size()[1] - seen_n)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_234": {
                "input": {
                    "value": "self_atten_mul - torch.from_numpy(np.identity(att_matrix_size)).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_236": {
                "input": {
                    "value": "self_atten_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(self_atten_mul - torch.from_numpy(np.identity(att_matrix_size)).float()).float() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_75": {
                "sequence": {
                    "value": "outp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bilstm(packed_emb, (h_0, c_0))[0]",
                            "Subscript"
                        ],
                        [
                            "pad_packed_sequence(outp)[0].transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_234": {
                "ndarray": {
                    "value": "np.identity(att_matrix_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "zerodnn-CTIR/model_zerodnn.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool1d_21": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.st_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool1d_22": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.st_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_23": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.in_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineSimilarity_26": {
                "variable": {
                    "value": "self.cossim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_27": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "all_emb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "all_intents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_intents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_embedding(all_emb)",
                            "Call"
                        ],
                        [
                            "torch.mean(all_intents, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "intents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intents",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_embedding(intents)",
                            "Call"
                        ],
                        [
                            "torch.mean(intents, 2)",
                            "Call"
                        ],
                        [
                            "intents.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_42": {
                "variable": {
                    "value": "utter_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(utter_mean.permute(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "int_encoders",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "int_encoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[F.tanh(self.in_linear(intents[:, :, i])) for i in range(class_num[2])]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(int_encoders)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_52": {
                "variable": {
                    "value": "all_int_encoders",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_int_encoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[F.tanh(self.in_linear(i)) for i in all_intents]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(all_int_encoders)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_55": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[self.cossim(utter_encoder.squeeze(1), yi) for yi in int_encoders]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sim)",
                            "Call"
                        ],
                        [
                            "sim.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_58": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.softmax(r) for r in sim]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_64": {
                "variable": {
                    "value": "ifunseen_y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seen_logits, unseen_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_47": {
                "input": {
                    "value": "self.in_linear(intents[:, :, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "input": {
                    "value": "self.in_linear(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "seen_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(seen_logits, dim=1, keepdim=True) / seen_n",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "unseen_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(unseen_logits, dim=1, keepdim=True) / (y_pred.size()[1] - seen_n)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}