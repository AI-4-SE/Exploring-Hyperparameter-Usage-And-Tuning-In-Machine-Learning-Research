{
    "dataloaders/base.py": {
        "sklearn": {
            "train_test_split_13": {
                "variable": {
                    "value": "(split_indices, _, split_targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(len(dataset))",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "dataset",
                    "type": null,
                    "possible_values": []
                },
                "stratify": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Subset_17": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "split_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ogd/ntk.py": {
        "sklearn": {},
        "torch": {
            "TensorDataset_38": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(new_data)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/continual_learning_algorithms/conv_split_cifar.py": {
        "tensorflow": {
            "Graph_689": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_688": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_696": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_721": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_693": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_702": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, TOTAL_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_706": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_709": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_725": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_712": {
                "variable": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_713": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "base_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.pow(1 - train_step / training_iters, OPT_POWER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_714": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "OPT_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_700": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, TOTAL_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_713": {
                "x": {
                    "value": "1 - train_step / training_iters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "OPT_POWER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/continual_learning_algorithms/fc_mnist.py": {
        "tensorflow": {
            "Graph_526": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_533": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, INPUT_FEATURE_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_530": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_540": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, TOTAL_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_544": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_560": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_563": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "global_variables_initializer_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_547": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_568": {
                "config": {
                    "value": "config",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_550": {
                "variable": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_551": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "base_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.pow(1 - train_step / training_iters, OPT_POWER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_552": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "OPT_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                }
            },
            "print_366": {
                "*inputs": {
                    "value": "model.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_stream": {
                    "value": "sys.stderr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_367": {
                "*inputs": {
                    "value": "model.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_stream": {
                    "value": "sys.stderr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_538": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, TOTAL_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_551": {
                "x": {
                    "value": "1 - train_step / training_iters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "OPT_POWER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/continual_learning_algorithms/model/model.py": {
        "tensorflow": {
            "get_variable_53": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "v.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.sample_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.task_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.store_grad_batches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.train_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.training_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "self.violation_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_109": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_110": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "all_args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "3100",
                    "type": "Constant",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "all_args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_111": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_119": {
                "variable": {
                    "value": "self.synap_stgth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "synap_stgth",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_409": {
                "variable": {
                    "value": "self.merged_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_493": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_517": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_545": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_558": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_571": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_584": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_597": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_601": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_723": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[1] * shape[2] * shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_741": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_745": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_750": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_755": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_760": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_764": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[1] * shape[2] * shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_793": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_812": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_975": {
                "variable": {
                    "value": "self.weights_old_ops_grouped",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*weights_old_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_976": {
                "variable": {
                    "value": "self.weights_delta_old_grouped",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*weights_delta_old_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_994": {
                "variable": {
                    "value": "self.restore_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*restore_weights_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_995": {
                "variable": {
                    "value": "self.set_star_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*set_star_vars_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variables_initializer_1008": {
                "variable": {
                    "value": "self.opt_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.optimizer_slots",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_1042": {
                "variable": {
                    "value": "self.update_small_omega",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_small_omega_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_1043": {
                "variable": {
                    "value": "self.reset_small_omega",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*reset_small_omega_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "gradients_1083": {
                "variable": {
                    "value": "ders",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.unweighted_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.trainable_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_1107": {
                "variable": {
                    "value": "self.max_fisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.convert_to_tensor(self.max_fisher_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_1108": {
                "variable": {
                    "value": "self.min_fisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.convert_to_tensor(self.min_fisher_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1114": {
                "variable": {
                    "value": "self.clear_attr_embed_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.normalized_fisher_at_minima_vars[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros_like(self.normalized_fisher_at_minima_vars[-2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_1122": {
                "variable": {
                    "value": "self.sparsify_fisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*sparsify_fisher_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "gradients_1140": {
                "variable": {
                    "value": "self.mse_gradients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.trainable_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_1158": {
                "variable": {
                    "value": "ref_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.agem_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.trainable_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1161": {
                "variable": {
                    "value": "flat_ref_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad, [-1]) for grad in self.ref_grads]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_1163": {
                "variable": {
                    "value": "task_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.agem_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.trainable_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1164": {
                "variable": {
                    "value": "flat_task_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad, [-1]) for grad in task_grads]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "v.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.train_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_phase",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_94": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(x_train)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(x_test)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, train_shape[1], train_shape[2], train_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_234": {
                "variable": {
                    "value": "self.pruned_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.tile(tf.equal(self.output_mask[None, :], 1.0), [tf.shape(logits)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "self.vgg_16_conv_feedforward(x)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task, is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "logits + create_fc_layer(h_tt, U_w, U_b, apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "vgg_fc_layer(h, self.total_classes, self.trainable_vars, apply_relu=False, name='fc8')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "NEG_INF * tf.ones_like(logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "self.weighted_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.softmax_cross_entropy(y_, self.pruned_logits, self.sample_weights, reduction=tf.losses.Reduction.NONE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_246": {
                "variable": {
                    "value": "self.unweighted_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_, logits=self.pruned_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_286": {
                "variable": {
                    "value": "self.merged_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_299": {
                "variable": {
                    "value": "self.correct_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.pruned_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_300": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_predictions, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_371": {
                "variable": {
                    "value": "pruned_zst_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.tile(tf.equal(self.output_mask[None, :], 1.0), [tf.shape(zst_logits)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(phi_x, tf.transpose(attr_embed)) + last_layer_biases",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "NEG_INF * tf.ones_like(zst_logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "variable": {
                    "value": "self.unweighted_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_, logits=pruned_zst_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_406": {
                "name": {
                    "value": "triplet_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.unweighted_entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_419": {
                "variable": {
                    "value": "self.correct_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pruned_zst_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_420": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_predictions, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_608": {
                "variable": {
                    "value": "h_tt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.h_pnn[tt][5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_652": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_839": {
                "a": {
                    "value": "attr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight_variable([layer_dims[i], layer_dims[i + 1]], name='fc_w_%d_t0' % i)",
                            "Call"
                        ],
                        [
                            "weight_variable([layer_dims[i], layer_dims[i + 1]], name='fc_w_%d_t%d' % (i, task))",
                            "Call"
                        ],
                        [
                            "weight_variable([layer_dims[i], layer_dims[i + 1]], name='fc_%d' % i)",
                            "Call"
                        ],
                        [
                            "weight_variable([kernel[i], kernel[i], depth[i], depth[i + 1]], name='conv_%d' % i)",
                            "Call"
                        ],
                        [
                            "weight_variable([flat_units, self.total_classes], name='fc_%d' % i)",
                            "Call"
                        ],
                        [
                            "weight_variable([self.attr_dims, self.image_feature_dim], name='attr_embed_w')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_1045": {
                "variable": {
                    "value": "self.update_big_omega",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_big_omega_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reduce_max_1062": {
                "variable": {
                    "value": "self.max_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.convert_to_tensor(self.max_score_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_1063": {
                "variable": {
                    "value": "self.min_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.convert_to_tensor(self.min_score_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_1074": {
                "variable": {
                    "value": "self.sparsify_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*sparsify_score_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reduce_sum_1166": {
                "variable": {
                    "value": "dotp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(flat_task_grads, flat_ref_grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1167": {
                "variable": {
                    "value": "ref_mag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(flat_ref_grads, flat_ref_grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_1173": {
                "variable": {
                    "value": "self.violation_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater_equal(dotp, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(self.violation_count)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "increment_violation_count",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_1174": {
                "variable": {
                    "value": "projected_gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater_equal(dotp, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.identity(flat_task_grads)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(proj)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "group_1185": {
                "variable": {
                    "value": "self.store_proj_grads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*store_proj_grad_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "v.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.mem_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.output_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.total_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_283": {
                "name": {
                    "value": "unweighted_entropy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.unweighted_entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_359": {
                "a": {
                    "value": "phi_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.vgg_16_conv_feedforward(x)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(attr_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_367": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pruned_zst_logits[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(tf.tile(tf.equal(self.output_mask[None, :], 1.0), [tf.shape(zst_logits)[0], 1]), zst_logits, NEG_INF * tf.ones_like(zst_logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_408": {
                "name": {
                    "value": "v.name.replace(':', '_')",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.trainable_vars",
                            "Attribute"
                        ],
                        [
                            "self.trainable_vars",
                            "Attribute"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.normalized_score_vars) - 2)",
                            "Call"
                        ],
                        [
                            "range(len(self.normalized_fisher_at_minima_vars) - 2)",
                            "Call"
                        ],
                        [
                            "self.projected_gradients_list",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_472": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "preactivation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "preactivation + create_fc_layer(self.h_pnn[tt][i], U_w, U_b, apply_relu=False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_656": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_715": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_853": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(tf.square(w - w_star) * f) for (w, w_star, f) in zip(self.trainable_vars, self.star_vars, self.normalized_fisher_at_minima_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_1047": {
                "variable": {
                    "value": "self.update_big_omega_riemann",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_big_omega_riemann_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_add_1088": {
                "ref": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1091": {
                "ref": {
                    "value": "r_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "s_f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assign_1094": {
                "ref": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.fisher_ema_decay) * f + 1.0 / self.fisher_update_after * self.fisher_ema_decay * tmp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_1097": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assign_1100": {
                "ref": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros_like(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1103": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.expand_dims(tf.squeeze(tf.reduce_max(scr, keepdims=True)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1105": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.expand_dims(tf.squeeze(tf.reduce_min(scr, keepdims=True)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1107": {
                "value": {
                    "value": "self.max_fisher_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1108": {
                "value": {
                    "value": "self.min_fisher_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_1109": {
                "control_inputs": {
                    "value": "[self.max_fisher, self.min_fisher]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_1114": {
                "input": {
                    "value": "self.normalized_fisher_at_minima_vars[-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_1132": {
                "ref": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "f * tf.exp(-100.0 * s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_add_1143": {
                "ref": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1145": {
                "ref": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "omega * (1.0 / self.train_samples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_1147": {
                "ref": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros_like(omega)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1160": {
                "ref": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_1165": {
                "control_inputs": {
                    "value": "[flat_task_grads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'train_phase_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.total_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_234": {
                "input": {
                    "value": "tf.equal(self.output_mask[None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(logits)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_243": {
                "t": {
                    "value": "self.pruned_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_244": {
                "onehot_labels": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.pruned_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.sample_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_246": {
                "labels": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.pruned_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_285": {
                "name": {
                    "value": "v.name.replace(':', '_')",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.trainable_vars",
                            "Attribute"
                        ],
                        [
                            "self.trainable_vars",
                            "Attribute"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.normalized_score_vars) - 2)",
                            "Call"
                        ],
                        [
                            "range(len(self.normalized_fisher_at_minima_vars) - 2)",
                            "Call"
                        ],
                        [
                            "self.projected_gradients_list",
                            "Attribute"
                        ]
                    ]
                }
            },
            "argmax_299": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_300": {
                "x": {
                    "value": "self.correct_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_359": {
                "a": {
                    "value": "attr_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_attribute_embedding(self.class_attr)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_371": {
                "input": {
                    "value": "tf.equal(self.output_mask[None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(zst_logits)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_373": {
                "labels": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pruned_zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(tf.tile(tf.equal(self.output_mask[None, :], 1.0), [tf.shape(zst_logits)[0], 1]), zst_logits, NEG_INF * tf.ones_like(zst_logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_374": {
                "t": {
                    "value": "pruned_zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.where(tf.tile(tf.equal(self.output_mask[None, :], 1.0), [tf.shape(zst_logits)[0], 1]), zst_logits, NEG_INF * tf.ones_like(zst_logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_419": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_420": {
                "x": {
                    "value": "self.correct_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_443": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_474": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_719": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_fc_layer(h, w, b, apply_relu=False)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "preactivation",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(preactivation)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h)",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[0], name='conv_1_t0')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[0], self.train_phase[0], name='bn_1_t0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_1_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv2_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[0], self.train_phase[0], name='conv3_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv3_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[0], self.train_phase[0], name='conv4_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv4_2_t0')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[0], self.train_phase[0], name='conv5_1_t0', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[0], self.train_phase[0], name='conv5_2_t0')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "_conv(x, kernels[0], filters[0], strides[0], self.trainable_vars[task], name='conv_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars[task], self.train_phase[task], name='bn_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "h + create_conv_layer(self.h_pnn[tt][4], U_w, U_b, stride=strides[4], apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], name='conv2_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv2_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars[task], self.train_phase[task], name='conv3_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv3_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars[task], self.train_phase[task], name='conv4_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv4_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars[task], self.train_phase[task], name='conv5_1_t%d' % task, is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars[task], self.train_phase[task], apply_relu=False, name='conv5_2_t%d' % task)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, 1)",
                            "Call"
                        ],
                        [
                            "create_fc_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=0.75)",
                            "Call"
                        ],
                        [
                            "create_conv_layer(h, w, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 64, 1, self.trainable_vars, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 128, 1, self.trainable_vars, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 256, 1, self.trainable_vars, name='conv3_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "vgg_conv_layer(h, 3, 512, 1, self.trainable_vars, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(h, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [-1, shape[1] * shape[2] * shape[3]])",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc6')",
                            "Call"
                        ],
                        [
                            "vgg_fc_layer(h, 4096, self.trainable_vars, apply_relu=True, name='fc7')",
                            "Call"
                        ],
                        [
                            "_conv(h, kernels[0], filters[0], strides[0], self.trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(h, self.trainable_vars, self.train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[2], strides[2], self.trainable_vars, self.train_phase, name='conv3_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[3], strides[3], self.trainable_vars, self.train_phase, name='conv4_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "_residual_block_first(h, filters[4], strides[4], self.trainable_vars, self.train_phase, name='conv5_1', is_ATT_DATASET=self.is_ATT_DATASET)",
                            "Call"
                        ],
                        [
                            "_residual_block(h, self.trainable_vars, self.train_phase, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_856": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(tf.square(w - w_star) * f) for (w, w_star, f) in zip(self.trainable_vars, self.star_vars, self.big_omega_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "squeeze_884": {
                "variable": {
                    "value": "self.reg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.unweighted_entropy + self.synap_stgth * reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_930": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_931": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_932": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "self.trainable_vars[v].name.rsplit(':')[0] + '_star'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_936": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_937": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_938": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_941": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_943": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_944": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_945": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_946": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_948": {
                "initial_value": {
                    "value": "tf.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_949": {
                "initial_value": {
                    "value": "tf.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_950": {
                "initial_value": {
                    "value": "tf.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_951": {
                "initial_value": {
                    "value": "tf.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_952": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_972": {
                "ref": {
                    "value": "self.weights_old[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.trainable_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_973": {
                "ref": {
                    "value": "self.weights_delta_old_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.trainable_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_990": {
                "ref": {
                    "value": "self.trainable_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.star_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_992": {
                "ref": {
                    "value": "self.star_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.trainable_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_1006": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_1024": {
                "control_inputs": {
                    "value": "[self.train]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_1029": {
                "ref": {
                    "value": "self.small_omega_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.small_omega_vars[v] * 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_1052": {
                "ref": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "s * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_add_1054": {
                "ref": {
                    "value": "scr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.div(tf.add(scr, riemm_omega), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1058": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.expand_dims(tf.squeeze(tf.reduce_max(scr, keepdims=True)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1060": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.expand_dims(tf.squeeze(tf.reduce_min(scr, keepdims=True)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1062": {
                "value": {
                    "value": "self.max_score_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1063": {
                "value": {
                    "value": "self.min_score_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_1064": {
                "control_inputs": {
                    "value": "[self.max_score, self.min_score]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_1088": {
                "x": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_1100": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_1103": {
                "input": {
                    "value": "tf.squeeze(tf.reduce_max(scr, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1105": {
                "input": {
                    "value": "tf.squeeze(tf.reduce_min(scr, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_1110": {
                "ref": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(var - self.min_fisher) / (self.max_fisher - self.min_fisher + EPSILON)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_1119": {
                "ref": {
                    "value": "self.normalized_fisher_at_minima_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.dropout(self.normalized_fisher_at_minima_vars[v], self.keep_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_1143": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_1147": {
                "input": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_1156": {
                "inputs": {
                    "value": "[self.unweighted_entropy[i] for i in range(self.num_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_1161": {
                "tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1164": {
                "tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_1166": {
                "x": {
                    "value": "flat_task_grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(grad, [-1]) for grad in task_grads], 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "flat_ref_grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(grad, [-1]) for grad in self.ref_grads], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1167": {
                "x": {
                    "value": "flat_ref_grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(grad, [-1]) for grad in self.ref_grads], 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "flat_ref_grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(grad, [-1]) for grad in self.ref_grads], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_1173": {
                "x": {
                    "value": "dotp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(flat_task_grads, flat_ref_grads))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_1174": {
                "x": {
                    "value": "dotp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(flat_task_grads, flat_ref_grads))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_1187": {
                "control_inputs": {
                    "value": "[self.store_proj_grads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_35": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.total_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_94": {
                "input": {
                    "value": "x_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "equal_234": {
                "x": {
                    "value": "self.output_mask[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_234": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "self.vgg_16_conv_feedforward(x)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task, is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "logits + create_fc_layer(h_tt, U_w, U_b, apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "vgg_fc_layer(h, self.total_classes, self.trainable_vars, apply_relu=False, name='fc8')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_297": {
                "input_tensor": {
                    "value": "tf.cast(self.correct_predictions[i], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_366": {
                "condition": {
                    "value": "tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(zst_logits)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(phi_x, tf.transpose(attr_embed)) + last_layer_biases",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "NEG_INF * tf.ones_like(zst_logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_368": {
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1]), dtype=tf.float32) * y_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_369": {
                "input_tensor": {
                    "value": "adjusted_entropy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1]), dtype=tf.float32) * y_, axis=1) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1]), dtype=tf.float32) * y_, axis=1) * cross_entropy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_371": {
                "x": {
                    "value": "self.output_mask[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_372": {
                "input": {
                    "value": "zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(phi_x, tf.transpose(attr_embed)) + last_layer_biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_416": {
                "x": {
                    "value": "tf.argmax(pruned_zst_logits[i], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_417": {
                "input_tensor": {
                    "value": "tf.cast(self.correct_predictions[i], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_859": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(tf.square(w - w_star) * f) for (w, w_star, f) in zip(self.trainable_vars, self.star_vars, self.hebbian_score_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_930": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_931": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_932": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_936": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_937": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_938": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_941": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_943": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_944": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_945": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_946": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_948": {
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_949": {
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_950": {
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_951": {
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_952": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_955": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_add_1025": {
                "ref": {
                    "value": "self.small_omega_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "-(self.vanilla_gradients_vars[v][0] * (self.trainable_vars[v] - self.weights_old[v]))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "assign_add_1033": {
                "ref": {
                    "value": "self.big_omega_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.relu(tf.div(self.small_omega_vars[v], PARAM_XI_STEP + tf.square(self.trainable_vars[v] - self.star_vars[v])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_1048": {
                "ref": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros_like(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_1054": {
                "x": {
                    "value": "tf.add(scr, riemm_omega)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1058": {
                "input": {
                    "value": "tf.squeeze(tf.reduce_max(scr, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1060": {
                "input": {
                    "value": "tf.squeeze(tf.reduce_min(scr, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_1065": {
                "ref": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(var - self.min_score) / (self.max_score - self.min_score + EPSILON)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_1071": {
                "ref": {
                    "value": "self.normalized_score_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.dropout(self.normalized_score_vars[v], self.keep_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1103": {
                "input": {
                    "value": "tf.reduce_max(scr, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1105": {
                "input": {
                    "value": "tf.reduce_min(scr, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1120": {
                "x": {
                    "value": "self.normalized_fisher_at_minima_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_1132": {
                "x": {
                    "value": "-100.0 * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_1171": {
                "control_inputs": {
                    "value": "[tf.assign_add(self.violation_count, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_1172": {
                "input": {
                    "value": "self.violation_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_1173": {
                "input": {
                    "value": "self.violation_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_1174": {
                "input": {
                    "value": "proj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "flat_task_grads - dotp / ref_mag * flat_ref_grads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_1183": {
                "ref": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.trainable_vars",
                            "Attribute"
                        ],
                        [
                            "self.trainable_vars",
                            "Attribute"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.trainable_vars))",
                            "Call"
                        ],
                        [
                            "range(len(self.normalized_score_vars) - 2)",
                            "Call"
                        ],
                        [
                            "range(len(self.normalized_fisher_at_minima_vars) - 2)",
                            "Call"
                        ],
                        [
                            "self.projected_gradients_list",
                            "Attribute"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(projected_gradients[offset:offset + v_params], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_294": {
                "x": {
                    "value": "tf.argmax(self.task_pruned_logits[i], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_[i], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_296": {
                "x": {
                    "value": "tf.argmax(self.task_pruned_logits[i], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_297": {
                "x": {
                    "value": "self.correct_predictions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_366": {
                "input": {
                    "value": "tf.equal(self.output_mask[i][None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(zst_logits)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_416": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_417": {
                "x": {
                    "value": "self.correct_predictions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_853": {
                "input_tensor": {
                    "value": "tf.square(w - w_star) * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_862": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(tf.square(w - w_star) * (f + scr)) for (w, w_star, f, scr) in zip(self.trainable_vars, self.star_vars, self.normalized_fisher_at_minima_vars, self.normalized_score_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_881": {
                "inputs": {
                    "value": "[self.unweighted_entropy[i] for i in range(self.num_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "control_dependencies_911": {
                "control_inputs": {
                    "value": "[self.weights_old_ops_grouped]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_955": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_957": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_958": {
                "initial_value": {
                    "value": "tf.zeros(self.trainable_vars[v].get_shape())",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_1034": {
                "features": {
                    "value": "tf.div(self.small_omega_vars[v], PARAM_XI_STEP + tf.square(self.trainable_vars[v] - self.star_vars[v]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_1037": {
                "ref": {
                    "value": "self.big_omega_riemann_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.relu(tf.div(self.small_omega_vars[v], PARAM_XI_STEP + self.running_fisher_vars[v] * tf.square(self.trainable_vars[v] - self.weights_delta_old_vars[v])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_1048": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_1054": {
                "x": {
                    "value": "scr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "riemm_omega",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_1058": {
                "input": {
                    "value": "tf.reduce_max(scr, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1060": {
                "input": {
                    "value": "tf.reduce_min(scr, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1072": {
                "x": {
                    "value": "self.normalized_score_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_1103": {
                "input_tensor": {
                    "value": "scr",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_1105": {
                "input_tensor": {
                    "value": "scr",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1183": {
                "tensor": {
                    "value": "projected_gradients[offset:offset + v_params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "h.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "v.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_169": {
                "condition": {
                    "value": "tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(self.task_logits[i])[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "NEG_INF * tf.ones_like(self.task_logits[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "input": {
                    "value": "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_[i], logits=self.task_pruned_logits[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_173": {
                "condition": {
                    "value": "tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(self.task_logits[i])[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "NEG_INF * tf.ones_like(self.task_logits[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "input": {
                    "value": "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_[i], logits=self.task_pruned_logits[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_234": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "self.vgg_16_conv_feedforward(x)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task, is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "logits + create_fc_layer(h_tt, U_w, U_b, apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "vgg_fc_layer(h, self.total_classes, self.trainable_vars, apply_relu=False, name='fc8')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_294": {
                "input": {
                    "value": "y_[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_296": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_366": {
                "x": {
                    "value": "self.output_mask[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_366": {
                "input": {
                    "value": "zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(phi_x, tf.transpose(attr_embed)) + last_layer_biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_368": {
                "x": {
                    "value": "tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_372": {
                "input": {
                    "value": "zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(phi_x, tf.transpose(attr_embed)) + last_layer_biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_856": {
                "input_tensor": {
                    "value": "tf.square(w - w_star) * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_957": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_958": {
                "shape": {
                    "value": "self.trainable_vars[v].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_1034": {
                "x": {
                    "value": "self.small_omega_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "PARAM_XI_STEP + tf.square(self.trainable_vars[v] - self.star_vars[v])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_1038": {
                "features": {
                    "value": "tf.div(self.small_omega_vars[v], PARAM_XI_STEP + self.running_fisher_vars[v] * tf.square(self.trainable_vars[v] - self.weights_delta_old_vars[v]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_1058": {
                "input_tensor": {
                    "value": "scr",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_1060": {
                "input_tensor": {
                    "value": "scr",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_add_1171": {
                "ref": {
                    "value": "self.violation_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_169": {
                "input": {
                    "value": "tf.equal(self.output_mask[i][None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(self.task_logits[i])[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_[i], logits=self.task_pruned_logits[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_173": {
                "input": {
                    "value": "tf.equal(self.output_mask[i][None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(self.task_logits[i])[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_[i], logits=self.task_pruned_logits[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_368": {
                "input": {
                    "value": "tf.equal(self.output_mask[i][None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(y_)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_853": {
                "x": {
                    "value": "w - w_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_859": {
                "input_tensor": {
                    "value": "tf.square(w - w_star) * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_1038": {
                "x": {
                    "value": "self.small_omega_vars[v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "PARAM_XI_STEP + self.running_fisher_vars[v] * tf.square(self.trainable_vars[v] - self.weights_delta_old_vars[v])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_169": {
                "x": {
                    "value": "self.output_mask[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_169": {
                "input": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_170": {
                "labels": {
                    "value": "y_[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.task_pruned_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_173": {
                "x": {
                    "value": "self.output_mask[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_173": {
                "input": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_174": {
                "labels": {
                    "value": "y_[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.task_pruned_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_225": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.task_pruned_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_366": {
                "input": {
                    "value": "zst_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(phi_x, tf.transpose(attr_embed)) + last_layer_biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_368": {
                "x": {
                    "value": "self.output_mask[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_856": {
                "x": {
                    "value": "w - w_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_862": {
                "input_tensor": {
                    "value": "tf.square(w - w_star) * (f + scr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_1034": {
                "x": {
                    "value": "self.trainable_vars[v] - self.star_vars[v]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_217": {
                "condition": {
                    "value": "tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(self.task_logits[i])[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "NEG_INF * tf.ones_like(self.task_logits[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "input": {
                    "value": "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_[i], logits=self.task_pruned_logits[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_859": {
                "x": {
                    "value": "w - w_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_169": {
                "input": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_217": {
                "input": {
                    "value": "tf.equal(self.output_mask[i][None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(self.task_logits[i])[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_[i], logits=self.task_pruned_logits[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_224": {
                "condition": {
                    "value": "tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(logits)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "self.vgg_16_conv_feedforward(x)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task, is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "logits + create_fc_layer(h_tt, U_w, U_b, apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "vgg_fc_layer(h, self.total_classes, self.trainable_vars, apply_relu=False, name='fc8')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "NEG_INF * tf.ones_like(logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "tf.cast(tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1]), dtype=tf.float32) * y_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_227": {
                "input_tensor": {
                    "value": "adjusted_entropy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1]), dtype=tf.float32) * y_, axis=1) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1]), dtype=tf.float32) * y_, axis=1) * cross_entropy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_368": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_862": {
                "x": {
                    "value": "w - w_star",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_1039": {
                "x": {
                    "value": "self.trainable_vars[v] - self.weights_delta_old_vars[v]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_217": {
                "x": {
                    "value": "self.output_mask[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_217": {
                "input": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_218": {
                "labels": {
                    "value": "y_[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.task_pruned_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_224": {
                "input": {
                    "value": "tf.equal(self.output_mask[i][None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(logits)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_224": {
                "x": {
                    "value": "self.output_mask[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_224": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "self.vgg_16_conv_feedforward(x)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task, is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "logits + create_fc_layer(h_tt, U_w, U_b, apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "vgg_fc_layer(h, self.total_classes, self.trainable_vars, apply_relu=False, name='fc8')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_226": {
                "x": {
                    "value": "tf.tile(tf.equal(self.output_mask[i][None, :], 1.0), [tf.shape(y_)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_217": {
                "input": {
                    "value": "self.task_logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_226": {
                "input": {
                    "value": "tf.equal(self.output_mask[i][None, :], 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(y_)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_224": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "self.vgg_16_conv_feedforward(x)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.resnet18_conv_feedforward(x, kernels, filters, strides)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.fc_feedforward(x, self.weights, self.biases)",
                            "Call"
                        ],
                        [
                            "self.conv_feedforward(x, self.weights, self.biases, apply_dropout=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[0], name='fc_1_t0')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task, is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars[task], name='fc_1_t%d' % task)",
                            "Call"
                        ],
                        [
                            "logits + create_fc_layer(h_tt, U_w, U_b, apply_relu=False)",
                            "BinOp"
                        ],
                        [
                            "vgg_fc_layer(h, self.total_classes, self.trainable_vars, apply_relu=False, name='fc8')",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1', is_cifar=True)",
                            "Call"
                        ],
                        [
                            "_fc(h, self.total_classes, self.trainable_vars, name='fc_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_226": {
                "x": {
                    "value": "self.output_mask[i][None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_226": {
                "input": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/continual_learning_algorithms/utils/data_utils.py": {
        "tensorflow": {
            "to_int32_40": {
                "variable": {
                    "value": "h_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(images)[1]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_41": {
                "variable": {
                    "value": "w_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(images)[2]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([h_new, w_new])",
                    "type": "Call",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_44": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.image.random_flip_left_right(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_56": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_57": {
                "variable": {
                    "value": "image_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "target_height": {
                    "value": "tf.maximum(crop_h, image_shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "target_width": {
                    "value": "tf.maximum(crop_w, image_shape[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_58": {
                "variable": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.random_crop(img, [crop_h, crop_w, 3])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "image_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.pad_to_bounding_box(images, 0, 0, tf.maximum(crop_h, image_shape[1]), tf.maximum(crop_w, image_shape[2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_40": {
                "x": {
                    "value": "tf.to_float(tf.shape(images)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.5, maxval=1.5, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_41": {
                "x": {
                    "value": "tf.to_float(tf.shape(images)[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.5, maxval=1.5, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_42": {
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_57": {
                "x": {
                    "value": "crop_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "image_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_40": {
                "x": {
                    "value": "tf.shape(images)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_41": {
                "x": {
                    "value": "tf.shape(images)[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_flip_left_right_44": {
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img.reshape((WIDTH, HEIGHT))",
                            "Call"
                        ],
                        [
                            "ndimage.rotate(img, angle, reshape=False, order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_58": {
                "value": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img.reshape((WIDTH, HEIGHT))",
                            "Call"
                        ],
                        [
                            "ndimage.rotate(img, angle, reshape=False, order=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[crop_h, crop_w, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_40": {
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images, new_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/continual_learning_algorithms/utils/resnet_utils.py": {
        "tensorflow": {
            "conv2d_29": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [kernel_size, kernel_size, in_channels, out_channels], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', [in_dim, out_dim], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_71": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_78": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "train_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_81": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', shape=[n_out], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', shape=[n_out], dtype=tf.float32, initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [kernel_size, kernel_size, in_channels, out_channels], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', [in_dim, out_dim], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "'bn_'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ],
                        [
                            "'unit'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_113": {
                "variable": {
                    "value": "shortcut",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_115": {
                "variable": {
                    "value": "shortcut",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, in_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, strides, trainable_vars, name='conv_1')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "_conv(x, 3, out_channels, 1, trainable_vars, name='conv_2')",
                            "Call"
                        ],
                        [
                            "_bn(x, trainable_vars, train_phase, name='bn_2')",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_22": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(n)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_42": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(n)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_75": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_45": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(n)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_76": {
                "input": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/continual_learning_algorithms/utils/utils.py": {
        "tensorflow": {
            "identity_16": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_29": {
                "name": {
                    "value": "fc_layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(input, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, w, [1, stride, stride, 1], padding='SAME') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_50": {
                "name": {
                    "value": "conv_layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(input, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, w, [1, stride, stride, 1], padding='SAME') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_30": {
                "a": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_52": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/continual_learning_algorithms/utils/vgg_utils.py": {
        "tensorflow": {
            "bias_add_30": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, w, [1, stride, stride, 1], padding=pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel_biases', [out_channels], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [out_dim], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_31": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, w, [1, stride, stride, 1], padding=pad), b)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel_weights', [kernel_size, kernel_size, in_channels, out_channels], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', [in_dim, out_dim], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'fc'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_52": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel_weights', [kernel_size, kernel_size, in_channels, out_channels], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', [in_dim, out_dim], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_22": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(n)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_23": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(n)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_44": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(n)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_45": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(n)",
                            "BinOp"
                        ],
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "agents/customization.py": {
        "torch": {
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "agents/default.py": {
        "torch": {
            "CrossEntropyLoss_32": {
                "variable": {
                    "value": "self.criterion_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_64": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.config['schedule']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleDict_87": {
                "variable": {
                    "value": "model.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "model.last[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.last.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg['model_weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_288": {
                "obj": {
                    "value": "model_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(cfg['model_weights'], map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "self.model.state_dict()",
                            "Call"
                        ],
                        [
                            "self.model.module.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_292": {
                "device": {
                    "value": "self.config['gpuid'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_297": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.config['gpuid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.config['gpuid'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "agents/exp_replay.py": {
        "torch": {
            "ConcatDataset_33": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dataset_list * max(len(train_loader.dataset) // self.memory_size, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "new_train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset(dataset_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "train_loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_148": {
                "variable": {
                    "value": "new_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "storage",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[x.unsqueeze(-1) for x in self.storage]",
                            "ListComp"
                        ],
                        [
                            "self.task_memory.values()",
                            "Call"
                        ],
                        [
                            "self.task_memory.values()",
                            "Call"
                        ],
                        [
                            "self.task_memory.values()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "mem_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mem",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(mem)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_207": {
                "variable": {
                    "value": "mem_grad_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self.task_grads.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_52": {
                "n": {
                    "value": "len(train_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_168": {
                "n": {
                    "value": "len(train_loader.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "agents/regularization.py": {
        "torch": {
            "Subset_120": {
                "variable": {
                    "value": "subdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataloader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "rand_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.sample(list(range(len(dataloader.dataset))), n_sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dataloader.dataset, rand_ind)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/cub.py": {
        "torch": {
            "Dataset_145": {
                "variable": {
                    "value": "(train_dataset, val_dataset)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "dataroot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/datasets'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_175": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/vision:v0.6.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "alexnet",
                    "type": "Constant",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_splits[task_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset_splits[task_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/datasetGen.py": {
        "torch": {
            "randperm_34": {
                "variable": {
                    "value": "randseq",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_dataset.number_classes",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/wrapper.py": {
        "torch": {
            "load_18": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "label_cache_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path.join(dataset.root, str(type(dataset)) + '_' + str(len(dataset)) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_22": {
                "obj": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "label_cache_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path.join(dataset.root, str(type(dataset)) + '_' + str(len(dataset)) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_23": {
                "input": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/hessian_eigenthings/hvp_operator.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "self.grad_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(sum((p.numel() for p in model.parameters())))",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_59": {
                "variable": {
                    "value": "grad_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grad_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.prepare_grad()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "grad_vec + torch.cat([g.contiguous().view(-1) for g in grad_dict])",
                            "BinOp"
                        ],
                        [
                            "torch.cat([g.contiguous().view(-1) for g in grad_dict])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "hessian_vec_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.contiguous().view(-1) for g in grad_grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "grad_108": {
                "variable": {
                    "value": "grad_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.criterion(output, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "grad_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.contiguous().view(-1) for g in grad_dict]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "[g.contiguous().view(-1) for g in grad_dict]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/hessian_eigenthings/lanczos.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/hessian_eigenthings/power_iter.py": {
        "torch": {
            "randn_like_118": {
                "variable": {
                    "value": "prev_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(vector_size)",
                            "Call"
                        ],
                        [
                            "init_vec",
                            "Name"
                        ],
                        [
                            "vec.cuda()",
                            "Call"
                        ],
                        [
                            "new_vec.detach() / torch.norm(new_vec)",
                            "BinOp"
                        ],
                        [
                            "eigenvec",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_110": {
                "variable": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vector_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "operator.size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_124": {
                "input": {
                    "value": "new_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "operator.apply(vec) - momentum * prev_vec",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_128": {
                "input": {
                    "value": "new_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "operator.apply(vec) - momentum * prev_vec",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_120": {
                "input": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(vector_size)",
                            "Call"
                        ],
                        [
                            "init_vec",
                            "Name"
                        ],
                        [
                            "vec.cuda()",
                            "Call"
                        ],
                        [
                            "new_vec.detach() / torch.norm(new_vec)",
                            "BinOp"
                        ],
                        [
                            "eigenvec",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "external/stable-continual-learning/external_libs/hessian_eigenthings/spectral_density.py": {
        "torch": {}
    },
    "external/stable-continual-learning/stable_sgd/alexnet.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "self.alexnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/vision:v0.6.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "alexnet",
                    "type": "Constant",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=4096, out_features=hidden_dim, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.alexnet.features(x)",
                            "Call"
                        ],
                        [
                            "self.alexnet.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.alexnet.classifier[:4](x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.logits(x, task_id)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_118": {
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/stable_sgd/cub.py": {
        "torch": {}
    },
    "external/stable-continual-learning/stable_sgd/data_utils.py": {
        "torch": {
            "DataLoader_64": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(DATA_ROOT, train=True, download=True, transform=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST(DATA_ROOT, train=False, download=True, transform=transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST(DATA_ROOT, train=True, download=True, transform=transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST(DATA_ROOT, train=False, download=True, transform=transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "targets_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cifar_train.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "targets_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cifar_test.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.dataset.Subset(cifar_train, np.where(target_train_idx == 1)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.dataset.Subset(cifar_test, np.where(target_test_idx == 1)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.dataset.Subset(cub_train, np.where(target_train_idx == 1)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.dataset.Subset(cub_test, np.where(target_test_idx == 1)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "cub_train.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cub_train.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "cub_test.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cub_test.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_29": {
                "variable": {
                    "value": "randseq",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "idx_permute",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_ind",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(784))",
                            "Call"
                        ],
                        [
                            "np.array(rand_ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_160": {
                "dataset": {
                    "value": "cifar_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(DATA_ROOT, train=True, download=True, transform=cifar_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "np.where(target_train_idx == 1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_163": {
                "dataset": {
                    "value": "cifar_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(DATA_ROOT, train=False, download=True, transform=cifar_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "np.where(target_test_idx == 1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_206": {
                "dataset": {
                    "value": "cub_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Cub2011(root=DATA_ROOT, train=True, download=True, transform=cub_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "np.where(target_train_idx == 1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_209": {
                "dataset": {
                    "value": "cub_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Cub2011(DATA_ROOT, train=False, transform=cub_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "np.where(target_test_idx == 1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/stable_sgd/main.py": {
        "torch": {
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(args.lr * args.gamma ** current_task_id, 5e-05)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/stable_sgd/models.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.IC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(planes)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.IC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(planes)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_1(out)",
                            "Call"
                        ],
                        [
                            "self.W2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_2(out)",
                            "Call"
                        ],
                        [
                            "self.W3(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "self.IC1(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "self.IC2(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.logits(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_1(out)",
                            "Call"
                        ],
                        [
                            "self.W2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_2(out)",
                            "Call"
                        ],
                        [
                            "self.W3(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "self.IC1(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "self.IC2(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.logits(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nf * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x.view(bsz, 3, 32, 32)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_99": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_1(out)",
                            "Call"
                        ],
                        [
                            "self.W2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.dropout_2(out)",
                            "Call"
                        ],
                        [
                            "self.W3(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "self.IC1(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "self.IC2(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x.view(bsz, 3, 32, 32))))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.logits(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, 20, 5, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "p": {
                    "value": "config['dropout']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "p": {
                    "value": "config['dropout']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ],
                        [
                            "{}",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "num_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "self.n_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "external/stable-continual-learning/stable_sgd/utils.py": {
        "torch": {
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{directory}/model-{trial}-{time}.pth'.format(directory=EXPERIMENT_DIRECTORY, trial=TRIAL_ID, time=time)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "ConcatDataset_104": {
                "variable": {
                    "value": "train_dataset_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "train_dataset_splits.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_105": {
                "variable": {
                    "value": "val_dataset_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "val_dataset_splits.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset(train_dataset_splits.values())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset(val_dataset_splits.values())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_265": {
                "seed": {
                    "value": "config.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_282": {
                "seed": {
                    "value": "config.run_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "dataset": {
                    "value": "val_dataset_splits[str(task_id)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_splits[task_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset_splits[task_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/alexnet.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "self.alexnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/vision:v0.6.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "alexnet",
                    "type": "Constant",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=4096, out_features=hidden_dim, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.alexnet.features(x)",
                            "Call"
                        ],
                        [
                            "self.alexnet.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.alexnet.classifier[:4](x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.logits(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar10net.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, 32, kernel_size=3, stride=1, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.n_feat, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "self.n_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/lenet.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, 20, 5, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "self.n_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/mlp.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.in_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.in_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_11": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "last_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "512 * block.expansion",
                            "BinOp"
                        ],
                        [
                            "filters[2] * block.expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "512 * block.expansion",
                            "BinOp"
                        ],
                        [
                            "filters[2] * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_last(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_113": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.last(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_last(x))",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self.logits(x.view(x.size(0), -1))",
                            "Call"
                        ],
                        [
                            "self.last(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "last_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "512 * block.expansion",
                            "BinOp"
                        ],
                        [
                            "filters[2] * block.expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "512 * block.expansion",
                            "BinOp"
                        ],
                        [
                            "filters[2] * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_last(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_175": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(out)",
                            "Call"
                        ],
                        [
                            "self.stage2(out)",
                            "Call"
                        ],
                        [
                            "self.stage3(out)",
                            "Call"
                        ],
                        [
                            "self.stage4(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(out)",
                            "Call"
                        ],
                        [
                            "self.stage2(out)",
                            "Call"
                        ],
                        [
                            "self.stage3(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_last(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "self.logits(out.view(out.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "droprate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_34": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/senet.py": {
        "torch": {
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_33": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.expansion * planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_31": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_69": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "modules/criterions.py": {
        "torch": {}
    },
    "ogd/tools.py": {
        "torch": {
            "mv_42": {
                "input": {
                    "value": "V.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vectors[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "dots",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_basis",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dots.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_33": {
                "input": {
                    "value": "vectors[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_44": {
                "input": {
                    "value": "vector - PV_vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/downloads.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/vision:v0.6.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "alexnet",
                    "type": "Constant",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metric.py": {
        "torch": {
            "no_grad_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}