{
    "models/JointIE.py": {
        "torch": {
            "LSTM_26": {
                "variable": {
                    "value": "self.contextual_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "context_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.span_proj_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ner_label_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ner_label.get_num()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ep_span_emb, att_span_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "span_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.span_proj_label(self.span_layer(span_emb))",
                            "Call"
                        ],
                        [
                            "self.span_proj_label(self.span_layer(span_emb))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "span_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ep_span_emb, att_span_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "span_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.span_proj_label(self.span_layer(span_emb))",
                            "Call"
                        ],
                        [
                            "self.span_proj_label(self.span_layer(span_emb))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "relu_566": {
                "variable": {
                    "value": "span_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_span_indices.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "concat_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sequence_tensor, global_attention_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_236": {
                "variable": {
                    "value": "self._linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self._activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU()] * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dropout_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[nn.Dropout(p=value) if value > 0 else lambda x: x for value in dropouts]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_454": {
                "tensors": {
                    "value": "to_concatenate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[_get_combination(piece, tensors) for piece in combination.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_594": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self._start_sentinel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1, 1, int(input_dim)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self._span_width_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_width_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "span_width_embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "combined_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combined_tensors, span_width_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_420": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_600": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_607": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vector.masked_fill(~mask, min_value_of_dtype(vector.dtype))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_418": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_60": {
                "*size": {
                    "value": "[1, 1, int(input_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "in_features": {
                    "value": "layer_input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_240": {
                "p": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._reshape_tensor(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "serving.py": {
        "torch": {
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tallor/categorical_accuracy.py": {
        "torch": {
            "arange_78": {
                "start": {
                    "value": "gold_labels.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "gold_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tallor/data_loader.py": {
        "torch": {
            "DataLoader_364": {
                "variable": {
                    "value": "label_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataSet(root, filename, encoder, batch_size, ner_label, is_train=is_train, opt=opt, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_380": {
                "variable": {
                    "value": "label_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataSet(root, filename, encoder, batch_size, ner_label, is_train=is_train, opt=opt, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tallor/framework.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_283": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path + '_initial'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__124": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tallor/framework_serving.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path + '_initial'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__118": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_74": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tallor/precision_recall_f1.py": {
        "torch": {}
    },
    "tallor/rule_kits/instance_selector.py": {
        "torch": {
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tallor/sentence_encoder.py": {
        "torch": {
            "stack_88": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden[:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_89": {
                "variable": {
                    "value": "span_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.squeeze()[span_idx1:span_idx2 + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_104": {
                "variable": {
                    "value": "rule_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(instance_embeddings, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_14": {
                "variable": {
                    "value": "self._lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "lexical_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_104": {
                "tensors": {
                    "value": "instance_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tallor/utils.py": {
        "torch": {
            "log_softmax_123": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_196": {
                "variable": {
                    "value": "y_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits_flat.new_full((num_points,), y, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_140": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ],
                        [
                            "targets.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_demo.py": {
        "torch": {
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}