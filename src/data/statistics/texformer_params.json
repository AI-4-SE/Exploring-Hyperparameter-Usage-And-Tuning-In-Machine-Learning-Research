{
    "NMR/neural_render_test.py": {
        "torch": {
            "from_numpy_39": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(config.VERTEX_TEXTURE_FILE)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "self.cube_parts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(config.cube_parts_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_70": {
                "variable": {
                    "value": "sampled_uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uv_map_t",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "verts_uv_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.verts_uv_t.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_93": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_120": {
                "variable": {
                    "value": "parts_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100 * parts.permute(0, 2, 3, 1).contiguous().view(-1, 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_128": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_56": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.st",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_57": {
                "variable": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, 1, self.st).to(tex_tensor.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, 1, self.st).to(tex_tensor.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_101": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3, device=self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "SciR.from_euler('zyx', euler, degrees=True).as_dcm()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R).type(torch.float32).to(self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.eye(3, device=self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "SciR.from_euler('zyx', euler, degrees=True).as_dcm()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R).type(torch.float32).to(self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_136": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3, device=self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "SciR.from_euler('zyx', euler, degrees=True).as_dcm()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R).type(torch.float32).to(self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.eye(3, device=self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ],
                        [
                            "SciR.from_euler('zyx', euler, degrees=True).as_dcm()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R).type(torch.float32).to(self.device)[None, :, :].expand(batch_size, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "RSC_net/hmr.py": {
        "torch": {
            "ones_248": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.hmr_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterDict_72": {
                "variable": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{'0': nn.Parameter(torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)), '1': nn.Parameter(torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)), '2': nn.Parameter(torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)), '3': nn.Parameter(torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)), '4': nn.Parameter(torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_114": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.layer4_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_124": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion + npose + 13",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.decpose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "npose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24 * 6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.decshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.deccam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['pose'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "init_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['shape'][:].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "init_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_params['cam']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "init_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_planes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xf, pred_pose, pred_shape, pred_cam]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "data": {
                    "value": "torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "data": {
                    "value": "torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "data": {
                    "value": "torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "data": {
                    "value": "torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "data": {
                    "value": "torch.from_numpy(np.ones(blocks, dtype=np.float32)).float().view(-1, 1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "ndarray": {
                    "value": "np.ones(blocks, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "np.ones(blocks, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "np.ones(blocks, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "np.ones(blocks, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "np.ones(blocks, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "RSC_net/ra_test.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.RSC_checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_45": {
                "variable": {
                    "value": "pred_cam_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_camera[:, 1], pred_camera[:, 2], 2 * constants.FOCAL_LENGTH / (constants.IMG_RES * pred_camera[:, 0] + 1e-09)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "self.IMG_NORM_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RSC_net/smpl.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "self.joint_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[constants.JOINT_MAP[i] for i in constants.JOINT_NAMES]",
                            "ListComp"
                        ],
                        [
                            "torch.cat([smpl_output.joints, extra_joints], dim=1)",
                            "Call"
                        ],
                        [
                            "joints[:, self.joint_map, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[smpl_output.joints, extra_joints]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "J_regressor_extra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(config.JOINT_REGRESSOR_TRAIN_EXTRA)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RSC_net/utils/geometry.py": {
        "torch": {
            "norm_16": {
                "variable": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(theta + 1e-08, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_18": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_20": {
                "variable": {
                    "value": "v_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_21": {
                "variable": {
                    "value": "v_sin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_22": {
                "variable": {
                    "value": "quat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cos, v_sin * normalized]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_60": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_82": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bkj->bki",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_89": {
                "variable": {
                    "value": "projected_points",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bkj->bki",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, 3, 3], device=points.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "(b1, b2, b3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "ndarray": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.solve(A, b)",
                            "Call"
                        ],
                        [
                            "np.zeros((S.shape[0], 3), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_59": {
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_59": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_pytorch/background_pose.py": {
        "torch": {}
    },
    "dataset_pytorch/body_part_mask.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masker.get_mask('face')",
                            "Call"
                        ],
                        [
                            "cv2.imread(mask_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(mask, self.size)",
                            "Call"
                        ],
                        [
                            "mask / 255.0",
                            "BinOp"
                        ],
                        [
                            "mask.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).float()",
                            "Call"
                        ],
                        [
                            "cv2.imread(mask_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(mask, self.size)",
                            "Call"
                        ],
                        [
                            "mask / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dataset_pytorch/combine_datasets.py": {
        "torch": {}
    },
    "dataset_pytorch/data_utils.py": {
        "torch": {
            "from_numpy_268": {
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 0.5",
                            "BinOp"
                        ],
                        [
                            "image * 2.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * (image / 255.0 - 0.5)",
                            "BinOp"
                        ],
                        [
                            "image[top:top + new_h, left:left + new_w]",
                            "Subscript"
                        ],
                        [
                            "reshape_img(image, new_shape=(self.output_size, self.output_size))",
                            "Call"
                        ],
                        [
                            "cv2.flip(image, 1)",
                            "Call"
                        ],
                        [
                            "cv2.flip(image, 1)",
                            "Call"
                        ],
                        [
                            "normalize_image(image)",
                            "Call"
                        ],
                        [
                            "image.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset_pytorch/real_texture.py": {
        "torch": {}
    },
    "dataset_pytorch/smpl_market.py": {
        "torch": {
            "from_numpy_46": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img / 255.0 * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).float().permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "imageio.imread(osp.join(self.data_dir, img_path))",
                            "Call"
                        ],
                        [
                            "self.preprocess_img(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_46": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "seg_float",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg / 7.0 * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(seg_float).float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.preprocess_seg(seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "seg_float",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "smpl_seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "smpl_seg_long",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(smpl_seg.shape, dtype=int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(smpl_seg_long).long().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "smpl_seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "smpl_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "cam_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "smpl_list[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageio.imread(seg_path)",
                            "Call"
                        ],
                        [
                            "imageio.imread(seg_path + '.png')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((coord_y[None], coord_x[None]), axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_coord(img.shape[-2:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset_pytorch/smpl_market_eval.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img / 255.0 * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).float().permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "imageio.imread(osp.join(self.data_dir, img_path))",
                            "Call"
                        ],
                        [
                            "self.preprocess_img(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_40": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "seg_float",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg / 7.0 * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(seg_float).float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.preprocess_seg(seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "seg_float",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "smpl_seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "smpl_seg_long",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(smpl_seg.shape, dtype=int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(smpl_seg_long).long().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "smpl_seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "smpl_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "cam_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "smpl_list[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageio.imread(seg_path)",
                            "Call"
                        ],
                        [
                            "imageio.imread(seg_path + '.png')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "seg_long",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((coord_y[None], coord_x[None]), axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_coord(img.shape[-2:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "self.smpl_part_seg_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 3, 3, 1, 5, 5, 2, 4, 4, 6, 6, 7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "imresize(img, [h_target, w_target])",
                            "Call"
                        ],
                        [
                            "np.pad(img, [(0, 0), (before, after), (0, 0)])",
                            "Call"
                        ],
                        [
                            "img[:, before:-after]",
                            "Subscript"
                        ],
                        [
                            "imageio.imread(img_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_37": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_92": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).float().permute(2, 0, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img_tensor * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(img_tensor, [128, 128])",
                            "Call"
                        ],
                        [
                            "img_tensor[:, :, :, 32:32 + 64].to(self.device)",
                            "Call"
                        ],
                        [
                            "self.preprocess_img(img_224)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, seg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_111": {
                "variable": {
                    "value": "uvmap_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "imresize(img, [h_target, w_target])",
                            "Call"
                        ],
                        [
                            "np.pad(img, [(0, 0), (before, after), (0, 0)])",
                            "Call"
                        ],
                        [
                            "img[:, before:-after]",
                            "Subscript"
                        ],
                        [
                            "imageio.imread(img_path)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "tex_flow.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.renderer_seg.render_part(self.pred_vertices, self.pred_cam_t, crop_width=None)",
                            "Call"
                        ],
                        [
                            "parts.cpu().long()",
                            "Call"
                        ],
                        [
                            "self.smpl_part_seg_mapping[parts]",
                            "Subscript"
                        ],
                        [
                            "parts.unsqueeze(1).float() / 7.0",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(parts, [int(h_target), int(w_target)], mode='nearest')",
                            "Call"
                        ],
                        [
                            "parts[:, :, :, start:start + 64]",
                            "Subscript"
                        ],
                        [
                            "parts * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "parts.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(parts, [before, after])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seg)[None].long()",
                            "Call"
                        ],
                        [
                            "self.get_segmentation()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[int(h_target), int(w_target)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((coord_y[None], coord_x[None]), axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_coord([128, 64]).unsqueeze(0).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_22": {
                "f": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "np.load(config.uv_encoding_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_26": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.renderer_seg.render_part(self.pred_vertices, self.pred_cam_t, crop_width=None)",
                            "Call"
                        ],
                        [
                            "parts.cpu().long()",
                            "Call"
                        ],
                        [
                            "self.smpl_part_seg_mapping[parts]",
                            "Subscript"
                        ],
                        [
                            "parts.unsqueeze(1).float() / 7.0",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(parts, [int(h_target), int(w_target)], mode='nearest')",
                            "Call"
                        ],
                        [
                            "parts[:, :, :, start:start + 64]",
                            "Subscript"
                        ],
                        [
                            "parts * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "parts.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(parts, [before, after])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seg)[None].long()",
                            "Call"
                        ],
                        [
                            "self.get_segmentation()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[before, after]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imageio.imread(seg_path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, seg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_64": {
                "variable": {
                    "value": "uvmap_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['img'].to(self.device)[None]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "out[0].permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.load(config.uv_encoding_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_29": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_139": {
                "x1": {
                    "value": "result_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_feat_dict[module_name]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "gt_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_feat_dict[module_name]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((rendered_img[0].cpu().permute(1, 2, 0).numpy() + 1) * 0.5 * 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "result / 255.0 * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(result).permute(2, 0, 1)[None].float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_106": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask[0].cpu().numpy() * 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask)[None, None].float().to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "ndarray": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((sample['img'].permute(1, 2, 0).numpy() + 1) * 0.5 * 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "gt / 255.0 * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(gt).permute(2, 0, 1)[None].float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_108": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss/PCB_PerLoss.py": {
        "torch": {
            "load_18": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_37": {
                "variable": {
                    "value": "self.MSELoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_39": {
                "variable": {
                    "value": "self.normalize_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_42": {
                "variable": {
                    "value": "self.normalize_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "feature_tri",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2, o3, o4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_99": {
                "variable": {
                    "value": "data_rgb_unnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_rgb_unnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_unnorm[:, permute]",
                            "Subscript"
                        ],
                        [
                            "F.upsample(data_rgb_unnorm, size=self.size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "data_unnorm",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "loss/part_style_loss.py": {
        "torch": {
            "MSELoss_10": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_27": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_32": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H1, W1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_42": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask2.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H2, W2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "loss/pytorch_ssim.py": {
        "torch": {
            "Tensor_11": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "loss/resnet_market1501.py": {
        "torch": {
            "avg_pool2d_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(kx, x.size(3)), stride=(sx, x.size(3)))",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.local_conv(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn2d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x.chunk(6, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "x / x.norm(2, 1).unsqueeze(1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.local_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.feat_bn2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.instance0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.instance1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.instance2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.instance3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.instance4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.instance5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_130": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(kx, x.size(3)), stride=(sx, x.size(3)))",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.local_conv(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn2d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x.chunk(6, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "x / x.norm(2, 1).unsqueeze(1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(16, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(kx, x.size(3)), stride=(sx, x.size(3)))",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.local_conv(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn2d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x.chunk(6, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "x / x.norm(2, 1).unsqueeze(1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kx, x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(sx, x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(kx, x.size(3)), stride=(sx, x.size(3)))",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.local_conv(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn2d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x.chunk(6, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "x / x.norm(2, 1).unsqueeze(1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([radius])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.thresh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([thresh])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(kx, x.size(3)), stride=(sx, x.size(3)))",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.local_conv(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn2d(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x.chunk(6, 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "x / x.norm(2, 1).unsqueeze(1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_103": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_112": {
                "mean": {
                    "value": "self.classifier.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_201": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "options.py": {
        "torch": {
            "manual_seed_76": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "reid_resnet/main.py": {
        "torch": {
            "Tensor_21": {
                "variable": {
                    "value": "self.normalize_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "self.normalize_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_50": {
                "variable": {
                    "value": "data_rgb_unnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_rgb_unnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_unnorm",
                            "variable"
                        ],
                        [
                            "F.upsample(data_rgb_unnorm, size=self.size, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.preprocess(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_36": {
                "variable": {
                    "value": "feature_dict[module_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.preprocess(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid_resnet/resnet.py": {
        "torch": {
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_216": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_239": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm1d_313": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_dims",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_314": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_316": {
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "reid_resnet/torchtools.py": {
        "torch": {
            "save_54": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, 'model.pth.tar-' + str(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_83": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, 'model.pth.tar-' + str(epoch))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, 'model.pth.tar-' + str(epoch))",
                            "Call"
                        ]
                    ]
                },
                "pickle_module": {
                    "value": "pickle",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "self.combined_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.combined_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "self.combined_dataloader_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.combined_dataset_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "variable": {
                    "value": "self.face_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, seg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "cat_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_179": {
                "variable": {
                    "value": "uvmap_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "out[0].permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "np.load(config.uv_encoding_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_44": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_174": {
                "variable": {
                    "value": "uvmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "out.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/ep{:03d}_step{:06d}.pt'.format(self.opts.checkpoint_dir, epoch_idx + 1, self.step_count)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/net_utils.py": {
        "torch": {
            "matmul_103": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q / N ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.flatten(-2)",
                            "Call"
                        ],
                        [
                            "k.flatten(-2)",
                            "Call"
                        ],
                        [
                            "k.reshape(B, N, C, kQ_h, P_h, kQ_w, P_w)",
                            "Call"
                        ],
                        [
                            "k.permute(0, 1, 4, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "k.reshape(B, N, C, Q_h, kP_h, Q_w, kP_w)",
                            "Call"
                        ],
                        [
                            "k.permute(0, 1, 3, 5, 2, 4, 6)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q / N ** 0.5, k)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q / N ** 0.5, k)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.flatten(-2).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "v.flatten(-2).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "v.reshape(B, N, -1, kQ_h, P_h, kQ_w, P_w)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 1, 4, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "v.reshape(B, N, -1, Q_h, kP_h, Q_w, kP_w)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 1, 3, 5, 2, 4, 6)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.flatten(-2).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "q.flatten(-2).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "q.reshape(B, N, C, qQ_h, P_h, qQ_w, P_w)",
                            "Call"
                        ],
                        [
                            "q.permute(0, 1, 4, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "q.reshape(B, N, C, Q_h, qP_h, Q_w, qP_w)",
                            "Call"
                        ],
                        [
                            "q.permute(0, 1, 3, 5, 2, 4, 6)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(k, v) / N",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unfold_179": {
                "variable": {
                    "value": "unfolded_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, c, h, w)",
                            "Call"
                        ],
                        [
                            "x.view(-1, c, h, w)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pixel_shuffle_187": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, c, h, w)",
                            "Call"
                        ],
                        [
                            "x.view(-1, c, h, w)",
                            "Call"
                        ]
                    ]
                },
                "upscale_factor": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.UpsamplingNearest2d(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_74": {
                "variable": {
                    "value": "not_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_82": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_88": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_89": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.flatten(-2)",
                            "Call"
                        ],
                        [
                            "k.flatten(-2)",
                            "Call"
                        ],
                        [
                            "k.reshape(B, N, C, kQ_h, P_h, kQ_w, P_w)",
                            "Call"
                        ],
                        [
                            "k.permute(0, 1, 4, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "k.reshape(B, N, C, Q_h, kP_h, Q_w, kP_w)",
                            "Call"
                        ],
                        [
                            "k.permute(0, 1, 3, 5, 2, 4, 6)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.flatten(-2).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "v.flatten(-2).transpose(-2, -1)",
                            "Call"
                        ],
                        [
                            "v.reshape(B, N, -1, kQ_h, P_h, kQ_w, P_w)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 1, 4, 6, 2, 3, 5)",
                            "Call"
                        ],
                        [
                            "v.reshape(B, N, -1, Q_h, kP_h, Q_w, kP_w)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 1, 3, 5, 2, 4, 6)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_48": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/texformer.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.trans_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[None, None, None, TransformerDecoderUnit(self.feat_dim, opts.nhead, True, 'softmax'), TransformerDecoderUnit(self.feat_dim, opts.nhead, True, 'dotproduct'), TransformerDecoderUnit(self.feat_dim, opts.nhead, True, 'dotproduct')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tanh_108": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "single_conv(self.feat_dim, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "single_conv(self.feat_dim, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_106": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opts.out_ch",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 + 3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformers/transformer_basics.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_152": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_202": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}