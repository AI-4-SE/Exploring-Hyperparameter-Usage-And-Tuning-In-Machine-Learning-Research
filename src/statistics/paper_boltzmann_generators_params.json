{
    "software/deep_boltzmann/networks/plot.py": {
        "sklearn": {
            "LinearRegression_77": {
                "variable": {
                    "value": "lr",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/particles_analyze.py": {
        "tensorflow": {
            "sigmoid_21": {
                "x": {
                    "value": "dscaled",
                    "possible_values": [
                        [
                            "3.0 * (d - 1.5)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/particles_hyperparameters.py": {
        "tensorflow": {
            "sigmoid_34": {
                "x": {
                    "value": "dscaled",
                    "possible_values": [
                        [
                            "3.0 * (d - 1.5)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/particles_train.py": {
        "tensorflow": {
            "sigmoid_31": {
                "x": {
                    "value": "dscaled",
                    "possible_values": [
                        [
                            "3.0 * (d - 1.5)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "software/deep_boltzmann/models/MM.py": {
        "tensorflow": {
            "reduce_sum_21": {
                "variable": {
                    "value": "d2",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d * d",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "cosine_angle",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ba * bc",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * w",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cross_88": {
                "variable": {
                    "value": "b1xv",
                    "possible_values": []
                },
                "a": {
                    "value": "b1",
                    "possible_values": [
                        [
                            "x3 - x2",
                            "BinOp"
                        ],
                        [
                            "b1 / tf.norm(b1, axis=2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "x3 - x2",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "possible_values": [
                        [
                            "b0 - np.sum(b0 * b1, axis=2, keepdims=True) * b1",
                            "BinOp"
                        ],
                        [
                            "b0 - tf.reduce_sum(b0 * b1, axis=2, keepdims=True) * b1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_89": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "b1xv * w",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "E",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batchsize,)",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "x": {
                    "value": "d2",
                    "possible_values": [
                        [
                            "np.sum(d * d, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d * d, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_35": {
                "tensor": {
                    "value": "ba",
                    "possible_values": [
                        [
                            "x1 - x2",
                            "BinOp"
                        ],
                        [
                            "ba / tf.norm(ba, axis=2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "x1 - x2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "norm_37": {
                "tensor": {
                    "value": "bc",
                    "possible_values": [
                        [
                            "x3 - x2",
                            "BinOp"
                        ],
                        [
                            "bc / tf.norm(bc, axis=2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "x3 - x2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "norm_75": {
                "tensor": {
                    "value": "b1",
                    "possible_values": [
                        [
                            "x3 - x2",
                            "BinOp"
                        ],
                        [
                            "b1 / tf.norm(b1, axis=2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "x3 - x2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "acos_39": {
                "x": {
                    "value": "cosine_angle",
                    "possible_values": [
                        [
                            "np.sum(ba * bc, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ba * bc, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_90": {
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "np.sum(b1xv * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(b1xv * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_121": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.bond_indices[:, 0]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_122": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.bond_indices[:, 1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_126": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.nonbonded_indices[:, 0]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_127": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.nonbonded_indices[:, 1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_131": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.nonbonded14_indices[:, 0]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_132": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.nonbonded14_indices[:, 1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_136": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.angle_indices[:, 0]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_137": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.angle_indices[:, 1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_138": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.angle_indices[:, 2]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_142": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.torsion_indices[:, 0]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_143": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.torsion_indices[:, 1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_144": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.torsion_indices[:, 2]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_145": {
                "params": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.atom_indices[self.toppar.torsion_indices[:, 3]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_180": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.sum(v * w, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(v * w, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "self.toppar.bond_k * (self.bondlengths_tf(x) - self.toppar.bond_d0) ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "input_tensor": {
                    "value": "self.toppar.angle_k * da ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_190": {
                "input_tensor": {
                    "value": "self.toppar.torsion_k * tf.cos(self.toppar.torsion_n * tor - phase)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "input_tensor": {
                    "value": "self.toppar.nonbonded_epsilon * (f6 ** 2 - 2 * f6)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_198": {
                "input_tensor": {
                    "value": "self.toppar.nonbonded14_epsilon / 1.2 * (f6 ** 2 - 2 * f6)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "b0 * b1",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "b2 * b1",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cos_190": {
                "x": {
                    "value": "self.toppar.torsion_n * tor - phase",
                    "possible_values": []
                }
            }
        }
    },
    "software/deep_boltzmann/models/particle_dimer.py": {
        "tensorflow": {
            "tile_144": {
                "variable": {
                    "value": "Xcomp",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "possible_values": []
                }
            },
            "tile_145": {
                "variable": {
                    "value": "Ycomp",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "possible_values": []
                }
            },
            "tile_149": {
                "variable": {
                    "value": "mmatrix",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.mask_matrix, 0)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "x": {
                    "value": "(x[:, 0] - x[:, 2]) ** 2 + (x[:, 1] - x[:, 3]) ** 2",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "E",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.params['grid_k'] * (self.params['rm'] ** 2 * d2) ** 6",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_120": {
                "x": {
                    "value": "(x[:, 2] - x[:, 0]) ** 2 + (x[:, 3] - x[:, 1]) ** 2",
                    "possible_values": []
                }
            },
            "reduce_sum_207": {
                "input_tensor": {
                    "value": "(tf.sign(d_left) + 1) * self.params['box_k'] * d_left ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "input_tensor": {
                    "value": "(tf.sign(d_right) + 1) * self.params['box_k'] * d_right ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_211": {
                "input_tensor": {
                    "value": "(tf.sign(d_down) + 1) * self.params['box_k'] * d_down ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "input_tensor": {
                    "value": "(tf.sign(d_up) + 1) * self.params['box_k'] * d_up ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "X[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_143": {
                "input": {
                    "value": "xcomp",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_144": {
                "input": {
                    "value": "xcomp",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "expand_dims_145": {
                "input": {
                    "value": "ycomp",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "a": {
                    "value": "Xcomp",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "transpose_147": {
                "a": {
                    "value": "Ycomp",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "input": {
                    "value": "self.mask_matrix",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "D2rel ** 6",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            },
            "sign_207": {
                "x": {
                    "value": "d_left",
                    "possible_values": [
                        [
                            "-(xcomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ],
                        [
                            "-(xcomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sign_209": {
                "x": {
                    "value": "d_right",
                    "possible_values": [
                        [
                            "xcomp - self.params['box_halfsize']",
                            "BinOp"
                        ],
                        [
                            "xcomp - self.params['box_halfsize']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_211": {
                "x": {
                    "value": "d_down",
                    "possible_values": [
                        [
                            "-(ycomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ],
                        [
                            "-(ycomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sign_213": {
                "x": {
                    "value": "d_up",
                    "possible_values": [
                        [
                            "ycomp - self.params['box_halfsize']",
                            "BinOp"
                        ],
                        [
                            "ycomp - self.params['box_halfsize']",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "software/deep_boltzmann/networks/invertible.py": {
        "tensorflow": {
            "expand_dims_502": {
                "variable": {
                    "value": "rc",
                    "possible_values": []
                },
                "input": {
                    "value": "rc",
                    "possible_values": [
                        [
                            "rc_func(self.output_x)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(rc, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_504": {
                "variable": {
                    "value": "kmat",
                    "possible_values": []
                },
                "x": {
                    "value": "-(rc - gmeans) ** 2 / (2 * gstd * gstd)",
                    "possible_values": []
                }
            },
            "cast_508": {
                "variable": {
                    "value": "batchsize_per_temperature",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(kmat)[0] / ntemperatures",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "transpose_510": {
                "variable": {
                    "value": "kmatT",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(kmat, (batchsize_per_temperature, ntemperatures, nbins))",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "reduce_mean_511": {
                "variable": {
                    "value": "histogram",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kmatT",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reshape(kmat, (batchsize_per_temperature, ntemperatures, nbins)), perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_512": {
                "variable": {
                    "value": "entropies",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(histogram)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_519": {
                "variable": {
                    "value": "Jmean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.log_det_Jzx",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_mean_520": {
                "variable": {
                    "value": "Jdev",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.log_det_Jzx - Jmean) ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reduce_mean_527": {
                "variable": {
                    "value": "Jmean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.log_det_Jxz",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_mean_528": {
                "variable": {
                    "value": "Jdev",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.log_det_Jxz - Jmean) ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reduce_mean_536": {
                "variable": {
                    "value": "LL1",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "J[:trajlength] - 0.5 / std ** 2 * tf.reduce_sum(self.output_z[:trajlength] ** 2, axis=1)",
                    "possible_values": []
                }
            },
            "reduce_mean_537": {
                "variable": {
                    "value": "LL2",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "J[trajlength:] - 0.5 / std ** 2 * tf.reduce_sum(self.output_z[trajlength:] ** 2, axis=1)",
                    "possible_values": []
                }
            },
            "concat_798": {
                "variable": {
                    "value": "log_pacc_0_",
                    "possible_values": []
                },
                "values": {
                    "value": "[np.array([0], dtype=np.float32), log_pacc]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_799": {
                "variable": {
                    "value": "log_pacc__0",
                    "possible_values": []
                },
                "values": {
                    "value": "[log_pacc, np.array([0], dtype=np.float32)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "exp_143": {
                "x": {
                    "value": "self.log_scaling_factors",
                    "possible_values": []
                }
            },
            "reduce_sum_452": {
                "input_tensor": {
                    "value": "log_det_Jxzs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reduce_sum_466": {
                "input_tensor": {
                    "value": "log_det_Jzxs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reduce_sum_506": {
                "input_tensor": {
                    "value": "kmat",
                    "possible_values": [
                        [
                            "tf.exp(-(rc - gmeans) ** 2 / (2 * gstd * gstd))",
                            "Call"
                        ],
                        [
                            "kmat / tf.reduce_sum(kmat, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_mean_513": {
                "input_tensor": {
                    "value": "entropies",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.log(histogram), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_538": {
                "input_tensor": {
                    "value": "[LL1, LL2]",
                    "possible_values": []
                }
            },
            "concat_804": {
                "variable": {
                    "value": "d_0_",
                    "possible_values": []
                },
                "values": {
                    "value": "[np.array([0], dtype=np.float32), d]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_805": {
                "variable": {
                    "value": "d__0",
                    "possible_values": []
                },
                "values": {
                    "value": "[d, np.array([0], dtype=np.float32)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reshape_881": {
                "variable": {
                    "value": "lwT",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lw",
                    "possible_values": [
                        [
                            "self.log_w(high_energy, max_energy, temperature_factors=tfac)",
                            "Call"
                        ],
                        [
                            "self.log_w(high_energy, max_energy, temperature_factors=tfac)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size_per_temp, temperature.size)",
                    "possible_values": []
                }
            },
            "reduce_mean_882": {
                "variable": {
                    "value": "lwT_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lwT",
                    "possible_values": [
                        [
                            "tf.reshape(lw, (batch_size_per_temp, temperature.size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(lw, (batch_size_per_temp, temperature.size))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_888": {
                "variable": {
                    "value": "lwT",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lw",
                    "possible_values": [
                        [
                            "self.log_w(high_energy, max_energy, temperature_factors=tfac)",
                            "Call"
                        ],
                        [
                            "self.log_w(high_energy, max_energy, temperature_factors=tfac)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size_per_temp, temperature.size)",
                    "possible_values": []
                }
            },
            "reduce_mean_889": {
                "variable": {
                    "value": "lwT_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lwT",
                    "possible_values": [
                        [
                            "tf.reshape(lw, (batch_size_per_temp, temperature.size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(lw, (batch_size_per_temp, temperature.size))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_449": {
                "shape": {
                    "value": "(self.output_z.shape[0],)",
                    "possible_values": []
                }
            },
            "ones_463": {
                "shape": {
                    "value": "(self.output_x.shape[0],)",
                    "possible_values": []
                }
            },
            "reduce_sum_482": {
                "input_tensor": {
                    "value": "logz",
                    "possible_values": [
                        [
                            "logreg(self.output_z, a=0.001, tf=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_486": {
                "input_tensor": {
                    "value": "tf.log(1 + (self.output_z / scale) ** 2)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_509": {
                "input": {
                    "value": "gmeans",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "np.linspace(rc_min, rc_max, 11)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_510": {
                "tensor": {
                    "value": "kmat",
                    "possible_values": [
                        [
                            "tf.exp(-(rc - gmeans) ** 2 / (2 * gstd * gstd))",
                            "Call"
                        ],
                        [
                            "kmat / tf.reduce_sum(kmat, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batchsize_per_temperature, ntemperatures, nbins)",
                    "possible_values": []
                }
            },
            "log_512": {
                "x": {
                    "value": "histogram",
                    "possible_values": [
                        [
                            "tf.reduce_mean(kmatT, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_753": {
                "input_tensor": {
                    "value": "z1 ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_754": {
                "input_tensor": {
                    "value": "z2 ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_784": {
                "input_tensor": {
                    "value": "z ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_794": {
                "x": {
                    "value": "1 + tf.exp(arg)",
                    "possible_values": []
                }
            },
            "reduce_mean_883": {
                "input_tensor": {
                    "value": "(lwT - lwT_mean) ** 2",
                    "possible_values": []
                }
            },
            "reduce_mean_890": {
                "input_tensor": {
                    "value": "tf.abs(lwT - lwT_mean)",
                    "possible_values": []
                }
            },
            "reduce_sum_164": {
                "input_tensor": {
                    "value": "self.log_scaling_factors",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "-self.log_scaling_factors",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_472": {
                "input_tensor": {
                    "value": "self.output_z ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_486": {
                "x": {
                    "value": "1 + (self.output_z / scale) ** 2",
                    "possible_values": []
                }
            },
            "log_688": {
                "x": {
                    "value": "tf.sqrt(temperature_factors)",
                    "possible_values": []
                }
            },
            "reduce_sum_688": {
                "input_tensor": {
                    "value": "z ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_767": {
                "x": {
                    "value": "1 + tf.exp(arg1)",
                    "possible_values": []
                }
            },
            "log_770": {
                "x": {
                    "value": "1 + tf.exp(arg)",
                    "possible_values": []
                }
            },
            "abs_890": {
                "x": {
                    "value": "lwT - lwT_mean",
                    "possible_values": []
                }
            },
            "exp_116": {
                "x": {
                    "value": "self.log_scaling_factors",
                    "possible_values": []
                }
            },
            "exp_125": {
                "x": {
                    "value": "-self.log_scaling_factors",
                    "possible_values": []
                }
            },
            "reduce_sum_481": {
                "input_tensor": {
                    "value": "logz ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "shape_508": {
                "input": {
                    "value": "kmat",
                    "possible_values": [
                        [
                            "tf.exp(-(rc - gmeans) ** 2 / (2 * gstd * gstd))",
                            "Call"
                        ],
                        [
                            "kmat / tf.reduce_sum(kmat, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_536": {
                "input_tensor": {
                    "value": "self.output_z[:trajlength] ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_537": {
                "input_tensor": {
                    "value": "self.output_z[trajlength:] ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_688": {
                "x": {
                    "value": "temperature_factors",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_794": {
                "x": {
                    "value": "arg",
                    "possible_values": [
                        [
                            "linlogcut(F2 - F1, 10, 1000, tf=True)",
                            "Call"
                        ],
                        [
                            "linlogcut(F[1:] - F[:-1], 10, 1000, tf=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_767": {
                "x": {
                    "value": "arg1",
                    "possible_values": [
                        [
                            "linlogcut(F2 - F1, 10, 1000, tf=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_770": {
                "x": {
                    "value": "arg",
                    "possible_values": [
                        [
                            "linlogcut(F2 - F1, 10, 1000, tf=True)",
                            "Call"
                        ],
                        [
                            "linlogcut(F[1:] - F[:-1], 10, 1000, tf=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_165": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.Szx(z)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.layers[i].connect_zx(z)",
                            "Call"
                        ],
                        [
                            "ensure_traj(x)",
                            "Call"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shape_173": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.Szx(z)",
                            "Call"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.layers[i].connect_zx(z)",
                            "Call"
                        ],
                        [
                            "ensure_traj(x)",
                            "Call"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "software/deep_boltzmann/networks/layers_basic.py": {
        "tensorflow": {
            "sqrt_60": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.diag_part(cov)",
                    "possible_values": []
                }
            },
            "gather_78": {
                "params": {
                    "value": "x",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.indices",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "diag_part_60": {
                "input": {
                    "value": "cov",
                    "possible_values": [
                        [
                            "keras.backend.dot(keras.backend.transpose(z), z) / keras.backend.cast(batchsize, np.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "tensor": {
                    "value": "std",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.diag_part(cov))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.dim)",
                    "possible_values": []
                }
            }
        }
    },
    "software/deep_boltzmann/util.py": {
        "tensorflow": {
            "where_32": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "condition": {
                    "value": "x < b",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.where(x < b, x, b * tf.ones(tf.shape(x)))",
                            "Call"
                        ],
                        [
                            "x - x.mean()",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "b * tf.ones(tf.shape(x))",
                    "possible_values": []
                }
            },
            "where_36": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_finite(y)",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "possible_values": [
                        [
                            "a + tf.where(x < a, x - a, tf.log(x - a + 1))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_finite(y), y, b * tf.ones(tf.shape(y)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b * tf.ones(tf.shape(y))",
                    "possible_values": []
                }
            },
            "where_49": {
                "variable": {
                    "value": "logx",
                    "possible_values": []
                },
                "condition": {
                    "value": "x > a",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(x)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(a) - (a - x)",
                    "possible_values": []
                }
            },
            "where_34": {
                "condition": {
                    "value": "x < a",
                    "possible_values": []
                },
                "x": {
                    "value": "x - a",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(x - a + 1)",
                    "possible_values": []
                }
            },
            "is_finite_36": {
                "x": {
                    "value": "y",
                    "possible_values": [
                        [
                            "a + tf.where(x < a, x - a, tf.log(x - a + 1))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_finite(y), y, b * tf.ones(tf.shape(y)))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_49": {
                "x": {
                    "value": "a",
                    "possible_values": [
                        [
                            "np.zeros(lags.size)",
                            "Call"
                        ],
                        [
                            "a / a0",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_32": {
                "shape": {
                    "value": "tf.shape(x)",
                    "possible_values": []
                }
            },
            "log_34": {
                "x": {
                    "value": "x - a + 1",
                    "possible_values": []
                }
            },
            "ones_36": {
                "shape": {
                    "value": "tf.shape(y)",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.where(x < b, x, b * tf.ones(tf.shape(x)))",
                            "Call"
                        ],
                        [
                            "x - x.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_36": {
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "a + tf.where(x < a, x - a, tf.log(x - a + 1))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.is_finite(y), y, b * tf.ones(tf.shape(y)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}