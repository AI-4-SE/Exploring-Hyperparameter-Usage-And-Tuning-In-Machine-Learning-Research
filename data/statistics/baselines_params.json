{
    "baselines/a2c/a2c.py": {
        "tensorflow": {
            "placeholder_47": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_model.action.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "train_model.action.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "ADV",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ADV * neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_64": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tf.squeeze(train_model.vf)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [nbatch])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_73": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_loss - entropy * ent_coef + vf_loss * vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('a2c_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_82": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "0.99",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_76": {
                "variable": {
                    "value": "(grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, max_grad_norm)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_114": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.get_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "a2c_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "input": {
                    "value": "train_model.vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/a2c/utils.py": {
        "tensorflow": {
            "exp_12": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - tf.reduce_max(logits, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_13": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_88": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_101": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_105": {
                "variable": {
                    "value": "(u, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_126": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_139": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_255": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(x, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx_flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, x.shape[0]) * x.shape[1] + idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "moments_279": {
                "variable": {
                    "value": "(_, vary)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u if u.shape == flat_shape else v",
                            "IfExp"
                        ],
                        [
                            "q.reshape(shape)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_280": {
                "variable": {
                    "value": "(_, varpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q - qpred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_8": {
                "input": {
                    "value": "logits - tf.log(-tf.log(noise))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "wshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rf, rf, nin, nf]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "bias_var_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nf] if one_dim_bias else [1, nf, 1, 1]",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "wx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_93": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "i in range(nenvs)",
                            "Call"
                        ],
                        [
                            "i in range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.svd(a, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "wx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "bx",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_119": {
                "variable": {
                    "value": "bh",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_131": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_132": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "i in range(nenvs)",
                            "Call"
                        ],
                        [
                            "i in range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_134": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_135": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.svd(a, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(x, axes=axes, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=4, value=z)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_156": {
                "scope": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_266": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(t), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_7": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_11": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "input_tensor": {
                    "value": "p0 * tf.log(p0 + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', bias_var_shape, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, bshape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh], initializer=tf.constant_initializer(init_bias))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh * 4], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh * 4], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "bshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, nf]",
                            "List"
                        ],
                        [
                            "[1, nf, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_70": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.svd(a, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "tf.concat(axis=1, values=h)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "tf.stack(values=h, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_106": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_266": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(t), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_8": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_70": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nsteps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nsteps",
                            "Method Argument"
                        ],
                        [
                            "nsteps",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_77": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_79": {
                "values": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_137": {
                "x": {
                    "value": "_ln(c, gc, bc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "tf.square(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_18": {
                "x": {
                    "value": "p0 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_62": {
                "value": {
                    "value": "init_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_86": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_115": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_118": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_119": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_121": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_123": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_124": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_266": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(ts, shapes)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "tf.split(axis=1, num_or_size_splits=2, value=s)",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/acer/acer.py": {
        "tensorflow": {
            "placeholder_67": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "MU",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch, nact]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "step_ob_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ob_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nenvs,) + ob_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "train_ob_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ob_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nenvs * (nsteps + 1),) + ob_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_88": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "train_model_p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "train_model.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "polyak_model_p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "polyak_model.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "step_model_p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "step_model.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model_p * train_model.q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cat_entropy_softmax(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "variable": {
                    "value": "logf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_i + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_139": {
                "variable": {
                    "value": "logf_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "variable": {
                    "value": "gain_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logf_bc * tf.stop_gradient(adv_bc * tf.nn.relu(1.0 - c / (rho + eps)) * f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "loss_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.stop_gradient(qret) - q_i) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_183": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "rprop_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ],
                        [
                            "rprop_alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "rprop_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "rprop_epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_36": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rho_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_by_index(rho, A)",
                            "Call"
                        ],
                        [
                            "rho_i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_156": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-(loss_policy - ent_coef * entropy) * nsteps * nenvs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda var: strip(var, nenvs, nsteps), [train_model_p, polyak_model_p, train_model.q])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_159": {
                "variable": {
                    "value": "k_dot_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "k * g",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_160": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "(tf.reduce_sum(k * g, axis=-1) - delta) / (tf.reduce_sum(tf.square(k), axis=-1) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "avg_norm_k_dot_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(k_dot_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "avg_norm_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_170": {
                "variable": {
                    "value": "grads_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda var: strip(var, nenvs, nsteps), [train_model_p, polyak_model_p, train_model.q])",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('acer_model')",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "grads_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-g / (nenvs * nsteps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_171": {
                "variable": {
                    "value": "grads_q",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_q * q_coef",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('acer_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_175": {
                "variable": {
                    "value": "norm_grads_q",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_q * q_coef, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_176": {
                "variable": {
                    "value": "norm_grads_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(f, params, grads_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_178": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_policy + q_coef * loss_q - ent_coef * entropy",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_trainable_variables('acer_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_181": {
                "variable": {
                    "value": "(grads, norm_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[gradient_add(g1, g2, param) for (g1, g2, param) in zip(grads_policy, grads_q, params)]",
                            "ListComp"
                        ],
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, max_grad_norm)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "max_grad_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_188": {
                "variable": {
                    "value": "_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.apply(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_226": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "acer_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "acer_model",
                    "type": "str",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "custom_getter",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_134": {
                "input": {
                    "value": "adv * tf.minimum(c, rho_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "gain_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logf * tf.stop_gradient(adv * tf.minimum(c, rho_i))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_138": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(train_model_p * train_model.q, axis=-1)",
                            "Call"
                        ],
                        [
                            "strip(v, nenvs, nsteps, True)",
                            "Call"
                        ],
                        [
                            "ema.average(getter(*args, **kwargs))",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nenvs * nsteps, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "gain_bc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(logf_bc * tf.stop_gradient(adv_bc * tf.nn.relu(1.0 - c / (rho + eps)) * f), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_148": {
                "tensor": {
                    "value": "qret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_final",
                            "variable"
                        ],
                        [
                            "rs[i] + gamma * qret * (1.0 - ds[i])",
                            "BinOp"
                        ],
                        [
                            "rho_bar[i] * (qret - q_is[i]) + vs[i]",
                            "BinOp"
                        ],
                        [
                            "seq_to_batch(qrets, flat=True)",
                            "Call"
                        ],
                        [
                            "q_retrace(R, D, q_i, v, rho_i, nenvs, nsteps, gamma)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nenvs, nsteps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_187": {
                "control_inputs": {
                    "value": "[_opt_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_141": {
                "input": {
                    "value": "adv_bc * tf.nn.relu(1.0 - c / (rho + eps)) * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_149": {
                "x": {
                    "value": "tf.stop_gradient(qret) - q_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_165": {
                "x": {
                    "value": "k_dot_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(k * g, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_166": {
                "x": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, (tf.reduce_sum(k * g, axis=-1) - delta) / (tf.reduce_sum(tf.square(k), axis=-1) + eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_134": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "rho_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_by_index(rho, A)",
                            "Call"
                        ],
                        [
                            "rho_i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, (tf.reduce_sum(k * g, axis=-1) - delta) / (tf.reduce_sum(tf.square(k), axis=-1) + eps))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nenvs * nsteps, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_149": {
                "input": {
                    "value": "qret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_final",
                            "variable"
                        ],
                        [
                            "rs[i] + gamma * qret * (1.0 - ds[i])",
                            "BinOp"
                        ],
                        [
                            "rho_bar[i] * (qret - q_is[i]) + vs[i]",
                            "BinOp"
                        ],
                        [
                            "seq_to_batch(qrets, flat=True)",
                            "Call"
                        ],
                        [
                            "q_retrace(R, D, q_i, v, rho_i, nenvs, nsteps, gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_160": {
                "input_tensor": {
                    "value": "tf.square(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_141": {
                "features": {
                    "value": "1.0 - c / (rho + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_160": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-f_pol / (f + eps)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/acer/policies.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(h, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ],
                        [
                            "fc(h5, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(h, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ],
                        [
                            "fc(h5, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_21": {
                "logits": {
                    "value": "pi_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(h, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ],
                        [
                            "fc(h5, 'pi', nact, init_scale=0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/acktr/acktr.py": {
        "tensorflow": {
            "Coordinator_123": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "ADV",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "PG_LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "VF_LR",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ADV * neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_41": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tf.squeeze(train_model.vf)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [nbatch])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_53": {
                "variable": {
                    "value": "self.grads_check",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_loss + vf_coef * vf_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_91": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "acktr_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "input": {
                    "value": "train_model.vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "input_tensor": {
                    "value": "neglogpac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_model.pd.neglogp(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_48": {
                "input_tensor": {
                    "value": "tf.pow(train_model.vf - tf.stop_gradient(sample_net), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_55": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "train_model.vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_48": {
                "x": {
                    "value": "train_model.vf - tf.stop_gradient(sample_net)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_48": {
                "input": {
                    "value": "sample_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_model.vf + tf.random_normal(tf.shape(train_model.vf))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/acktr/kfac.py": {
        "tensorflow": {
            "Variable_43": {
                "variable": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/sgd_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.cold_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/cold_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/factor_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/stats_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "self.vFv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/vFv",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_default_graph_59": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_298": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_sampled",
                            "Method Argument"
                        ],
                        [
                            "loss_sampled",
                            "Method Argument"
                        ],
                        [
                            "loss_sampled",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "list(zip(*grads))",
                            "Call"
                        ],
                        [
                            "varlist",
                            "Method Argument"
                        ],
                        [
                            "varlist",
                            "Method Argument"
                        ],
                        [
                            "varlist",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "gradientsSampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_792": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(self._clip_kl / vg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_807": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "list(zip(*grads))",
                            "Call"
                        ],
                        [
                            "varlist",
                            "Method Argument"
                        ],
                        [
                            "varlist",
                            "Method Argument"
                        ],
                        [
                            "varlist",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_add_836": {
                "variable": {
                    "value": "global_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_898": {
                "variable": {
                    "value": "coldOptim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._cold_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_288": {
                "variable": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_296": {
                "variable": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Print_431": {
                "variable": {
                    "value": "statsUpdates[aKey]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "statsUpdates[aKey]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.convert_to_tensor('step:'), self.global_step, tf.convert_to_tensor('computing stats')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FIFOQueue_460": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[item.dtype for item in update_stats]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[item.get_shape() for item in update_stats]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "QueueRunner_466": {
                "variable": {
                    "value": "self.qr_stats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in update_stats], shapes=[item.get_shape() for item in update_stats])",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in factorOps_dummy], shapes=[item.get_shape() for item in factorOps_dummy])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "[enqueue_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_467": {
                "variable": {
                    "value": "update_stats_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(queue.size(), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*[dequeue_stats_op()])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_471": {
                "variable": {
                    "value": "update_stats_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : updateRunningAvgStats(statsUpdates)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "updateAccumStats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "updateAccumStats",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_494": {
                "variable": {
                    "value": "stats_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_497": {
                "variable": {
                    "value": "stats_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "stats_step_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign_add(self.stats_step, 1)",
                            "Call"
                        ],
                        [
                            "tf.Print(stats_step_op, [tf.convert_to_tensor('step:'), self.global_step, tf.convert_to_tensor('fac step:'), self.factor_step, tf.convert_to_tensor('sgd step:'), self.sgd_step, tf.convert_to_tensor('Accum:'), tf.convert_to_tensor(accumulate), tf.convert_to_tensor('Accum coeff:'), tf.convert_to_tensor(accumulateCoeff), tf.convert_to_tensor('stat step:'), self.stats_step, updateOps[0], updateOps[1]])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('step:'), self.global_step, tf.convert_to_tensor('fac step:'), self.factor_step, tf.convert_to_tensor('sgd step:'), self.sgd_step, tf.convert_to_tensor('Accum:'), tf.convert_to_tensor(accumulate), tf.convert_to_tensor('Accum coeff:'), tf.convert_to_tensor(accumulateCoeff), tf.convert_to_tensor('stat step:'), self.stats_step, updateOps[0], updateOps[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_add_611": {
                "variable": {
                    "value": "factor_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_785": {
                "variable": {
                    "value": "local_vg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * g * (self._lr * self._lr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Print_794": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(1.0, tf.sqrt(self._clip_kl / vg))",
                            "Call"
                        ],
                        [
                            "tf.Print(scaling, [tf.convert_to_tensor('clip: '), scaling, tf.convert_to_tensor(' vFv: '), vg])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('clip: '), scaling, tf.convert_to_tensor(' vFv: '), vg]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_806": {
                "variable": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FIFOQueue_825": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[item.dtype for item in factorOps_dummy]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[item.get_shape() for item in factorOps_dummy]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cond_827": {
                "variable": {
                    "value": "enqueue_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_and(tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0)), tf.greater_equal(self.stats_step, self._stats_accum_iter))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : queue.enqueue(self.computeStatsEigen())",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "QueueRunner_833": {
                "variable": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": []
                },
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in update_stats], shapes=[item.get_shape() for item in update_stats])",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in factorOps_dummy], shapes=[item.get_shape() for item in factorOps_dummy])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "[enqueue_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_add_909": {
                "variable": {
                    "value": "sgd_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_454": {
                "*inputs": {
                    "value": "*self._apply_stats(statsUpdates)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_add_483": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "stats_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpropStats_vars",
                            "variable"
                        ],
                        [
                            "bpropStats_vars",
                            "variable"
                        ],
                        [
                            "statsUpdates",
                            "variable"
                        ],
                        [
                            "stats[var][key]",
                            "Subscript"
                        ],
                        [
                            "stats_eigen",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "accumulateCoeff * stats_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_487": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "stats_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpropStats_vars",
                            "variable"
                        ],
                        [
                            "bpropStats_vars",
                            "variable"
                        ],
                        [
                            "statsUpdates",
                            "variable"
                        ],
                        [
                            "stats[var][key]",
                            "Subscript"
                        ],
                        [
                            "stats_eigen",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "stats_var * self._stats_decay",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_add_489": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign_add(stats_var, accumulateCoeff * stats_new, use_locking=True)",
                            "Call"
                        ],
                        [
                            "tf.assign(stats_var, stats_var * self._stats_decay, use_locking=True)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(update_op, (1.0 - self._stats_decay) * stats_new, use_locking=True)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(1.0 - self._stats_decay) * stats_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_493": {
                "control_inputs": {
                    "value": "updateOps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_542": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_610": {
                "control_inputs": {
                    "value": "updateOps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Print_784": {
                "input_": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.sqrt(tf.reduce_sum(tf.pow(grad, 2)))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Euclidean norm of new grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_792": {
                "x": {
                    "value": "self._clip_kl / vg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_796": {
                "control_inputs": {
                    "value": "[tf.assign(self.vFv, vg)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_839": {
                "control_inputs": {
                    "value": "[global_step_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_895": {
                "*inputs": {
                    "value": "*updateOps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_905": {
                "variable": {
                    "value": "(sgd_grads, sgd_grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "sgd_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*grads)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(sgd_grads, self.max_grad_norm)",
                            "Call"
                        ],
                        [
                            "list(zip(sgd_grads, sgd_var))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_915": {
                "*inputs": {
                    "value": "*[sgd_step_op, coldOptim_op]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_922": {
                "pred": {
                    "value": "tf.greater(self.sgd_step, self._cold_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "warmKFACstart",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warmKFACstart",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "coldSGDstart",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coldSGDstart",
                            "Call"
                        ]
                    ]
                }
            },
            "device_187": {
                "device_name": {
                    "value": "/cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_446": {
                "pred": {
                    "value": "tf.greater(self.sgd_step, self._cold_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.group(*self._apply_stats(statsUpdates, accumulate=True, accumulateCoeff=1.0 / self._stats_accum_iter))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_448": {
                "*inputs": {
                    "value": "*self._apply_stats(statsUpdates, accumulate=True, accumulateCoeff=1.0 / self._stats_accum_iter)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "equal_467": {
                "x": {
                    "value": "queue.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_471": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_519": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_576": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_608": {
                "ref": {
                    "value": "stats_eigen_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.eigen_reverse_lookup[mark]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_669": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grad, tf.expand_dims(grad_dict[var_assnBias], 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_761": {
                "variable": {
                    "value": "grad_assnBias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(grad, begin=[C_plus_one - 1, 0], size=[1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_assnBias.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_765": {
                "variable": {
                    "value": "grad_assnWeights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[C_plus_one - 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_773": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "GRAD_SHAPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_827": {
                "x": {
                    "value": "tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_848": {
                "control_inputs": {
                    "value": "dependency_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cond_854": {
                "variable": {
                    "value": "updateFactorOps",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_and(tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0)), tf.greater_equal(self.stats_step, self._stats_accum_iter))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.group(*self.applyStatsEigen(self.computeStatsEigen()))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "no_op_wrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no_op_wrapper",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_859": {
                "variable": {
                    "value": "updateFactorOps",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cond(tf.equal(queue.size(), tf.convert_to_tensor(0)), tf.no_op, lambda : tf.group(*self.applyStatsEigen(dequeue_op())))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "no_op_wrapper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "no_op_wrapper",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_876": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(self.factor_step, tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "getKfacGradOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getKfacGradOp",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "gradOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradOp",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_879": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr * (1.0 - self._momentum)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_913": {
                "variable": {
                    "value": "sgd_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "sgd_step_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign_add(self.sgd_step, 1)",
                            "Call"
                        ],
                        [
                            "tf.Print(sgd_step_op, [self.sgd_step, tf.convert_to_tensor('doing cold sgd step')])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[self.sgd_step, tf.convert_to_tensor('doing cold sgd step')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_922": {
                "x": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._cold_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_419": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(fpropFactor)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(bpropFactor)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "convert_to_tensor_432": {
                "value": {
                    "value": "step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_434": {
                "value": {
                    "value": "computing stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "greater_446": {
                "x": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._cold_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_467": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_468": {
                "*inputs": {
                    "value": "*[dequeue_stats_op()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "convert_to_tensor_498": {
                "value": {
                    "value": "step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_500": {
                "value": {
                    "value": "fac step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_502": {
                "value": {
                    "value": "sgd step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_504": {
                "value": {
                    "value": "Accum:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_505": {
                "value": {
                    "value": "accumulate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_506": {
                "value": {
                    "value": "Accum coeff:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_507": {
                "value": {
                    "value": "accumulateCoeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_508": {
                "value": {
                    "value": "stat step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_596": {
                "control_inputs": {
                    "value": "updateOps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Print_614": {
                "input_": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.convert_to_tensor('updated kfac factors')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_648": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[KW * KH, C, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_651": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_657": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_713": {
                "variable": {
                    "value": "damping",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._epsilon + weightDecayCoeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / num_factors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_784": {
                "x": {
                    "value": "tf.reduce_sum(tf.pow(grad, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_794": {
                "value": {
                    "value": "clip: ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_795": {
                "value": {
                    "value": " vFv: ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_796": {
                "ref": {
                    "value": "self.vFv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "vg + local_vg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_827": {
                "x": {
                    "value": "tf.mod(self.stats_step, self._kfac_update)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_828": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_850": {
                "*inputs": {
                    "value": "*[tf.assign_add(self.cold_step, 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "control_dependencies_870": {
                "control_inputs": {
                    "value": "[updateFactorOps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_912": {
                "control_inputs": {
                    "value": "[sgd_step_op, coldOptim_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_167": {
                "variable": {
                    "value": "factorTensors[param][key + _concat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "factorTensors[param][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_257": {
                "variable": {
                    "value": "slot_fpropFactor_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([fpropFactor_size])) * self._diag_init_coeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'KFAC_STATS/' + fpropFactor.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_318": {
                "input": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "SVD_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / Oh / Ow",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "extract_image_patches_357": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "SVD_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / Oh / Ow",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "[1, convkernel_size[0], convkernel_size[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fops.get_attr('strides')",
                            "Call"
                        ]
                    ]
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fops.get_attr('padding')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_374": {
                "variable": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_378": {
                "variable": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_383": {
                "a": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "SVD_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / Oh / Ow",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "SVD_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / Oh / Ow",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_384": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(fpropFactor)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(bpropFactor)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_397": {
                "input": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bpropFactor * tf.to_float(B)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bpropFactor, [-1, C]) * Oh * Ow",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_415": {
                "variable": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bpropFactor * tf.to_float(B)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bpropFactor, [-1, C]) * Oh * Ow",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_422": {
                "a": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bpropFactor * tf.to_float(B)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bpropFactor, [-1, C]) * Oh * Ow",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bpropFactor * tf.to_float(B)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bpropFactor, [-1, C]) * Oh * Ow",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_423": {
                "x": {
                    "value": "tf.shape(bpropFactor)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "group_446": {
                "*inputs": {
                    "value": "*self._apply_stats(statsUpdates, accumulate=True, accumulateCoeff=1.0 / self._stats_accum_iter)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_583": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([stats_dim]), name='KFAC_FAC/' + stats_var.name.split(':')[0] + '/e', trainable=False)",
                            "Call"
                        ],
                        [
                            "eigens[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(e, tf.float32)",
                            "Call"
                        ],
                        [
                            "detectMinVal(self.stats_eigen[stats]['e'], var, name='act', debug=KFAC_DEBUG)",
                            "Call"
                        ],
                        [
                            "factorReshape(Q, e, grad, facIndx=idx, ftype='act')",
                            "Call"
                        ],
                        [
                            "detectMinVal(self.stats_eigen[stats]['e'], var, name='grad', debug=KFAC_DEBUG)",
                            "Call"
                        ],
                        [
                            "factorReshape(Q, e, grad, facIndx=idx, ftype='grad')",
                            "Call"
                        ],
                        [
                            "eigVals",
                            "variable"
                        ],
                        [
                            "zip(eigVals, eigVals_tnorm_avg)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_584": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.diag(tf.ones([stats_dim])), name='KFAC_FAC/' + stats_var.name.split(':')[0] + '/Q', trainable=False)",
                            "Call"
                        ],
                        [
                            "eigens[1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(Q, tf.float32)",
                            "Call"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ],
                        [
                            "factorReshape(Q, e, grad, facIndx=idx, ftype='act')",
                            "Call"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ],
                        [
                            "factorReshape(Q, e, grad, facIndx=idx, ftype='grad')",
                            "Call"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_597": {
                "input_": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.convert_to_tensor('computed factor eigen')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_614": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_715": {
                "input_tensor": {
                    "value": "tf.abs(e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_761": {
                "input_": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[C_plus_one - 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_784": {
                "input_tensor": {
                    "value": "tf.pow(grad, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_827": {
                "x1": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self._kfac_update",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_827": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_854": {
                "x": {
                    "value": "tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_859": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_876": {
                "x": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_165": {
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factorTensors[param][key][0].name.split(':')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_273": {
                "variable": {
                    "value": "slot_bpropFactor_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([bpropFactor.get_shape()[-1]])) * self._diag_init_coeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'KFAC_STATS/' + bpropFactor.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_344": {
                "variable": {
                    "value": "sqrtS1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sqrt(S[:, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_364": {
                "variable": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(fpropFactor, ksizes=[1, convkernel_size[0], convkernel_size[1], 1], strides=strides, rates=[1, 1, 1, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_404": {
                "variable": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bpropFactor * tf.to_float(B)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bpropFactor, [-1, C]) * Oh * Ow",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_525": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([stats_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC_FAC/ + stats_var.name.split(:)[0] + /e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_527": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([stats_dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC_FAC/ + stats_var.name.split(:)[0] + /Q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_558": {
                "variable": {
                    "value": "redundant_stats[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.identity(item)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_561": {
                "variable": {
                    "value": "redundant_stats[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "varlist",
                            "variable"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "item in enumerate(updatelist)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_597": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_615": {
                "value": {
                    "value": "updated kfac factors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_670": {
                "input": {
                    "value": "grad_dict[var_assnBias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_716": {
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([stats_dim]), name='KFAC_FAC/' + stats_var.name.split(':')[0] + '/e', trainable=False)",
                            "Call"
                        ],
                        [
                            "eigens[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(e, tf.float32)",
                            "Call"
                        ],
                        [
                            "detectMinVal(self.stats_eigen[stats]['e'], var, name='act', debug=KFAC_DEBUG)",
                            "Call"
                        ],
                        [
                            "factorReshape(Q, e, grad, facIndx=idx, ftype='act')",
                            "Call"
                        ],
                        [
                            "detectMinVal(self.stats_eigen[stats]['e'], var, name='grad', debug=KFAC_DEBUG)",
                            "Call"
                        ],
                        [
                            "factorReshape(Q, e, grad, facIndx=idx, ftype='grad')",
                            "Call"
                        ],
                        [
                            "eigVals",
                            "variable"
                        ],
                        [
                            "zip(eigVals, eigVals_tnorm_avg)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_723": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "e_tnorm / eig_tnorm_negList[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_728": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.pow(e_tnorm, num_factors - 1.0) / eig_tnorm_negList_prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / num_factors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_784": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(gradlist, varlist)",
                            "Call"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [KW * KH, C, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, D])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assnBias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(Q, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, Q, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assnWeights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, GRAD_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_854": {
                "x": {
                    "value": "tf.mod(self.stats_step, self._kfac_update)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_856": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_856": {
                "*inputs": {
                    "value": "*self.applyStatsEigen(self.computeStatsEigen())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_860": {
                "pred": {
                    "value": "tf.equal(queue.size(), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*self.applyStatsEigen(dequeue_op()))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "convert_to_tensor_877": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_890": {
                "pred": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "updateOptimOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "updateOptimOp",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_892": {
                "pred": {
                    "value": "tf.greater_equal(self.sgd_step, self._cold_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "updateOptimOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "updateOptimOp",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_914": {
                "value": {
                    "value": "doing cold sgd step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_239": {
                "variable": {
                    "value": "slot_fpropFactor_stats2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([fpropFactor2_size])) * self._diag_init_coeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'KFAC_STATS/' + fpropFactor.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_423": {
                "input": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bpropFactor * tf.to_float(B)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bpropFactor, [-1, C]) * Oh * Ow",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_598": {
                "value": {
                    "value": "computed factor eigen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_add_850": {
                "ref": {
                    "value": "self.cold_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_854": {
                "x1": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self._kfac_update",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_855": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_860": {
                "x": {
                    "value": "queue.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_886": {
                "pred": {
                    "value": "tf.greater(self.factor_step, tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : optim.apply_gradients(list(zip(u, varlist)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_890": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_892": {
                "x": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._cold_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_257": {
                "diagonal": {
                    "value": "tf.ones([fpropFactor_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "SVD_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / Oh / Ow",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, KH * KW, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_344": {
                "x": {
                    "value": "S[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_379": {
                "shape": {
                    "value": "[tf.shape(fpropFactor)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_525": {
                "shape": {
                    "value": "[stats_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_527": {
                "diagonal": {
                    "value": "tf.ones([stats_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_559": {
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "varlist",
                            "variable"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "item in enumerate(updatelist)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_860": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_863": {
                "*inputs": {
                    "value": "*self.applyStatsEigen(dequeue_op())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "greater_886": {
                "x": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_257": {
                "shape": {
                    "value": "[fpropFactor_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_273": {
                "diagonal": {
                    "value": "tf.ones([bpropFactor.get_shape()[-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_367": {
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(fpropFactor, ksizes=[1, convkernel_size[0], convkernel_size[1], 1], strides=strides, rates=[1, 1, 1, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flatten_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_407": {
                "tensor": {
                    "value": "bpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bpropFactor * tf.to_float(B)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bpropFactor, [-1, C]) * Oh * Ow",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bpropFactor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_527": {
                "shape": {
                    "value": "[stats_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_729": {
                "x": {
                    "value": "e_tnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(eigVals, eigVals_tnorm_avg)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_factors - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_886": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_239": {
                "diagonal": {
                    "value": "tf.ones([fpropFactor2_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_273": {
                "shape": {
                    "value": "[bpropFactor.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_374": {
                "shape": {
                    "value": "[tf.shape(fpropFactor)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_239": {
                "shape": {
                    "value": "[fpropFactor2_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_379": {
                "input": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "SVD_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / Oh / Ow",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_375": {
                "input": {
                    "value": "fpropFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "SVD_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / Oh / Ow",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1]) / Oh / Ow], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fpropFactor, tf.ones([tf.shape(fpropFactor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/acktr/kfac_utils.py": {
        "tensorflow": {
            "cast_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vec > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_61": {
                "variable": {
                    "value": "eigen_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_62": {
                "variable": {
                    "value": "eigen_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(b_shape[reduce_dim]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "b_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_67": {
                "variable": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : input_mat_clipped",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_14": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_24": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(a_shape[reduce_dim])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "a_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_36": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_67": {
                "x": {
                    "value": "tf.greater(eigen_ratio, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(eigen_ratio, -500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_67": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_67": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-500",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Print_67": {
                "input_": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clipoutNeg(input_mat, threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500)), lambda : input_mat_clipped, lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]))",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "value": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/acktr/utils.py": {
        "tensorflow": {
            "get_variable_7": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_8": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "input_tensor": {
                    "value": "numerator / denominator + tf.log(std2) - tf.log(std1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_4": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_12": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_decay_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_decay_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_19": {
                "value": {
                    "value": "tf.matmul(x, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [size], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_25": {
                "x": {
                    "value": "std1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist1[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_17": {
                "name": {
                    "value": "tf.get_variable_scope().name.split('/')[0] + '_' + 'losses'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(w), weight_decay_fc, name='weight_decay_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_19": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_26": {
                "x": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist2[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_28": {
                "x": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist2[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_5": {
                "value": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_8": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_12": {
                "t": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_17": {
                "value": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/distributions.py": {
        "tensorflow": {
            "get_default_session_328": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_328": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "pd.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{M: Mval}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pi/logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_186": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_187": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - tf.reduce_max(other.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_188": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_194": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_195": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_228": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_231": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pi/logstd', shape=[1, self.size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.split(axis=len(flat.shape) - 1, num_or_size_splits=2, value=flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_255": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_52": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_54": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_158": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_162": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_175": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_180": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "p0 * (a0 - tf.log(z0) - a1 + tf.log(z1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_197": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_200": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_214": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_216": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_218": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_220": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_242": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_244": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_262": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.to_float(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_271": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_184": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_185": {
                "input_tensor": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_193": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_199": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_212": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_220": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_239": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_264": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_268": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_270": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_271": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits), dtype=self.logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_295": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_200": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits), dtype=self.logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_208": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3]",
                            "List"
                        ],
                        [
                            "nvec",
                            "Method Argument"
                        ],
                        [
                            "nvec",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_266": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_191": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_197": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_237": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_238": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_246": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_264": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_214": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_237": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_238": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_242": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/input.py": {
        "tensorflow": {
            "placeholder_31": {
                "shape": {
                    "value": "(batch_size,) + ob_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob_space.dtype",
                            "Attribute"
                        ],
                        [
                            "np.uint8",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Ob'",
                            "Method Argument"
                        ],
                        [
                            "'Ob'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_55": {
                "x": {
                    "value": "tf.one_hot(placeholder, ob_space.n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_55": {
                "indices": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_placeholder(ob_space, batch_size, name)",
                            "Call"
                        ],
                        [
                            "tf.cast(placeholder, tf.int32)",
                            "Call"
                        ],
                        [
                            "placeholder",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "ob_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_57": {
                "x": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_placeholder(ob_space, batch_size, name)",
                            "Call"
                        ],
                        [
                            "tf.cast(placeholder, tf.int32)",
                            "Call"
                        ],
                        [
                            "placeholder",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_59": {
                "variable": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_placeholder(ob_space, batch_size, name)",
                            "Call"
                        ],
                        [
                            "tf.cast(placeholder, tf.int32)",
                            "Call"
                        ],
                        [
                            "placeholder",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_61": {
                "values": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.to_float(tf.one_hot(placeholder[..., i], ob_space.nvec[i])) for i in range(placeholder.shape[-1])]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_60": {
                "x": {
                    "value": "tf.one_hot(placeholder[..., i], ob_space.nvec[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_60": {
                "indices": {
                    "value": "placeholder[..., i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "ob_space.nvec[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_79": {
                "seed": {
                    "value": "myseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i + 1000 * rank if i is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/models.py": {
        "tensorflow": {
            "clip_by_value_202": {
                "variable": {
                    "value": "norm_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(x - rms.mean) / rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min(clip_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max(clip_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_50": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_117": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, 2 * nlstm]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, 2 * nlstm]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "unscaled_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unscaled_images",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_187": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_68": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_73": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "stepsize",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_random_seed_66": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_76": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_85": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_86": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_70": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_70": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/mpi_adam_optimizer.py": {
        "tensorflow": {
            "concat_13": {
                "variable": {
                    "value": "flat_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(g, (-1,)) for (g, v) in grads_and_vars]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_25": {
                "variable": {
                    "value": "avg_flat_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_collect_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_collect_grads",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[flat_grad]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_27": {
                "variable": {
                    "value": "avg_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg_flat_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(_collect_grads, [flat_grad], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(np.prod(s)) for s in shapes]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_12": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_29": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.to_float(self._sumsq / self._count) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_30": {
                "x": {
                    "value": "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_15": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_20": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_25": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_30": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_36": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_37": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_38": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/mpi_util.py": {
        "tensorflow": {
            "assign_24": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "returned_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(var.shape, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/policies.py": {
        "tensorflow": {
            "clip_by_value_184": {
                "variable": {
                    "value": "norm_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(x - rms.mean) / rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min(clip_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max(clip_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_37": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "variable": {
                    "value": "vf_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "vf_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy_latent",
                            "variable"
                        ],
                        [
                            "_v_net(encoded_x)",
                            "Call"
                        ],
                        [
                            "vf_latent if vf_latent is not None else latent",
                            "IfExp"
                        ],
                        [
                            "tf.layers.flatten(vf_latent)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_44": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(latent)",
                            "Call"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/running_mean_std.py": {
        "tensorflow": {
            "placeholder_45": {
                "variable": {
                    "value": "self._new_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ],
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self._new_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ],
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self._new_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_55": {
                "variable": {
                    "value": "self.update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[self._var.assign(self._new_var), self._mean.assign(self._new_mean), self._count.assign(self._new_count)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.zeros(shape, 'float64')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "std",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.ones(shape, 'float64')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.full((), epsilon, 'float64')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_61": {
                "var_list": {
                    "value": "[self._mean, self._var, self._count]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_124": {
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tests/envs/mnist_env.py": {
        "tensorflow": {}
    },
    "baselines/common/tests/test_doc_examples.py": {
        "tensorflow": {
            "Session_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tests/test_env_after_learn.py": {
        "tensorflow": {
            "Graph_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tests/test_serialization.py": {
        "tensorflow": {
            "trainable_variables_118": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tests/test_tf_util.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "other",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tests/util.py": {
        "tensorflow": {
            "Graph_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_16": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_46": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_16": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_46": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tf_util.py": {
        "tensorflow": {
            "cond_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_default_session_54": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_229": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_279": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.name",
                            "Attribute"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_322": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_332": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_42": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_64": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_190": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_232": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_250": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_257": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_71": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_73": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variables_initializer_91": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_102": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=axis, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=dtype, shape=shape, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.name",
                            "Attribute"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_253": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{self.theta: theta}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_default_session_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_260": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_340": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_351": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_43": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_44": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_121": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_127": {
                "name": {
                    "value": "summary_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.transpose(tf.reshape(w, [filter_size[0], filter_size[1], -1, 1]), [2, 0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_images": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_norm_231": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_graph_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_45": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_128": {
                "a": {
                    "value": "tf.reshape(w, [filter_size[0], filter_size[1], -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_248": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "variables",
                            "variable"
                        ],
                        [
                            "zip(loaded_params, variables)",
                            "Call"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[filter_size[0], filter_size[1], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_248": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_257": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "variables",
                            "variable"
                        ],
                        [
                            "zip(loaded_params, variables)",
                            "Call"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_233": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "variable"
                        ],
                        [
                            "variables",
                            "variable"
                        ],
                        [
                            "zip(loaded_params, variables)",
                            "Call"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ddpg/ddpg_learner.py": {
        "tensorflow": {
            "reduce_mean_32": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_33": {
                "variable": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_29": {
                "x": {
                    "value": "reduce_var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(x - m)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_63": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.obs0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.obs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.terminals1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + action_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.critic_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "critic_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.param_noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "normalized_obs0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs0, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_110": {
                "variable": {
                    "value": "normalized_obs1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs1, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_170": {
                "variable": {
                    "value": "self.adaptive_policy_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(self.actor_tf - adaptive_actor_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_185": {
                "variable": {
                    "value": "normalized_critic_target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.critic_target, self.ret_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.normalized_critic_tf - normalized_critic_target_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "self.old_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_209": {
                "variable": {
                    "value": "self.old_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_47": {
                "*inputs": {
                    "value": "*soft_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_43": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ],
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ],
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "assign_44": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(1.0 - tau) * target_var + tau * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_131": {
                "t": {
                    "value": "self.normalized_critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_133": {
                "t": {
                    "value": "self.normalized_critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "tf.square(self.actor_tf - adaptive_actor_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_186": {
                "x": {
                    "value": "self.normalized_critic_tf - normalized_critic_target_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_235": {
                "input_tensor": {
                    "value": "self.critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_245": {
                "input_tensor": {
                    "value": "self.actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_58": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var + tf.random_normal(tf.shape(var), mean=0.0, stddev=param_noise_stddev)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_61": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ],
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ],
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "obs_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "ret_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_170": {
                "x": {
                    "value": "self.actor_tf - adaptive_actor_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "input_tensor": {
                    "value": "self.obs_rms.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_251": {
                "input_tensor": {
                    "value": "self.perturbed_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(vars, target_vars)",
                            "Call"
                        ],
                        [
                            "zip(actor.vars, perturbed_actor.vars)",
                            "Call"
                        ],
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ddpg/models.py": {
        "tensorflow": {
            "get_collection_12": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_16": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network_builder(obs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.network_builder(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003), name='output')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.nb_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network_builder(obs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.network_builder(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003), name='output')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network_builder(obs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.network_builder(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003), name='output')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_31": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_45": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/deepq/build_graph.py": {
        "tensorflow": {
            "get_collection_115": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_184": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "U.function([obs_t_input], q_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_189": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_191": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "update_param_noise_threshold_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "update_param_noise_scale_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "reset_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_246": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "param_noise_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "param_noise_threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_threshold",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.05)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "mean_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive))), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_294": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values_perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='perturbed_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_298": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_300": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_381": {
                "variable": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "rew_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "done_mask_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "done",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_385": {
                "variable": {
                    "value": "importance_weights_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_389": {
                "variable": {
                    "value": "q_func_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/q_func'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_393": {
                "variable": {
                    "value": "target_q_func_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/target_q_func'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "variable": {
                    "value": "q_t_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_t * tf.one_hot(act_t_ph, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_413": {
                "variable": {
                    "value": "weighted_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "importance_weights_ph * errors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_430": {
                "variable": {
                    "value": "update_target_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_target_expr",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_378": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ],
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_401": {
                "variable": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_tp1_using_online_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='q_func', reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_402": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1 * tf.one_hot(q_tp1_best_using_online_net, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_404": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='target_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_186": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_187": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_192": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "group_272": {
                "*inputs": {
                    "value": "*perturb_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_283": {
                "variable": {
                    "value": "update_scale_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mean_kl < param_noise_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale * 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale / 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_290": {
                "pred": {
                    "value": "update_param_noise_threshold_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_param_noise_threshold_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_threshold",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_295": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_296": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_301": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_304": {
                "pred": {
                    "value": "reset_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='reset')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : perturb_vars(original_scope='q_func', perturbed_scope='perturbed_q_func')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*[])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_305": {
                "pred": {
                    "value": "update_param_noise_scale_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='update_param_noise_scale')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : update_scale()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Variable(0.0, trainable=False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stop_gradient_411": {
                "input": {
                    "value": "q_t_selected_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rew_t_ph + gamma * q_tp1_best_masked",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_181": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_188": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_246": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_247": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_248": {
                "value": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_266": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var + tf.random_normal(shape=tf.shape(var), mean=0.0, stddev=param_noise_scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_269": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ],
                        [
                            "zip(sorted(q_func_vars, key=lambda v: v.name), sorted(target_q_func_vars, key=lambda v: v.name))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_279": {
                "logits": {
                    "value": "q_values_adaptive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='adaptive_q_func')",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_282": {
                "control_inputs": {
                    "value": "[perturb_for_adaption]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_297": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_396": {
                "indices": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='action')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_279": {
                "x": {
                    "value": "tf.nn.softmax(q_values_adaptive)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_304": {
                "*inputs": {
                    "value": "*[]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_305": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_402": {
                "indices": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(q_tp1_using_online_net, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ],
                        [
                            "num_actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_420": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_norm_clipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_266": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_vars, all_perturbed_vars)",
                            "Call"
                        ],
                        [
                            "zip(sorted(q_func_vars, key=lambda v: v.name), sorted(target_q_func_vars, key=lambda v: v.name))",
                            "Call"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/deepq/deepq.py": {
        "tensorflow": {
            "Session_34": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_206": {
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_251": {
                "checkpoint_dir": {
                    "value": "td",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path or td",
                            "BoolOp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/deepq/experiments/custom_cartpole.py": {
        "tensorflow": {
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_34": {
                "learning_rate": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/deepq/models.py": {
        "tensorflow": {
            "flatten_46": {
                "variable": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "input_",
                            "variable"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_65": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_113": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(input_placeholder)",
                            "Call"
                        ],
                        [
                            "layers.flatten(latent)",
                            "Call"
                        ],
                        [
                            "latent[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "action_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_134": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/gail/adversary.py": {
        "tensorflow": {
            "reduce_mean_33": {
                "variable": {
                    "value": "generator_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.sigmoid(generator_logits) < 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "expert_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.sigmoid(expert_logits) > 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_38": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(generator_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=generator_logits, labels=tf.zeros_like(generator_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(generator_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_40": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(expert_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=expert_logits, labels=tf.ones_like(expert_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(expert_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[generator_logits, expert_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logit_bernoulli_entropy(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.generator_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.generator_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.actions_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.expert_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.expert_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.actions_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_13": {
                "features": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs, acs_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_77": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_33": {
                "x": {
                    "value": "tf.nn.sigmoid(generator_logits) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_34": {
                "x": {
                    "value": "tf.nn.sigmoid(expert_logits) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_51": {
                "x": {
                    "value": "1 - tf.nn.sigmoid(generator_logits) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_17": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([generator_logits, expert_logits], 0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(p_h2, 1, activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_38": {
                "input": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_40": {
                "input": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_33": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_34": {
                "x": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_51": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/gail/behavior_clone.py": {
        "tensorflow": {
            "reduce_mean_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(ac - pi.ac)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_55": {
                "x": {
                    "value": "ac - pi.ac",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/gail/gail-eval.py": {
        "tensorflow": {
            "latest_checkpoint_69": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_checkpoint_dir(checkpoint_list, limit, prefix=prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/gail/mlp_policy.py": {
        "tensorflow": {
            "clip_by_value_36": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(last_out, hid_size, 'vffc%i' % (i + 1), weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(last_out, hid_size, 'polfc%i' % (i + 1), weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_69": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_72": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/gail/statistics.py": {
        "tensorflow": {
            "merge_32": {
                "variable": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.scalar_summaries + self.histogram_summaries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_23": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_28": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/gail/trpo_mpi.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_139": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_157": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.startswith('pi/pol') or v.name.startswith('pi/logstd')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_166": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "square_137": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_236": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_164": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_166": {
                "input_tensor": {
                    "value": "g * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_169": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_session_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/her/actor_critic.py": {
        "tensorflow": {
            "concat_31": {
                "variable": {
                    "value": "input_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "input_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g, self.pi_tf / self.max_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "input_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g, self.u_tf / self.max_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "Q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "x": {
                    "value": "nn(input_pi, [self.hidden] * self.layers + [self.dimu])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/her/ddpg.py": {
        "tensorflow": {
            "get_collection_307": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_312": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "batch_tf[r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_tf['r']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_358": {
                "variable": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "batch_tf['r'] + self.gamma * target_Q_pi_tf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "*clip_range",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "self.Q_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.stop_gradient(target_tf) - self.main.Q_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_379": {
                "variable": {
                    "value": "Q_grads_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.Q_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._vars('main/Q')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_380": {
                "variable": {
                    "value": "pi_grads_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.pi_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._vars('main/pi')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_362": {
                "variable": {
                    "value": "maskMain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.boolean_mask(self.main.Q_tf > self.main.Q_pi_tf, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_364": {
                "variable": {
                    "value": "self.cloning_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.boolean_mask(tf.boolean_mask(self.main.pi_tf, mask), maskMain, axis=0) - tf.boolean_mask(tf.boolean_mask(batch_tf['u'], mask), maskMain, axis=0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_402": {
                "var_list": {
                    "value": "self._global_vars('')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "o_stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "g_stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_359": {
                "x": {
                    "value": "tf.stop_gradient(target_tf) - self.main.Q_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_370": {
                "variable": {
                    "value": "self.cloning_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.boolean_mask(self.main.pi_tf, mask) - tf.boolean_mask(batch_tf['u'], mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_443": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "boolean_mask_362": {
                "tensor": {
                    "value": "self.main.Q_tf > self.main.Q_pi_tf",
                    "type": "Compare",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros(self.batch_size - self.demo_batch_size), np.ones(self.demo_batch_size)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_364": {
                "x": {
                    "value": "tf.boolean_mask(tf.boolean_mask(self.main.pi_tf, mask), maskMain, axis=0) - tf.boolean_mask(tf.boolean_mask(batch_tf['u'], mask), maskMain, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_365": {
                "input_tensor": {
                    "value": "self.main.Q_pi_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_366": {
                "input_tensor": {
                    "value": "tf.square(self.main.pi_tf / self.max_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_359": {
                "input": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(batch_tf['r'] + self.gamma * target_Q_pi_tf, *clip_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_366": {
                "x": {
                    "value": "self.main.pi_tf / self.max_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_370": {
                "x": {
                    "value": "tf.boolean_mask(self.main.pi_tf, mask) - tf.boolean_mask(batch_tf['u'], mask)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_371": {
                "input_tensor": {
                    "value": "self.main.Q_pi_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_372": {
                "input_tensor": {
                    "value": "tf.square(self.main.pi_tf / self.max_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_376": {
                "input_tensor": {
                    "value": "self.main.Q_pi_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_377": {
                "input_tensor": {
                    "value": "tf.square(self.main.pi_tf / self.max_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_364": {
                "tensor": {
                    "value": "batch_tf['u']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros(self.batch_size - self.demo_batch_size), np.ones(self.demo_batch_size)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_372": {
                "x": {
                    "value": "self.main.pi_tf / self.max_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_377": {
                "x": {
                    "value": "self.main.pi_tf / self.max_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "boolean_mask_370": {
                "tensor": {
                    "value": "batch_tf['u']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros(self.batch_size - self.demo_batch_size), np.ones(self.demo_batch_size)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/her/normalizer.py": {
        "tensorflow": {
            "get_variable_31": {
                "variable": {
                    "value": "self.sum_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_sum.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.sumsq_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_sumsq.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.count_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_count.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "std",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.count_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.sum_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.sumsq_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sumsq_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_50": {
                "variable": {
                    "value": "self.update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.count_tf.assign_add(self.count_pl)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.sum_tf.assign_add(self.sum_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_55": {
                "variable": {
                    "value": "self.recompute_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.assign(self.mean, self.sum_tf / self.count_tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.assign(self.std, tf.sqrt(tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_77": {
                "t": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_56": {
                "ref": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sum_tf / self.count_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_57": {
                "ref": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sqrt(tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_125": {
                "shape": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "x": {
                    "value": "tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_57": {
                "x": {
                    "value": "tf.square(self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_58": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "self.sum_tf / self.count_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/her/util.py": {
        "tensorflow": {
            "concat_53": {
                "values": {
                    "value": "[tf.reshape(grad, [U.numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=size, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=reuse, name=name + '_' + str(i))",
                            "Call"
                        ],
                        [
                            "activation(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size in enumerate(layers_sizes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=size, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=reuse, name=name + '_' + str(i))",
                            "Call"
                        ],
                        [
                            "activation(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "tf.cast(source, target.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "episode_batch['u'].shape",
                            "Attribute"
                        ],
                        [
                            "[1] * (dim - 1) + [-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_140": {
                "x": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "target.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[U.numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/logger.py": {
        "tensorflow": {
            "summary_iterator_470": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_bytes_155": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/ppo1/cnn_policy.py": {
        "tensorflow": {
            "dense_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_53": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_38": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_26": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_32": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 256, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID'))",
                            "Call"
                        ],
                        [
                            "U.flattenallbut0(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.dense(x, 512, name='lin', kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "lin",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo1/mlp_policy.py": {
        "tensorflow": {
            "placeholder_48": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_by_value_26": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_56": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_58": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "pdtype.param_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_30": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "final",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_29": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_35": {
                "inputs": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "variable"
                        ],
                        [
                            "tf.nn.tanh(tf.layers.dense(last_out, hid_size, name='fc%i' % (i + 1), kernel_initializer=U.normc_initializer(1.0)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'fc%i' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo1/pposgd_simple.py": {
        "tensorflow": {
            "placeholder_96": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_111": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_113": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(pi.pd.logp(ac) - oldpi.pd.logp(ac))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "tf.minimum(surr1, surr2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_115": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_114": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_124": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/microbatched_model.py": {
        "tensorflow": {
            "placeholder_28": {
                "dtype": {
                    "value": "g.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "g.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/model.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "self.ADV",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.OLDNEGLOGPAC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.OLDVPRED",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.CLIPRANGE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_68": {
                "variable": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_70": {
                "variable": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpredclipped - R",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_75": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "OLDNEGLOGPAC - neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(pg_losses, pg_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "clipfrac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.greater(tf.abs(ratio - 1.0), CLIPRANGE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_92": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "ppo2_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_126": {
                "variable": {
                    "value": "global_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "self.trainer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_104": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*grads_and_var)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, max_grad_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_grad_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "ppo2_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_66": {
                "t": {
                    "value": "train_model.vf - OLDVPRED",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-CLIPRANGE",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "input_tensor": {
                    "value": "tf.maximum(vf_losses1, vf_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_80": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(OLDNEGLOGPAC - neglogpac)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + CLIPRANGE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_83": {
                "x": {
                    "value": "pg_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * ratio",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pg_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ADV * tf.clip_by_value(ratio, 1.0 - CLIPRANGE, 1.0 + CLIPRANGE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "tf.square(neglogpac - OLDNEGLOGPAC)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_85": {
                "x": {
                    "value": "tf.greater(tf.abs(ratio - 1.0), CLIPRANGE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_72": {
                "x": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpred - R)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpredclipped - R)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_84": {
                "x": {
                    "value": "neglogpac - OLDNEGLOGPAC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_85": {
                "x": {
                    "value": "tf.abs(ratio - 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "CLIPRANGE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_85": {
                "x": {
                    "value": "ratio - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/ppo2/test_microbatches.py": {
        "tensorflow": {
            "Graph_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/run.py": {
        "tensorflow": {
            "ConfigProto_107": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_mpi/trpo_mpi.py": {
        "tensorflow": {
            "placeholder_183": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_184": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_190": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oldpi.pd.kl(pi.pd)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_191": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi.pd.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_194": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vf - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_196": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_197": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_215": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pi_trainable_variables('pi')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_224": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_collection_398": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_401": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "oldpi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_194": {
                "x": {
                    "value": "pi.vf - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_161": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "cpus_per_worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "cpus_per_worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "reshape_222": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "g * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_227": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_replay/acktr_cont.py": {
        "tensorflow": {
            "Variable_100": {
                "variable": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(np.array(0.01))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "stepsize",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Coordinator_105": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_165": {
                "config": {
                    "value": "tf.ConfigProto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_session_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_replay/acktr_disc.py": {
        "tensorflow": {}
    },
    "baselines/trpo_replay/kfac_utils.py": {
        "tensorflow": {
            "cast_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vec > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_61": {
                "variable": {
                    "value": "eigen_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_62": {
                "variable": {
                    "value": "eigen_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(b_shape[reduce_dim]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "b_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_67": {
                "variable": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : input_mat_clipped",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_14": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_24": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(a_shape[reduce_dim])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "a_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_36": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_67": {
                "x": {
                    "value": "tf.greater(eigen_ratio, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(eigen_ratio, -500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_67": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_67": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-500",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Print_67": {
                "input_": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clipoutNeg(input_mat, threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500)), lambda : input_mat_clipped, lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]))",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "value": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_replay/launch_test.py": {
        "tensorflow": {
            "reset_default_graph_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_replay/policies.py": {
        "tensorflow": {}
    },
    "baselines/trpo_replay/run_mujoco.py": {
        "tensorflow": {}
    },
    "baselines/trpo_replay/utils.py": {
        "tensorflow": {
            "get_variable_9": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_10": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "numerator / denominator + tf.log(std2) - tf.log(std1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_14": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_decay_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_decay_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_21": {
                "value": {
                    "value": "tf.matmul(x, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [size], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_27": {
                "x": {
                    "value": "std1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist1[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_19": {
                "name": {
                    "value": "tf.get_variable_scope().name.split('/')[0] + '_' + 'losses'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(w), weight_decay_fc, name='weight_decay_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_21": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_28": {
                "x": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist2[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_30": {
                "x": {
                    "value": "std2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dist2[:, action_size:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_7": {
                "value": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_10": {
                "value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_14": {
                "t": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_19": {
                "value": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/trpo_replay/value_functions.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ob_dim * 2 + ac_dim * 2 + 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "vtarg_n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "vtarg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "kp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_18": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dense(X, 64, 'h1', weight_init=U.normc_initializer(1.0), bias_init=0, weight_loss_dict=wd_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_19": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(dense(X, 64, 'h1', weight_init=U.normc_initializer(1.0), bias_init=0, weight_loss_dict=wd_dict))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h1, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_20": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dense(h1, 64, 'h2', weight_init=U.normc_initializer(1.0), bias_init=0, weight_loss_dict=wd_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_21": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(dense(h1, 64, 'h2', weight_init=U.normc_initializer(1.0), bias_init=0, weight_loss_dict=wd_dict))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_24": {
                "variable": {
                    "value": "wd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "vf_losses",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "AdamOptimizer_32": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_25": {
                "input_tensor": {
                    "value": "tf.square(vpred_n - vtarg_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_25": {
                "inputs": {
                    "value": "wd_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('vf_losses', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "tf.square(vpred_n - tf.stop_gradient(sample_vpred_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_23": {
                "input": {
                    "value": "vpred_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense(h2, 1, 'hfinal', weight_init=U.normc_initializer(1.0), bias_init=0, weight_loss_dict=wd_dict)[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_25": {
                "x": {
                    "value": "vpred_n - vtarg_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "vpred_n - tf.stop_gradient(sample_vpred_n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_26": {
                "input": {
                    "value": "sample_vpred_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vpred_n + tf.random_normal(tf.shape(vpred_n))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}