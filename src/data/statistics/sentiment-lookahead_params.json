{
    "train_emotion.py": {
        "sklearn": {
            "f1_score_107": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_61": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "emotions.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_30": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_101": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(dialogs, lens)",
                            "Call"
                        ],
                        [
                            "model(dialogs, lens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(dialogs, lens)",
                            "Call"
                        ],
                        [
                            "model(dialogs, lens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_multitask.py": {
        "sklearn": {
            "f1_score_192": {
                "variable": {
                    "value": "emo_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "emo_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(emo_preds)",
                            "Call"
                        ],
                        [
                            "np.hstack(np.array(emo_preds))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "emo_golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(emo_golds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_82": {
                "variable": {
                    "value": "emo_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "emotions.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ReduceLROnPlateau_48": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=constant.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=constant.lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_30": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_179": {
                "variable": {
                    "value": "emo_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emo_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(dialogs, lens, targets, emotions=emotions, mode='clf')",
                            "Call"
                        ],
                        [
                            "emo_logits.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_79": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emo_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(dialogs, lens, targets, emotions=emotions, mode='clf')",
                            "Call"
                        ],
                        [
                            "emo_logits.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_181": {
                "input": {
                    "value": "emo_logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "input": {
                    "value": "emo_logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_rl.py": {
        "sklearn": {
            "f1_score_503": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_516": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_535": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "torch.sigmoid(clf_logits.squeeze()) > 0.5",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ],
                        [
                            "np.hstack(np.array(preds))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_107": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "sentiments_b.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_113": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "sentiments_b.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_121": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "sentiments_b.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "BCEWithLogitsLoss_30": {
                "variable": {
                    "value": "clf_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "mle_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "constant.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_32": {
                "variable": {
                    "value": "baseline_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_52": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=constant.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=constant.lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_35": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_37": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((R.detach() - R_g.detach()) * step_loss, dim=1) / dec_lens_var.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_397": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant.lambda_aux * R_l + R_s",
                            "BinOp"
                        ],
                        [
                            "constant.lambda_aux * R_l + R_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_99": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(rl_loss * arl, dim=1) / dec_lens_var.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_151": {
                "variable": {
                    "value": "mle_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(mle_loss * arl_c, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_175": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant.lambda_aux * R_l + R_s",
                            "BinOp"
                        ],
                        [
                            "constant.lambda_aux * R_l + R_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_385": {
                "input": {
                    "value": "clf_logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_392": {
                "variable": {
                    "value": "R_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(R_i.transpose(0, 1).contiguous(), dim=1) / dec_lens_var.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_140": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((R.detach() - rs.detach()) * step_loss, dim=1) / dec_lens_var.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_177": {
                "input": {
                    "value": "R_l",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_178": {
                "input": {
                    "value": "R_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "R_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R_i.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(R_i, dim=1) / dec_lens_var.float())",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(R_i.transpose(0, 1).contiguous(), dim=1) / dec_lens_var.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_381": {
                "input": {
                    "value": "R_l",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_382": {
                "input": {
                    "value": "R_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "(R.detach() - R_g.detach()) * step_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "arl.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_151": {
                "input": {
                    "value": "mle_loss * arl_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_393": {
                "input": {
                    "value": "R_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R_i.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(R_i, dim=1) / dec_lens_var.float())",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(R_i.transpose(0, 1).contiguous(), dim=1) / dec_lens_var.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_99": {
                "input": {
                    "value": "rl_loss * arl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "input": {
                    "value": "clf_logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_392": {
                "input": {
                    "value": "R_i.transpose(0, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "input": {
                    "value": "clf_logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "(R.detach() - rs.detach()) * step_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_128": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((R.detach() * R_i.detach() - rs.detach()) * step_loss, dim=1) / dec_lens_var.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "R_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(R_i, dim=1) / dec_lens_var.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_120": {
                "input": {
                    "value": "clf_logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "(R.detach() * R_i.detach() - rs.detach()) * step_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "R_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R_i.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(R_i, dim=1) / dec_lens_var.float())",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sum(R_i.transpose(0, 1).contiguous(), dim=1) / dec_lens_var.float())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_sentiment.py": {
        "sklearn": {
            "f1_score_239": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traces.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(traces > 0.5).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "traces.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(traces > 0.5).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(logits) > 0.5",
                            "Compare"
                        ],
                        [
                            "logits > 0.5",
                            "Compare"
                        ],
                        [
                            "F.sigmoid(logits) > 0.5",
                            "Compare"
                        ],
                        [
                            "logits > 0.5",
                            "Compare"
                        ],
                        [
                            "F.sigmoid(logits) > 0.5",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_69": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traces.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(traces > 0.5).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "traces.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(traces > 0.5).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_117": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "traces.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(traces > 0.5).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "traces.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(traces > 0.5).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(golds)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_187": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "sentiments.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "BCEWithLogitsLoss_135": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_24": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_26": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_96": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_149": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "model(sentences, lens).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "model(sentences, lens).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_111": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "model(sentences, lens).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "model(sentences, lens).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_185": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "model(sentences, lens).squeeze()",
                            "Call"
                        ],
                        [
                            "logits.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "model((input_ids, segment_ids, input_masks)).squeeze()",
                            "Call"
                        ],
                        [
                            "model(sentences, lens).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/embedding_metrics.py": {
        "sklearn": {},
        "torch": {}
    },
    "interact.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "dataset": {
                    "value": "SingleDataset(lang, c)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Embedding_70": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_dataset.lang)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant.D",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(train_dataset.fasttext).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "train_dataset.fasttext",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/binary_clf.py": {
        "torch": {
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "constant.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/commons/attention.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.score(K, Q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.score(K, Q), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_c(torch.cat((c, Q), dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_52": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "(c, Q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_54": {
                "input": {
                    "value": "self.W(Q)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_58": {
                "input": {
                    "value": "self.v.repeat(B, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "E.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(K, Q.repeat(1, L, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/commons/initializer.py": {
        "torch": {}
    },
    "models/commons/reduce_state.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/commons/vae_lib.py": {
        "torch": {
            "rand_25": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logq.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_56": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q * (logq - logp)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_29": {
                "input": {
                    "value": "(logits + noise) / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_57": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(q * (logq - logp), dim=dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "prior_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "prior_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_68": {
                "input": {
                    "value": "torch.pow(prior_mu - recog_mu, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_69": {
                "input": {
                    "value": "torch.exp(recog_logvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_71": {
                "input": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.mean(loss, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_26": {
                "input": {
                    "value": "noise + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_68": {
                "input": {
                    "value": "prior_mu - recog_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_68": {
                "input": {
                    "value": "prior_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(1)",
                            "Call"
                        ],
                        [
                            "prior_logvar.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_69": {
                "input": {
                    "value": "prior_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(1)",
                            "Call"
                        ],
                        [
                            "prior_logvar.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_70": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + (recog_logvar - prior_logvar)",
                            "BinOp"
                        ],
                        [
                            "loss - torch.div(torch.exp(recog_logvar), torch.exp(prior_logvar))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_37": {
                "input": {
                    "value": "logvar / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/decoders/rnn_decoder.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_32": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_36": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_38": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/encoders/rnn_encoder.py": {
        "torch": {
            "Dropout_31": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "constant.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.soft_embed(logits).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x, lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.embedding(seq)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_52": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_28": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_34": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_36": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden[0], hidden[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden[0], hidden[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/linear_clf.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/multi_seq2seq.py": {
        "torch": {
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "self.gen_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "constant.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "gen_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_40": {
                "variable": {
                    "value": "self.clf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.reduce_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.emo_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_224": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_current_state() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_230": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_t.view(B, K, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(y_t, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "select_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "select_indices_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_42": {
                "variable": {
                    "value": "self.clf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_74": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_175": {
                "input": {
                    "value": "F.softmax(top_k_top_p_filtering(prob / constant.tau, top_k=constant.topk_size), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_74": {
                "input": {
                    "value": "filtered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(y_t.data / constant.tau, top_k=constant.topk_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "input": {
                    "value": "top_k_top_p_filtering(prob / constant.tau, top_k=constant.topk_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/rl_seq.py": {
        "torch": {
            "Linear_42": {
                "variable": {
                    "value": "self.clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.baseline_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.curiosity_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.H, self.H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.curiosity_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "constant.CD * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.curiosity_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(constant.CD + self.D, self.H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_383": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_384": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_385": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.reduce_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_155": {
                "variable": {
                    "value": "step_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_288": {
                "variable": {
                    "value": "step_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "step_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_masks, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_289": {
                "variable": {
                    "value": "dec_lens_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(step_masks, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_423": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_dec_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SELU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "p": {
                    "value": "constant.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "constant.CD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SELU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "constant.CD + self.D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SELU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "p": {
                    "value": "constant.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "constant.CD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SELU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_150": {
                "variable": {
                    "value": "curiosity_inverse_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "constant.eou_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "curiosity_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "constant.CD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "curiosity_forwards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "constant.CD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "curiosity_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "R_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_183": {
                "variable": {
                    "value": "gold_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x_t.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "variable": {
                    "value": "gold_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_190": {
                "variable": {
                    "value": "step_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_mask - (x_t == constant.eou_idx).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_300": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_301": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_302": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_455": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_108": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_110": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(y_t.data / tau, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_110": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_118": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_217": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sentences)",
                            "Call"
                        ],
                        [
                            "len(sentences)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "padded_sentences[b, :lens[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sents[b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_184": {
                "input": {
                    "value": "gold_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(y_t, 1, x_t.unsqueeze(1)).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "padded_sentences[b, :lens[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sents[b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_276": {
                "*size": {
                    "value": "(B, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_315": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_249": {
                "*size": {
                    "value": "(B, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_314": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_321": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_336": {
                "variable": {
                    "value": "ctx_sentiments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clf_logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_423": {
                "input": {
                    "value": "filtered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "tensors": {
                    "value": "[curiosity_feature, self.decoder.embedding(xs[t]).detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_327": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_334": {
                "variable": {
                    "value": "gen_sentiments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aux_reward.predict_prob((input_ids, segment_ids, input_masks)).squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_355": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_356": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_357": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "(prev_curiosity_feature, curiosity_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_205": {
                "input": {
                    "value": "(curiosity_feature - curiosity_forward).norm(p=2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_340": {
                "input": {
                    "value": "R_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx_sentiments - gen_sentiments",
                            "BinOp"
                        ],
                        [
                            "-torch.pow(R_s, 2)",
                            "UnaryOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_347": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_367": {
                "variable": {
                    "value": "arl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "arl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reward.predict_prob((input_ids, segment_ids, input_masks))",
                            "Call"
                        ],
                        [
                            "torch.clamp(arl, min=0.5)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_370": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "input": {
                    "value": "filtered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "input": {
                    "value": "y_t.data / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "input": {
                    "value": "filtered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(y_t.data / tau, top_k=constant.topk_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_373": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_376": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_379": {
                "tensors": {
                    "value": "step_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/seq2seq.py": {
        "torch": {
            "zeros_81": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_len",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_len",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.reduce_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.H * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_current_state() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_199": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_t.view(B, K, -1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(y_t, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "select_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "select_indices_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "multinomial_60": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_137": {
                "input": {
                    "value": "F.softmax(top_k_top_p_filtering(prob / constant.tau, top_k=constant.topk_size), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_60": {
                "input": {
                    "value": "filtered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(y_t.data / constant.tau, top_k=constant.topk_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "input": {
                    "value": "top_k_top_p_filtering(prob / constant.tau, top_k=constant.topk_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sentiment_tracer.py": {
        "torch": {
            "stack_77": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_78": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_79": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "sentiments",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentiments)[sort]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TraceDataset(mode='targets', split=constant.split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn(cuda=cuda, use_trace=use_trace)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_165": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "traces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(traces)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "padded_sentences[b, :sentence_lens[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentences[b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_209": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_dataset.lang)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant.D",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_107": {
                "*size": {
                    "value": "(B, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(train_dataset.fasttext).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "model.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "train_dataset.fasttext",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "test_dataloader.py": {
        "torch": {}
    },
    "train_seq2seq.py": {
        "torch": {
            "CrossEntropyLoss_25": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "constant.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_46": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=constant.lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=constant.lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_150": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "constant.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_29": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "constant.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam.py": {
        "torch": {
            "log_softmax_169": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam.t.distributions.normal.Normal(1.0, 2).sample((V,))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=0)",
                            "Call"
                        ],
                        [
                            "beam.t.Tensor([0.35, 0.3, 0.2, 0.1, 0.05])",
                            "Call"
                        ],
                        [
                            "probs.repeat(beam.size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_133": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam_omt.py": {
        "torch": {
            "log_softmax_350": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam.tt.distributions.normal.Normal(1.0, 2).sample((V,))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(probs, dim=0)",
                            "Call"
                        ],
                        [
                            "beam.tt.Tensor([0.35, 0.3, 0.2, 0.1, 0.05])",
                            "Call"
                        ],
                        [
                            "probs.repeat(beam.size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_307": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_307": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_252": {
                "input": {
                    "value": "beam.attn[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_300": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_300": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam_ptr.py": {
        "torch": {
            "stack_142": {
                "variable": {
                    "value": "c_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_154": {
                "variable": {
                    "value": "(topk_log_probs, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "constant.beam_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_149": {
                "variable": {
                    "value": "coverage_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_coverage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "tensors": {
                    "value": "all_state_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/constant.py": {
        "torch": {}
    },
    "utils/dataset.py": {
        "torch": {
            "DataLoader_104": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'empathetic-dialogue'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn(mode=dataset.mode, cuda=cuda, embeddings_cpu=embeddings_cpu, pad_idx=pad_idx, V=len(dataset.lang), use_emotion=dataset.use_emotion, use_sentiment=dataset.use_sentiment)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "emotions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(emotions)[sort]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "padded_dialogs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, LD)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "padded_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, LT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "padded_dialogs[b, :lens[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(dialogs[b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "padded_targets[b, :target_lens[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(targets[b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "emotions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(emotions)[sort]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "sentiments",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentiments)[sort]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_160": {
                "*size": {
                    "value": "(B, LD)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_161": {
                "*size": {
                    "value": "(B, LT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/masked_cross_entropy.py": {
        "torch": {
            "arange_9": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_36": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_40": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/sentiment_dataset.py": {
        "torch": {
            "DataLoader_58": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'sst'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn(cuda=cuda, bert=dataset.use_bert, pad_idx=pad_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "sentiments",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentiments)[sort]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_74": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_75": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "sentiments",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentiments)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "padded_sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "padded_sentences[b, :sentence_lens[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentences[b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "(B, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "tensor_201": {
                "variable": {
                    "value": "input_ids_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bert_tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "input_mask_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "segment_id_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids_batch.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_236": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bert_tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids)",
                            "Call"
                        ],
                        [
                            "input_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_237": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_masks)",
                            "Call"
                        ],
                        [
                            "input_masks.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_238": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(segment_ids)",
                            "Call"
                        ],
                        [
                            "segment_ids.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Name"
                        ],
                        [
                            "'trained/{}.{}.{}.{}.{}.{}.{:.4f}.{}'",
                            "Constant"
                        ],
                        [
                            "save_path.format(constant.data, constant.task, constant.model, constant.H, constant.lr, constant.attn, metric, score, misc)",
                            "Call"
                        ],
                        [
                            "'ckpt/{}.{}.{}.{}.{}.{}'",
                            "Constant"
                        ],
                        [
                            "save_path.format(constant.data, constant.task, epoch, constant.lr, misc, dt)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_72": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optim.state_dict()}",
                            "Dict"
                        ],
                        [
                            "optim.state.values()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Name"
                        ],
                        [
                            "'trained/{}.{}.{}.{}.{}.{}.{:.4f}.{}'",
                            "Constant"
                        ],
                        [
                            "save_path.format(constant.data, constant.task, constant.model, constant.H, constant.lr, constant.attn, metric, score, misc)",
                            "Call"
                        ],
                        [
                            "'ckpt/{}.{}.{}.{}.{}.{}'",
                            "Constant"
                        ],
                        [
                            "save_path.format(constant.data, constant.task, epoch, constant.lr, misc, dt)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_81": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "padded_sents[b, :lens[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sents[b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_261": {
                "*size": {
                    "value": "(B, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "topk_217": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}