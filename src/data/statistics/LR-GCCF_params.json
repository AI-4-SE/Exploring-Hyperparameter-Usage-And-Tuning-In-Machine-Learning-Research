{
    "code/data_utils.py": {
        "torch": {
            "from_numpy_132": {
                "ndarray": {
                    "value": "np.array(item_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/evaluate.py": {
        "torch": {
            "topk_90": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_i[0][courrent_index:courrent_index + len_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/test_amazons.py": {
        "torch": {
            "DataLoader_234": {
                "variable": {
                    "value": "testing_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testing_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.resData(train_dict=testing_user_set, batch_size=test_batch, num_item=item_num, all_pos=training_user_set)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "optimizer_bpr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_124": {
                "variable": {
                    "value": "self.embed_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "user_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "52643",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_125": {
                "variable": {
                    "value": "self.embed_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "item_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "91599",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding, gcn4_users_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding, gcn4_items_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "g0_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "var_162": {
                "variable": {
                    "value": "g0_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_163": {
                "variable": {
                    "value": "g1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_164": {
                "variable": {
                    "value": "g1_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_165": {
                "variable": {
                    "value": "g2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_166": {
                "variable": {
                    "value": "g2_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_167": {
                "variable": {
                    "value": "g3_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn2_items_embedding) + gcn2_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_168": {
                "variable": {
                    "value": "g3_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn2_items_embedding) + gcn2_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_169": {
                "variable": {
                    "value": "g4_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn4_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn3_items_embedding) + gcn3_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_170": {
                "variable": {
                    "value": "g4_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn4_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn3_items_embedding) + gcn3_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_173": {
                "variable": {
                    "value": "g_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding, gcn4_users_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "var_174": {
                "variable": {
                    "value": "g_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding, gcn4_users_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_176": {
                "variable": {
                    "value": "i0_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "var_177": {
                "variable": {
                    "value": "i0_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_178": {
                "variable": {
                    "value": "i1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_179": {
                "variable": {
                    "value": "i1_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_180": {
                "variable": {
                    "value": "i2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_181": {
                "variable": {
                    "value": "i2_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_182": {
                "variable": {
                    "value": "i3_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn2_users_embedding) + gcn2_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_183": {
                "variable": {
                    "value": "i3_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn2_users_embedding) + gcn2_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_184": {
                "variable": {
                    "value": "i4_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn4_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn3_users_embedding) + gcn3_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_185": {
                "variable": {
                    "value": "i4_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn4_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn3_users_embedding) + gcn3_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_188": {
                "variable": {
                    "value": "i_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding, gcn4_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "var_189": {
                "variable": {
                    "value": "i_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding, gcn4_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_259": {
                "f": {
                    "value": "PATH_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_save_model_base + '/epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_145": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_146": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_148": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_149": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_151": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_152": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_154": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn3_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn2_users_embedding) + gcn2_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_155": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn3_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn2_items_embedding) + gcn2_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/test_gowalla.py": {
        "torch": {
            "DataLoader_239": {
                "variable": {
                    "value": "testing_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testing_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.resData(train_dict=testing_user_set, batch_size=test_batch, num_item=item_num, all_pos=training_user_set)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_245": {
                "variable": {
                    "value": "optimizer_bpr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_124": {
                "variable": {
                    "value": "self.embed_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "user_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29858",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_125": {
                "variable": {
                    "value": "self.embed_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "item_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40981",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "cat_154": {
                "variable": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_158": {
                "variable": {
                    "value": "g0_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "var_159": {
                "variable": {
                    "value": "g0_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_160": {
                "variable": {
                    "value": "g1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_161": {
                "variable": {
                    "value": "g1_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_162": {
                "variable": {
                    "value": "g2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_163": {
                "variable": {
                    "value": "g2_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_164": {
                "variable": {
                    "value": "g3_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn2_items_embedding) + gcn2_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_165": {
                "variable": {
                    "value": "g3_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn2_items_embedding) + gcn2_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_172": {
                "variable": {
                    "value": "g_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "var_173": {
                "variable": {
                    "value": "g_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_175": {
                "variable": {
                    "value": "i0_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "var_176": {
                "variable": {
                    "value": "i0_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_177": {
                "variable": {
                    "value": "i1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_178": {
                "variable": {
                    "value": "i1_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_179": {
                "variable": {
                    "value": "i2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_180": {
                "variable": {
                    "value": "i2_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_181": {
                "variable": {
                    "value": "i3_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn2_users_embedding) + gcn2_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_182": {
                "variable": {
                    "value": "i3_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn3_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn2_users_embedding) + gcn2_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_189": {
                "variable": {
                    "value": "i_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "var_190": {
                "variable": {
                    "value": "i_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_264": {
                "f": {
                    "value": "PATH_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_save_model_base + '/epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_145": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_146": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_148": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_149": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_151": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_152": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_amazons.py": {
        "torch": {
            "DataLoader_175": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.BPRData(train_dict=training_user_set, num_item=item_num, num_ng=5, is_training=True, data_set_count=training_set_count, all_rating=user_rating_set_all)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048 * 300",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "testing_loader_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testing_dataset_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.BPRData(train_dict=testing_user_set, num_item=item_num, num_ng=5, is_training=True, data_set_count=testing_set_count, all_rating=user_rating_set_all)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048 * 300",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "optimizer_bpr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_120": {
                "variable": {
                    "value": "self.embed_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "user_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "52643",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.embed_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "item_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "91599",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding, gcn4_users_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding, gcn4_items_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_156": {
                "variable": {
                    "value": "user",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user",
                    "type": "variable",
                    "possible_values": [
                        [
                            "user.cuda()",
                            "Call"
                        ],
                        [
                            "F.embedding(user, gcn_users_embedding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding, gcn4_users_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_157": {
                "variable": {
                    "value": "item_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item_i.cuda()",
                            "Call"
                        ],
                        [
                            "F.embedding(item_i, gcn_items_embedding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding, gcn4_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_158": {
                "variable": {
                    "value": "item_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item_j.cuda()",
                            "Call"
                        ],
                        [
                            "F.embedding(item_j, gcn_items_embedding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding, gcn4_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_235": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_save_model_base + '/epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_141": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_142": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_144": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_145": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_147": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_148": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_150": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn3_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn2_users_embedding) + gcn2_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_151": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn3_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn2_items_embedding) + gcn2_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/train_gowalla.py": {
        "torch": {
            "DataLoader_176": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.BPRData(train_dict=training_user_set, num_item=item_num, num_ng=5, is_training=True, data_set_count=training_set_count, all_rating=user_rating_set_all)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048 * 512",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "testing_loader_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testing_dataset_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.BPRData(train_dict=testing_user_set, num_item=item_num, num_ng=5, is_training=True, data_set_count=testing_set_count, all_rating=user_rating_set_all)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048 * 512",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "val_loader_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.BPRData(train_dict=val_user_set, num_item=item_num, num_ng=5, is_training=True, data_set_count=val_set_count, all_rating=user_rating_set_all)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048 * 512",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_195": {
                "variable": {
                    "value": "optimizer_bpr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_120": {
                "variable": {
                    "value": "self.embed_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "user_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29858",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.embed_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "item_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40981",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "factor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_157": {
                "variable": {
                    "value": "user",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user",
                    "type": "variable",
                    "possible_values": [
                        [
                            "user.cuda()",
                            "Call"
                        ],
                        [
                            "F.embedding(user, gcn_users_embedding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "gcn_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((users_embedding, gcn1_users_embedding, gcn2_users_embedding, gcn3_users_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_158": {
                "variable": {
                    "value": "item_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item_i.cuda()",
                            "Call"
                        ],
                        [
                            "F.embedding(item_i, gcn_items_embedding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_159": {
                "variable": {
                    "value": "item_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item_j.cuda()",
                            "Call"
                        ],
                        [
                            "F.embedding(item_j, gcn_items_embedding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "gcn_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((items_embedding, gcn1_items_embedding, gcn2_items_embedding, gcn3_items_embedding), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_save_model_base + '/epoch' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_141": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_item.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_142": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_user.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mm_144": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, users_embedding) + items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_145": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn1_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, items_embedding) + users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_147": {
                "input": {
                    "value": "self.user_item_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_items_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.item_user_matrix, gcn1_users_embedding) + gcn1_items_embedding.mul(self.d_j_train)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_148": {
                "input": {
                    "value": "self.item_user_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gcn2_users_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.user_item_matrix, gcn1_items_embedding) + gcn1_users_embedding.mul(self.d_i_train)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}