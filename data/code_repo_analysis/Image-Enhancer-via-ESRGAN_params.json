{
    "enhance.py": {
        "torch": {
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "best_generator_model.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.vgg19_54",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg19_model.features.children())[:35]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.res1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_in, conv_out, kernel_size=(k_size, k_size), stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.res2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_in * 2, conv_out, kernel_size=(k_size, k_size), stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.res3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_in * 3, conv_out, kernel_size=(k_size, k_size), stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.res4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_in * 4, conv_out, kernel_size=(k_size, k_size), stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.res5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_in * 5, conv_out, kernel_size=(k_size, k_size), stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, result]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, result]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, result]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, result]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channels, feature_space, kernel_size=(3, 3), stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.rrsd_sequence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rrsd_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.second_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.upsample_sequence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*upsampling_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_117": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_conv(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.second_conv(rrsd_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channels, init_feature_space, kernel_size=(3, 3), stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.downsize_sequence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsize_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "init_feature_space * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "conv_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_in",
                            "Method Argument"
                        ],
                        [
                            "conv_in",
                            "Method Argument"
                        ],
                        [
                            "conv_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "Method Argument"
                        ],
                        [
                            "conv_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k_size, k_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "conv_in * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "Method Argument"
                        ],
                        [
                            "conv_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k_size, k_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "conv_in * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "Method Argument"
                        ],
                        [
                            "conv_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k_size, k_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "conv_in * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "Method Argument"
                        ],
                        [
                            "conv_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k_size, k_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "conv_in * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "Method Argument"
                        ],
                        [
                            "conv_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k_size, k_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "conv_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_in",
                            "Method Argument"
                        ],
                        [
                            "conv_in",
                            "Method Argument"
                        ],
                        [
                            "conv_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "Method Argument"
                        ],
                        [
                            "conv_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k_size, k_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out",
                            "Method Argument"
                        ],
                        [
                            "conv_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_127": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "init_feature_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_137": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "feature_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_space * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PixelShuffle_105": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_workers",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_workers",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "self.optimizer_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(b1, b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "self.optimizer_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "0.0002",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(b1, b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_tensor_47": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "np.random.randint(0, self.batch_size, 1)",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_101": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b_size, *self.dis.output_shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b_size, *self.dis.output_shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "self.gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_model_directory + '/generator_{}.pt'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "self.dis.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_model_directory + '/discriminator_{}.pt'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "self.optimizer_g.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_model_directory + '/optimizer_g_{}.pt'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "self.optimizer_d.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_model_directory + '/optimizer_d_{}.pt'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}