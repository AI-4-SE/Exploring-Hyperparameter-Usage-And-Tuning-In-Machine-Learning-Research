{
    "src/evaluate.py": {
        "sklearn": {
            "f1_score_54": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_preds[non_zeros] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_truth[non_zeros] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_57": {
                "variable": {
                    "value": "acc2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "binary_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_truth[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "binary_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_preds[non_zeros] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "roc_auc_score_77": {
                "variable": {
                    "value": "aucs",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(num_emo))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "roc_auc_score_138": {
                "variable": {
                    "value": "aucs",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths.view(-1)",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ],
                        [
                            "truths.cpu().detach()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(num_emo))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "accuracy_score_156": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "f1_score_158": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_89": {
                "y_true": {
                    "value": "truths_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truths[:, emo_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, emo_ind]",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sigmoid_75": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.view(-1)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "preds.cpu().detach()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_98": {
                "input": {
                    "value": "preds[i] == truths[i]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f\"cuda:{args['cuda']}\" if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args, 'valid')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(args, 'test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_189": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args['learning_rate'], weight_decay=args['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=args['learning_rate'], weight_decay=args['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "args['patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_192": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_194": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "model.out.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "out_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(model.out.weight)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(model.out_layer.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "model.out.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "out_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(model.out.bias)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(model.out_layer.bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "model.out_layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "out_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(model.out.weight)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(model.out_layer.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "model.out_layer.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "out_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(model.out.bias)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(model.out_layer.bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_200": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.get_pos_weight()",
                            "Call"
                        ],
                        [
                            "pos_weight.to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/config.py": {
        "torch": {}
    },
    "src/dataset.py": {
        "torch": {
            "tensor_9": {
                "variable": {
                    "value": "self.vision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_vision",
                            "variable"
                        ],
                        [
                            "fsl_vision",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_10": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "labels.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "variable": {
                    "value": "self.text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_text",
                            "variable"
                        ],
                        [
                            "fsl_text",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "variable": {
                    "value": "self.audio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_audio",
                            "variable"
                        ],
                        [
                            "fsl_audio",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "self.vision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_vision",
                            "variable"
                        ],
                        [
                            "fsl_vision",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.tolist()",
                            "Call"
                        ],
                        [
                            "zsl_labels",
                            "variable"
                        ],
                        [
                            "fsl_labels",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "self.text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_text",
                            "variable"
                        ],
                        [
                            "fsl_text",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "self.audio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_audio",
                            "variable"
                        ],
                        [
                            "fsl_audio",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "self.vision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_vision",
                            "variable"
                        ],
                        [
                            "fsl_vision",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.tolist()",
                            "Call"
                        ],
                        [
                            "zsl_labels",
                            "variable"
                        ],
                        [
                            "fsl_labels",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "self.text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_text",
                            "variable"
                        ],
                        [
                            "fsl_text",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "self.audio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zsl_audio",
                            "variable"
                        ],
                        [
                            "fsl_audio",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/baselines.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear_in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "hidden_size + sum(hidden_sizes)",
                            "BinOp"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "fused_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X_text, X_audio, X_vision)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.RNNs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RnnModel(input_size=input_size, hidden_size=hidden_sizes[i], num_layers=num_layers, dropout=dropout if num_layers > 1 else 0, batch_first=True, bidirectional=bidirectional) for (i, input_size) in enumerate(input_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear_in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "hidden_size + sum(hidden_sizes)",
                            "BinOp"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.LF_RNNs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RnnModel(input_size=input_size, hidden_size=hidden_sizes[i], num_layers=num_layers, dropout=dropout if num_layers > 1 else 0, batch_first=True, bidirectional=bidirectional) for (i, input_size) in enumerate(input_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(linear_in_size, int(linear_in_size / 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "fused_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X_text, X_audio, X_vision)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.RNNs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RnnModel(input_size=input_size, hidden_size=hidden_sizes[i], num_layers=num_layers, dropout=dropout if num_layers > 1 else 0, batch_first=True, bidirectional=bidirectional) for (i, input_size) in enumerate(input_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(linear_in_size, int(linear_in_size / 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim + dec_hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_213": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((hidden, encoder_outputs), dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "encoder_outputs * attn_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "(output_text, output_audio, output_vision)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "linear_in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "hidden_size + sum(hidden_sizes)",
                            "BinOp"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(linear_in_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "int(linear_in_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "(output_text, output_audio, output_vision, output_fused)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "in_features": {
                    "value": "linear_in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "hidden_size + sum(hidden_sizes)",
                            "BinOp"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ],
                        [
                            "sum(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "linear_in_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(linear_in_size / 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_168": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "int(linear_in_size / 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "(output_text, attn_audio, attn_vision)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/eea.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.affineAudio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.affineVisual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.RNNs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RnnModel(input_size=input_size, hidden_size=hidden_sizes[i], num_layers=num_layers, dropout=dropout if num_layers > 1 else 0, batch_first=True, bidirectional=bidirectional) for (i, input_size) in enumerate(input_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.modality_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(modalities)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.modality_weights.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "F.softmax(torch.ones(len(modalities)), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attendee",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "attender",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attender.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attendee, attender)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attendee * attn_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "input": {
                    "value": "torch.ones(len(modalities))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "len(modalities)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/modules/multihead_attention.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('bias', self.in_proj_bias)",
                            "Call"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_109": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_123": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights.float(), dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.attn_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights + attn_mask.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.sum(dim=1) / self.num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_125": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights.float(), dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.attn_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights + attn_mask.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.sum(dim=1) / self.num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_proj_v(value)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, v.new_zeros((v.size(0), 1) + v.size()[2:])], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, k.new_zeros((k.size(0), 1) + k.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros((v.size(0), 1) + v.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_157": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('weight', self.in_proj_weight)",
                            "Call"
                        ],
                        [
                            "weight[start:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('bias', self.in_proj_bias)",
                            "Call"
                        ],
                        [
                            "bias[start:end]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/modules/position_embedding.py": {
        "torch": {
            "exp_52": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(half_dim, dtype=torch.float) * -emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(emb), torch.cos(emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "max_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx + 1 + tensor.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.padding_idx + 1 + seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "getattr(make_positions, buf_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(num_embeddings, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_53": {
                "start": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_52": {
                "start": {
                    "value": "half_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_54": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_54": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/modules/transformer_comps.py": {
        "torch": {
            "triu_183": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fill_with_neg_inf(torch.ones(dim1, dim2))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + abs(dim2 - dim1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_198": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(20, 2, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.rand(20, 2, 300))",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x_in",
                            "BinOp"
                        ],
                        [
                            "x + self.embed_positions(x_in.transpose(0, 1)[:, :, 0]).transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, x_k, x_v)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(self.embed_dim) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.rand(20, 2, 300))",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x_in",
                            "BinOp"
                        ],
                        [
                            "x + self.embed_positions(x_in.transpose(0, 1)[:, :, 0]).transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, x_k, x_v)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.res_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.rand(20, 2, 300))",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x_in",
                            "BinOp"
                        ],
                        [
                            "x + self.embed_positions(x_in.transpose(0, 1)[:, :, 0]).transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, x_k, x_v)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_162": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.rand(20, 2, 300))",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x_in",
                            "BinOp"
                        ],
                        [
                            "x + self.embed_positions(x_in.transpose(0, 1)[:, :, 0]).transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(x, x_k, x_v)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.res_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.res_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * x_in_k",
                            "BinOp"
                        ],
                        [
                            "x_k + self.embed_positions(x_in_k.transpose(0, 1)[:, :, 0]).transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x_k, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x_k, before=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_76": {
                "variable": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_scale * x_in_v",
                            "BinOp"
                        ],
                        [
                            "x_v + self.embed_positions(x_in_v.transpose(0, 1)[:, :, 0]).transpose(0, 1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x_v, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x_v, before=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_204": {
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_183": {
                "*size": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor2.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/mult.py": {
        "torch": {
            "Conv1d_41": {
                "variable": {
                    "value": "self.proj_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.orig_d_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.d_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_42": {
                "variable": {
                    "value": "self.proj_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.orig_d_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.d_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_43": {
                "variable": {
                    "value": "self.proj_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.orig_d_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.d_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.proj1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "combined_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.d_l + self.d_a + self.d_v",
                            "BinOp"
                        ],
                        [
                            "2 * self.d_l",
                            "BinOp"
                        ],
                        [
                            "2 * (self.d_l + self.d_a + self.d_v)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "combined_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.d_l + self.d_a + self.d_v",
                            "BinOp"
                        ],
                        [
                            "2 * self.d_l",
                            "BinOp"
                        ],
                        [
                            "2 * (self.d_l + self.d_a + self.d_v)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.proj2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "combined_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.d_l + self.d_a + self.d_v",
                            "BinOp"
                        ],
                        [
                            "2 * self.d_l",
                            "BinOp"
                        ],
                        [
                            "2 * (self.d_l + self.d_a + self.d_v)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "combined_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.d_l + self.d_a + self.d_v",
                            "BinOp"
                        ],
                        [
                            "2 * self.d_l",
                            "BinOp"
                        ],
                        [
                            "2 * (self.d_l + self.d_a + self.d_v)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "combined_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.d_l + self.d_a + self.d_v",
                            "BinOp"
                        ],
                        [
                            "2 * self.d_l",
                            "BinOp"
                        ],
                        [
                            "2 * (self.d_l + self.d_a + self.d_v)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyp_params['output_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dropout_96": {
                "variable": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_l.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "h_ls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_l_with_as, h_l_with_vs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "h_as",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_a_with_ls, h_a_with_vs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "h_vs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_v_with_ls, h_v_with_as]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "last_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_h_l, last_h_a, last_h_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_142": {
                "input": {
                    "value": "F.relu(self.proj1(last_hs))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.out_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_142": {
                "input": {
                    "value": "self.proj1(last_hs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/transformers.py": {
        "torch": {
            "TransformerEncoderLayer_9": {
                "variable": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "nhead": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_10": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "409",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TransformerEncoder_13": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(d_model=160, nhead=8)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.LayerNorm(160)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(160, 80)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "fused_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X_text, X_audio, X_vision)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(fused_input)",
                            "Call"
                        ],
                        [
                            "self.pos_encoder(output)",
                            "Call"
                        ],
                        [
                            "self.transformer_encoder(output)",
                            "Call"
                        ],
                        [
                            "torch.mean(output, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "self.linear(fused_input)",
                            "Call"
                        ],
                        [
                            "self.transformer_encoder(output)",
                            "Call"
                        ],
                        [
                            "torch.mean(output, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "409",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "fused_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X_text, X_audio, X_vision)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(fused_input)",
                            "Call"
                        ],
                        [
                            "self.pos_encoder(output)",
                            "Call"
                        ],
                        [
                            "self.transformer_encoder(output)",
                            "Call"
                        ],
                        [
                            "torch.mean(output, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "self.linear(fused_input)",
                            "Call"
                        ],
                        [
                            "self.transformer_encoder(output)",
                            "Call"
                        ],
                        [
                            "torch.mean(output, dim=1)",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_56": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_57": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_58": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_59": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_57": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/emotion.py": {
        "torch": {
            "set_grad_enabled_143": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "(total_Y, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_171": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "(total_Y, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_318": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "tensors": {
                    "value": "(total_Y, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_347": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_353": {
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "(total_Y, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__149": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__325": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/trainers/sentiment.py": {
        "torch": {
            "set_grad_enabled_90": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "(total_Y, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_120": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "(total_logits, logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "(total_Y, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__97": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args['clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "tensor_58": {
                "variable": {
                    "value": "loss_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[n / len(labels) for n in nums]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    }
}