{
    "HTN_AutoEncoder.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./mnist/', train=True, transform=torchvision.transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_179": {
                "variable": {
                    "value": "lossfunc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_180": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Comp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.rand(self.tn_size, self.tn_size, self.bond_down, self.bond_down, self.bond_down, self.bond_down, self.bond_up), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.tensorL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(16, bond_inner, bond_data, batch_size, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.tensorL2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(8, 1, bond_inner, batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.tensorL3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(4, bond_inner, bond_inner, batch_size, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.tensorL4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(2, 1, bond_inner, batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.tensorL5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(1, 784, bond_inner, batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.decoder88",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(1, 16, 4, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.decoder44",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(1, 16, 5, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.decoder22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(1, 16, 5, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "data32",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "data_group",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "bond_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "load_190": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TN_ImageCompress_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TN_ImageCompress_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "psnr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "int"
                        ]
                    ]
                }
            },
            "mean_240": {
                "variable": {
                    "value": "psnr_ave",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psnr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_92": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mijkl, ijkln -> mn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(Num, bond, bond, bond, bond).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_224": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model_Comp': Comp.state_dict(), 'optimizer': optimizer.state_dict(), 'bond_data': bond_data, 'bond_inner': bond_inner}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TN_ImageCompress_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TN_ImageCompress_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "sum_238": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(output[k, :] - img[k, :]) ** 2 / (28 * 28)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_94": {
                "variable": {
                    "value": "output[:, m, n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('mijkl, ijkln -> mn', local_result, self.weight[m, n, :, :, :, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_117": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_119": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_121": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_125": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_127": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_129": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_133": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_135": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_137": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_239": {
                "input": {
                    "value": "1 / mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_81": {
                "*size": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_up",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_149": {
                "input": {
                    "value": "data32 * (3.1416 / 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_149": {
                "input": {
                    "value": "data32 * (3.1416 / 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "HTN_MNIST.py": {
        "torch": {
            "TensorDataset_69": {
                "variable": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(trainx, trainl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "data32",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "data_group",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "bond_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ttn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_143": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.rand(self.tn_size, self.tn_size, self.bond_down, self.bond_down, self.bond_down, self.bond_down, self.bond_up), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.tensorL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(16, bond_inner, bond_data, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.tensorL2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(8, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.tensorL3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(4, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.tensorL4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(2, 6, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.tensorL5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(1, 1, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_102": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mijkl, ijkln -> mn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(Num, bond, bond, bond, bond).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "normalize_104": {
                "variable": {
                    "value": "output[:, m, n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('mijkl, ijkln -> mn', local_result, self.weight[m, n, :, :, :, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{'accuracy': accuracy, 'epoch': epoch, 'model': ttn.state_dict(), 'optimizer': optimizer.state_dict(), 'loss_list': loss, 'bond_data': bond_data, 'bond_inner': bond_inner}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "sin_56": {
                "input": {
                    "value": "data32 / 255 * (3.1416 / 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_170": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ttn(b_x)[0]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.zeros(Num, self.tn_size, self.tn_size, self.bond_up)).to(device)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_56": {
                "input": {
                    "value": "data32 / 255 * (3.1416 / 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_88": {
                "*size": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_up",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_171": {
                "input": {
                    "value": "b_y == pred_y",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "HTN_MNIST_CNN_V3.py": {
        "torch": {
            "TensorDataset_75": {
                "variable": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(trainx, trainl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "data32",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "data_group",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "bond_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ttn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_175": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_177": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./train_log'",
                            "str"
                        ]
                    ]
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.rand(self.tn_size, self.tn_size, self.bond_down, self.bond_down, self.bond_down, self.bond_down, self.bond_up), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.tensorL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(16, bond_inner, bond_data, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.tensorL2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(8, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.tensorL3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(4, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.tensorL4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(2, bond_inner, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.tensorL5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(1, 1, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * bond_inner",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 26, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(26, 50, kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_106": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mijkl, ijkln -> mn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(Num, bond, bond, bond, bond).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_184": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "output[:, m, n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('mijkl, ijkln -> mn', local_result, self.weight[m, n, :, :, :, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "26",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "26",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "26",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{'accuracy': accuracy, 'epoch': epoch, 'model': ttn.state_dict(), 'optimizer': optimizer.state_dict(), 'loss_list': loss, 'bond_data': bond_data, 'bond_inner': bond_inner}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "sin_60": {
                "input": {
                    "value": "data32 / 255.0 * (np.pi / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_213": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ttn(b_x)[0]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.zeros(Num, self.tn_size, self.tn_size, self.bond_up)).to(device)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_214": {
                "input": {
                    "value": "pred_y == b_y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cos_60": {
                "input": {
                    "value": "data32 / 255.0 * (np.pi / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_93": {
                "*size": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_up",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "HTN_MNIST_CNN_V4.py": {
        "torch": {
            "TensorDataset_75": {
                "variable": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(trainx, trainl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "data32",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "data_group",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "bond_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ttn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_179": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_181": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./train_log'",
                            "str"
                        ]
                    ]
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.rand(self.tn_size, self.tn_size, self.bond_down, self.bond_down, self.bond_down, self.bond_down, self.bond_up), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.tensorL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(16, bond_inner, bond_data, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.tensorL2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(8, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.tensorL3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(4, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.tensorL4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(2, bond_inner, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.tensorL5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(1, 1, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * bond_inner",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 26, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(26, 50, kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_139": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_140": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_106": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mijkl, ijkln -> mn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(Num, bond, bond, bond, bond).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_188": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "output[:, m, n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('mijkl, ijkln -> mn', local_result, self.weight[m, n, :, :, :, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "26",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "26",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_126": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "26",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_134": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{'accuracy': accuracy, 'epoch': epoch, 'model': ttn.state_dict(), 'optimizer': optimizer.state_dict(), 'loss_list': loss, 'bond_data': bond_data, 'bond_inner': bond_inner}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "sin_60": {
                "input": {
                    "value": "data32 / 255.0 * (np.pi / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_217": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ttn(b_x)[0]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.zeros(Num, self.tn_size, self.tn_size, self.bond_up)).to(device)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_218": {
                "input": {
                    "value": "pred_y == b_y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cos_60": {
                "input": {
                    "value": "data32 / 255.0 * (np.pi / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_93": {
                "*size": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_up",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "HTN_MNIST_V2.py": {
        "torch": {
            "TensorDataset_75": {
                "variable": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "trainx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datatensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(trainx, trainl)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "data32",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "data_group",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "bond_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ttn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_149": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_151": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./train_log'",
                            "str"
                        ]
                    ]
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.rand(self.tn_size, self.tn_size, self.bond_down, self.bond_down, self.bond_down, self.bond_down, self.bond_up), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.tensorL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(16, bond_inner, bond_data, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.tensorL2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(8, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.tensorL3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(4, bond_inner, bond_inner, BATCH_SIZE, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.tensorL4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(2, 6, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.tensorL5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TensorLayer(1, 1, bond_inner, BATCH_SIZE, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "bond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2 * m, 2 * n, :].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mijkl, ijkln -> mn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "local_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(Num, bond, bond, bond, bond).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "normalize_109": {
                "variable": {
                    "value": "output[:, m, n, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('mijkl, ijkln -> mn', local_result, self.weight[m, n, :, :, :, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{'accuracy': accuracy, 'epoch': epoch, 'model': ttn.state_dict(), 'optimizer': optimizer.state_dict(), 'loss_list': loss, 'bond_data': bond_data, 'bond_inner': bond_inner}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ],
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "sin_60": {
                "input": {
                    "value": "data32 / 255.0 * (np.pi / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_187": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ttn(b_x)[0]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.zeros(Num, self.tn_size, self.tn_size, self.bond_up)).to(device)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_188": {
                "input": {
                    "value": "pred_y == b_y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cos_60": {
                "input": {
                    "value": "data32 / 255.0 * (np.pi / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_94": {
                "*size": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.bond_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "Num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bond_up",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "HTN_MNIST_eval.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "data32",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "data_group",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data28.size()[0]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "bond_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['bond_data']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "pred_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TNCF_checkpoint.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "sin_56": {
                "input": {
                    "value": "data32 / 255 * (3.1416 / 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "pred_y == lable_single",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cos_56": {
                "input": {
                    "value": "data32 / 255 * (3.1416 / 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_76": {
                "input": {
                    "value": "test_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ttn(text_single)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}