{
    "bilevel_pg/bilevelpg/agents/agent_factory.py": {
        "tensorflow": {
            "uniform_20": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "logits": {
                    "value": "x - tf.math.log(-tf.math.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_21": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/base_agents.py": {
        "tensorflow": {}
    },
    "bilevel_pg/bilevelpg/agents/bi_follower_ddpg.py": {
        "tensorflow": {
            "stop_gradient_199": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_234": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_136": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_145": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_126": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_141": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_238": {
                "input_tensor": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values([observations.astype(np.float32), actions])",
                            "Call"
                        ],
                        [
                            "weights * q_values",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/bi_follower_pg.py": {
        "tensorflow": {
            "stop_gradient_197": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - terminals) * self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_numerics_138": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_147": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_234": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_235": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_238": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._qf.get_values(tf.concat((observations[:, 0:self.observation_space.n], actions, opponent_actions), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_127": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_143": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_248": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(self._qf.get_values(tf.concat((observations[:, 0:self.observation_space.n], actions, opponent_actions), 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_254": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action:action + 1], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action:action + 1], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_191": {
                "indices": {
                    "value": "target_actions[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_192": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_251": {
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(self._qf.get_values(tf.concat((observations[:, 0:self.observation_space.n], actions, opponent_actions), 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_238": {
                "values": {
                    "value": "(observations[:, 0:self.observation_space.n], actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_234": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/bi_follower_q.py": {
        "tensorflow": {
            "stop_gradient_167": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_88": {
                "variable": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([action_0 for i in range(observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_121": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_111": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_161": {
                "indices": {
                    "value": "target_actions[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_162": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/bi_leader_pg.py": {
        "tensorflow": {
            "stop_gradient_203": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_numerics_128": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_141": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_261": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_262": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_118": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_137": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_268": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_276": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action:action + 1], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action:action + 1], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_188": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_263": {
                "values": {
                    "value": "(observations, actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_271": {
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_261": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/bi_leader_q.py": {
        "tensorflow": {
            "stop_gradient_224": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - terminals) * self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_102": {
                "variable": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([action_0 for i in range(new_observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self._action_space.n)",
                            "Call"
                        ],
                        [
                            "np.array([action_0 for i in range(observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_107": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opponent_agent.act(np.hstack((new_observation, tot_action_0)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self._action_space.n)",
                            "Call"
                        ],
                        [
                            "opponent_agent.act(np.hstack((observation, tot_action_0)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_128": {
                "variable": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([action_0 for i in range(new_observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self._action_space.n)",
                            "Call"
                        ],
                        [
                            "np.array([action_0 for i in range(observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_133": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opponent_agent.act(np.hstack((new_observation, tot_action_0)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self._action_space.n)",
                            "Call"
                        ],
                        [
                            "opponent_agent.act(np.hstack((observation, tot_action_0)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_169": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_158": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_215": {
                "indices": {
                    "value": "target_actions[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_216": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/bi_leader_q2.py": {
        "tensorflow": {
            "stop_gradient_169": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_88": {
                "variable": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([action_0 for i in range(observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_124": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_114": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_164": {
                "indices": {
                    "value": "target_actions[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/bi_leader_softq.py": {
        "tensorflow": {
            "reduce_logsumexp_107": {
                "variable": {
                    "value": "next_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(target_critic_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_114": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - self._terminals_pl) * self._gamma * next_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_141": {
                "variable": {
                    "value": "(fixed_actions, updated_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._policy.get_actions_np(observations)",
                            "Call"
                        ],
                        [
                            "opponent_agent.act(np.hstack((observation, tot_action_0)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[n_fixed_actions, n_updated_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_143": {
                "variable": {
                    "value": "fixed_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fixed_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(fixed_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "squash_correction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.log(1 - fixed_actions ** 2 + self._EPS)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "grad_log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_p, fixed_actions)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(grad_log_p, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(grad_log_p)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_159": {
                "variable": {
                    "value": "grad_log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_p, fixed_actions)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(grad_log_p, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(grad_log_p)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_164": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_dict['output']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "action_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kappa * grad_log_p + kernel_dict['gradient']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_171": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "updated_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._policy.get_params_internal()",
                    "type": "Call",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "action_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(kappa * grad_log_p + kernel_dict['gradient'], reduction_indices=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_176": {
                "variable": {
                    "value": "surrogate_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_sum(w * tf.stop_gradient(g)) for (w, g) in zip(self._policy.get_params_internal(), gradients)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_110": {
                "x": {
                    "value": "tf.cast(self._value_n_particles, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_192": {
                "variable": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([action_0 for i in range(observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_194": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._policy.get_actions_np(observations)",
                            "Call"
                        ],
                        [
                            "opponent_agent.act(np.hstack((observation, tot_action_0)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self._action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self._action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_227": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_240": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "self._value_n_particles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "(ys - q_values) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_154": {
                "x": {
                    "value": "1 - fixed_actions ** 2 + self._EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_157": {
                "ys": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgd_target_values + squash_correction",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "fixed_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(fixed_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_217": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_236": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_177": {
                "input_tensor": {
                    "value": "w * tf.stop_gradient(g)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_177": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/commnet.py": {
        "tensorflow": {
            "Adam_11": {
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_12": {
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/maddpg.py": {
        "tensorflow": {
            "stop_gradient_174": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['inner_products'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_203": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(actions, opponent_actions, actions * actions, actions * opponent_actions, opponent_actions * opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_123": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['inner_products'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_132": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_112": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_128": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_169": {
                "x": {
                    "value": "target_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "input_tensor": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values([observations.astype(np.float32), actions])",
                            "Call"
                        ],
                        [
                            "weights * q_values",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/agents/td3.py": {
        "tensorflow": {
            "stop_gradient_216": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_246": {
                "variable": {
                    "value": "return_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_numerics_139": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_152": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_281": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_282": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_129": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_148": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_256": {
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_288": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf_2.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self.get_critic_value(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_296": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action:action + 1], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action:action + 1], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_201": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_283": {
                "values": {
                    "value": "(observations, actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_291": {
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf_2.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self.get_critic_value(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_281": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/common/distributions.py": {
        "tensorflow": {
            "exp_160": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_161": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_168": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_191": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_192": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_199": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_213": {
                "variable": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_236": {
                "variable": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_265": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_268": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_291": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_303": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_43": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_220": {
                "inputs": {
                    "value": "[p.logp(px) for (p, px) in zip(self.categoricals, tf.unstack(x - self.low, axis=len(x.get_shape()) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_222": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_226": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_244": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_246": {
                "inputs": {
                    "value": "[p.logp(px) for (p, px) in zip(self.categoricals, tf.unstack(x - self.low, axis=len(x.get_shape()) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_248": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_252": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_257": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_295": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_305": {
                "x": {
                    "value": "math_ops.less(u, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_156": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_173": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_187": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_204": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_218": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_228": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_301": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_304": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_305": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(p))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_331": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_174": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(p))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_205": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(p))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_214": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "high - low + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_218": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_228": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_237": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "high - low + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_297": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_299": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_165": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_171": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_196": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_202": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_275": {
                "x": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_283": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_220": {
                "value": {
                    "value": "x - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(x.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_246": {
                "value": {
                    "value": "x - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(x.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_274": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_297": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_275": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "square_279": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/common/tf_util.py": {
        "tensorflow": {
            "ConfigProto_163": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_7": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_9": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_14": {
                "x": {
                    "value": "var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_16": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_18": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_20": {
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "arrs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_24": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_126": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_166": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_206": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Saver_229": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_238": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_295": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "square_12": {
                "x": {
                    "value": "x - meanx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variables_initializer_180": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_scope_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_102": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_104": {
                "x": {
                    "value": "super().get()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_127": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_128": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_129": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_norm_148": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/environment/sampler.py": {
        "tensorflow": {
            "one_hot_132": {
                "variable": {
                    "value": "mix_observe_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_144": {
                "indices": {
                    "value": "action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agents[0].act(mix_observe_0)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_182": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_190": {
                "indices": {
                    "value": "opponent_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/experiments/run_trainer.py": {
        "tensorflow": {
            "uniform_30": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "logits": {
                    "value": "x - tf.math.log(-tf.math.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_31": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/logger/tensor_board_output.py": {
        "tensorflow": {}
    },
    "bilevel_pg/bilevelpg/misc/kernel.py": {
        "tensorflow": {
            "reduce_sum_39": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(leading_shape, [Kx * Ky])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_44": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(dist_sq, input_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "Kx * Ky // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_52": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_53": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_54": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-dist_sq / h_expanded_twice",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "variable": {
                    "value": "h_expanded_thrice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_expanded_twice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(h, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "variable": {
                    "value": "kappa_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-dist_sq / h_expanded_twice)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "input": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(input_tensor=diff ** 2, axis=-1, keepdims=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((leading_shape, [Kx * Ky]), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/networks/mlp.py": {
        "tensorflow": {
            "Input_17": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_30": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_layer_sizes",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_31": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/optimizers/lola.py": {
        "tensorflow": {}
    },
    "bilevel_pg/bilevelpg/optimizers/sga.py": {
        "tensorflow": {
            "gradients_7": {
                "variable": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.zeros_like(y) + float('nan') for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "stop_gradients": {
                    "value": "stop_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_16": {
                "variable": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(ys=ys, xs=xs, grad_ys=us, stop_gradients=stop_gradients)",
                            "Call"
                        ],
                        [
                            "[tf.convert_to_tensor(value=dydx) if isinstance(dydx, tf.IndexedSlices) else dydx for dydx in dydxs]",
                            "ListComp"
                        ],
                        [
                            "[tf.zeros_like(x) if dydx is None else dydx for (x, dydx) in zip(xs, dydxs)]",
                            "ListComp"
                        ],
                        [
                            "tf.gradients(ys=dydxs, xs=us, grad_ys=grad_xs)",
                            "Call"
                        ],
                        [
                            "tf.gradients(ys=ys, xs=xs, grad_ys=vs, stop_gradients=xs)",
                            "Call"
                        ],
                        [
                            "[tf.zeros_like(x) if dydx is None else dydx for (x, dydx) in zip(xs, dydxs)]",
                            "ListComp"
                        ]
                    ]
                },
                "xs": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.zeros_like(y) + float('nan') for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "grad_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_33": {
                "variable": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": []
                },
                "stop_gradients": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_44": {
                "inputs": {
                    "value": "dot_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_57": {
                "variable": {
                    "value": "self._gd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_6": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_10": {
                "value": {
                    "value": "dydx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "xx * yy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_82": {
                "x": {
                    "value": "mult / n + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/policy/base_policy.py": {
        "tensorflow": {
            "Model_118": {
                "variable": {
                    "value": "self.diagnostics_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "(raw_policies, policies)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_119": {
                "variable": {
                    "value": "self.policy_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "policies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_policies",
                            "variable"
                        ]
                    ]
                }
            },
            "Input_89": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_93": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_94": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/policy/deterministic_policy.py": {
        "tensorflow": {
            "Model_47": {
                "variable": {
                    "value": "self.actions_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_actions if self._squash else tf.nn.tanh(raw_actions)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Model_48": {
                "variable": {
                    "value": "self.diagnostics_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "(raw_actions, actions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_32": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_36": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "x": {
                    "value": "raw_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._policy_net(input_shapes=(conditions.shape[1:],), output_size=output_shape[0])(conditions)",
                            "Call"
                        ],
                        [
                            "MLP(input_shapes=input_shapes, hidden_layer_sizes=self._hidden_layer_sizes, output_size=output_size, activation=self._activation, output_activation=self._output_activation, name='{}/GaussianMLPPolicy'.format(self._name))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_37": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/samplers/bilevel_q_pg_sampler.py": {
        "tensorflow": {
            "one_hot_60": {
                "variable": {
                    "value": "mix_observe_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_79": {
                "indices": {
                    "value": "self._current_observation_n[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_80": {
                "indices": {
                    "value": "action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.random.randint(self.env.action_num)])",
                            "Call"
                        ],
                        [
                            "self.agents[0].act(mix_observe_0, self.agents[1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_104": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_108": {
                "indices": {
                    "value": "opponent_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/samplers/sampler.py": {
        "tensorflow": {
            "one_hot_95": {
                "variable": {
                    "value": "mix_observe_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_100": {
                "variable": {
                    "value": "mix_observe_1",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_109": {
                "variable": {
                    "value": "mix_observe_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_114": {
                "variable": {
                    "value": "mix_observe_1",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_236": {
                "variable": {
                    "value": "mix_observe_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_266": {
                "variable": {
                    "value": "mix_observe_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_142": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_149": {
                "indices": {
                    "value": "opponent_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ],
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ],
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ],
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_239": {
                "indices": {
                    "value": "self._current_observation_n[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_240": {
                "indices": {
                    "value": "[action_n[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_283": {
                "indices": {
                    "value": "action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agents[0].act(mix_observe_0)",
                            "Call"
                        ],
                        [
                            "self.agents[0].act(mix_observe_0)",
                            "Call"
                        ],
                        [
                            "self.agents[0].act(mix_observe_0)",
                            "Call"
                        ],
                        [
                            "self.agents[0].act(mix_observe_0)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_326": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_332": {
                "indices": {
                    "value": "next_observation_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_334": {
                "indices": {
                    "value": "opponent_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ],
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ],
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ],
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/trainer/maddpg.py": {
        "tensorflow": {
            "group_25": {
                "variable": {
                    "value": "expression",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*expression",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "p_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(act_pd.flatparam())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_50": {
                "variable": {
                    "value": "q_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "obs_ph_n + act_input_n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "target_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "q_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "obs_ph_n + act_ph_n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "q_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(q - target_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "q_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'trainer'",
                            "Method Argument"
                        ],
                        [
                            "'trainer'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_52": {
                "variable": {
                    "value": "q_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs_ph_n[p_index], act_input_n[p_index]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'trainer'",
                            "Method Argument"
                        ],
                        [
                            "'trainer'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_87": {
                "variable": {
                    "value": "q_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs_ph_n[q_index], act_ph_n[q_index]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_46": {
                "x": {
                    "value": "act_pd.flatparam()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(q_input, 1, scope='q_func', reuse=True, num_units=num_units)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "q_func(q_input, 1, scope='q_func', num_units=num_units)[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_91": {
                "x": {
                    "value": "q - target_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_94": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_func(q_input, 1, scope='q_func', reuse=True, num_units=num_units)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "q_func(q_input, 1, scope='q_func', num_units=num_units)[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AdamOptimizer_129": {
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_141": {
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/trainer/utils.py": {
        "tensorflow": {
            "one_hot_50": {
                "indices": {
                    "value": "target_actions_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "agents[1].action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_101": {
                "indices": {
                    "value": "target_actions_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "agents[1].action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/utils/keras.py": {
        "tensorflow": {
            "load_model_21": {
                "variable": {
                    "value": "loaded_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "fd.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{self.__class__.__name__: self.__class__}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "save_model_10": {
                "model": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "fd.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/utils/kernel.py": {
        "tensorflow": {
            "concat_49": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(leading_shape, [Kx * Ky])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_50": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(dist_sq, input_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "Kx * Ky // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_58": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_59": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_60": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_63": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-dist_sq / h_expanded_twice",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "h_expanded_thrice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_expanded_twice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(h, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "kappa_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-dist_sq / h_expanded_twice)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "input": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(diff ** 2, axis=-1, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff ** 2, axis=-1, keepdims=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((leading_shape, [Kx * Ky]), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/utils/random.py": {
        "tensorflow": {
            "set_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed % 234234234523",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/utils/tf_utils.py": {
        "tensorflow": {
            "group_46": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'soft_variables_update'",
                            "str"
                        ],
                        [
                            "'{}_{}'.format(name, op_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "atanh_83": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atanh(actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "tf.math.log(1 - tf.tanh(actions) ** 2 + EPS)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_35": {
                "name": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'soft_variables_update'",
                            "str"
                        ],
                        [
                            "'{}_{}'.format(name, op_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_84": {
                "x": {
                    "value": "1 - tf.tanh(actions) ** 2 + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_norm_61": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "IndexedSlices_62": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_norm(grad.values, max_norm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "grad.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_64": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.IndexedSlices(tmp, grad.indices, grad.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(grad, max_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_84": {
                "x": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atanh(actions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg/bilevelpg/value_functions/value_function.py": {
        "tensorflow": {
            "Model_52": {
                "variable": {
                    "value": "self.values_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._value_net(input_shapes=(conditions.shape[1:],), output_size=output_shape[0])(conditions)",
                            "Call"
                        ],
                        [
                            "self.diagnostics_model.predict(conditions)",
                            "Call"
                        ],
                        [
                            "MLP(input_shapes=input_shapes, hidden_layer_sizes=self._hidden_layer_sizes, output_size=output_size, activation=self._activation, output_activation=self._output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_53": {
                "variable": {
                    "value": "self.diagnostics_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._value_net(input_shapes=(conditions.shape[1:],), output_size=output_shape[0])(conditions)",
                            "Call"
                        ],
                        [
                            "self.diagnostics_model.predict(conditions)",
                            "Call"
                        ],
                        [
                            "MLP(input_shapes=input_shapes, hidden_layer_sizes=self._hidden_layer_sizes, output_size=output_size, activation=self._activation, output_activation=self._output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_33": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_37": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/base_agents.py": {
        "tensorflow": {}
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/base_agents_highway.py": {
        "tensorflow": {}
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/bi_follower_pg.py": {
        "tensorflow": {
            "stop_gradient_188": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_130": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_139": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_226": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_227": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_120": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_135": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_237": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((tf.reshape(observations.astype(np.float32)[:, 0], shape=[tf.shape(observations)[0], 1]), actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_243": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_182": {
                "indices": {
                    "value": "target_actions[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_183": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_230": {
                "values": {
                    "value": "(tf.reshape(observations.astype(np.float32)[:, 0], shape=[tf.shape(observations)[0], 1]), actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_240": {
                "x": {
                    "value": "policies[:, action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((tf.reshape(observations.astype(np.float32)[:, 0], shape=[tf.shape(observations)[0], 1]), actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_226": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "tensor": {
                    "value": "observations.astype(np.float32)[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(observations)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_231": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/bi_follower_pg_highway.py": {
        "tensorflow": {
            "one_hot_194": {
                "variable": {
                    "value": "target_actions_concat[:, :action_num]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_actions[:, agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.action_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "one_hot_197": {
                "variable": {
                    "value": "target_actions_concat[:, action_num:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.action_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "one_hot_198": {
                "variable": {
                    "value": "actions_concat[:, action_num:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "opponent_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.action_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stop_gradient_209": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - terminals.reshape(-1, 1)) * self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_221": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(env, agent_id, batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_242": {
                "variable": {
                    "value": "actions_concat[:, env.action_num:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "opponent_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_133": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(env, agent_id, batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_142": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(env, agent_id, batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_247": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_248": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, env.action_num)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_120": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_138": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_258": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations.astype(np.float32)[:, :env.num_state], actions_concat), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_264": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action:action + 1], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action:action + 1], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_253": {
                "values": {
                    "value": "(observations.astype(np.float32)[:, :env.num_state], actions_concat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_261": {
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations.astype(np.float32)[:, :env.num_state], actions_concat), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_247": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/bi_leader_pg.py": {
        "tensorflow": {
            "stop_gradient_197": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_223": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_128": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_141": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_248": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_249": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_118": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_137": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_255": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_263": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_188": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_250": {
                "values": {
                    "value": "(observations, actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_258": {
                "x": {
                    "value": "policies[:, action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_248": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/bi_leader_pg_highway.py": {
        "tensorflow": {
            "one_hot_212": {
                "variable": {
                    "value": "target_actions_concat[:, :action_num]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_actions[:, agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.action_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "one_hot_221": {
                "variable": {
                    "value": "target_actions_concat[:, action_num:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.action_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "one_hot_222": {
                "variable": {
                    "value": "actions_concat[:, action_num:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "opponent_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.action_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stop_gradient_241": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - terminals.reshape(-1, 1)) * self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_253": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(env, agent_id, batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_282": {
                "variable": {
                    "value": "actions_concat[:, env.action_num:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "opponent_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_133": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(env, agent_id, batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_146": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(env, agent_id, batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_290": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_291": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_118": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_142": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_302": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions_concat), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_310": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action:action + 1], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action:action + 1], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_295": {
                "values": {
                    "value": "(observations, actions_concat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_305": {
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions_concat), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_290": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/commnet.py": {
        "tensorflow": {}
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/independent_q_agents.py": {
        "tensorflow": {
            "stop_gradient_173": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - terminals.reshape(-1, 1)) * self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(agent_id, batch['observations'], batch['actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_89": {
                "variable": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tot_action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([action_0 for i in range(observation.shape[0])])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tot_action_0, self.action_num)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_126": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(agent_id, batch['observations'], batch['actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_115": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_168": {
                "indices": {
                    "value": "target_actions[:, agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/maddpg.py": {
        "tensorflow": {
            "stop_gradient_168": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_179": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_193": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_numerics_121": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_130": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_111": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_126": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "target_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_197": {
                "input_tensor": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values([observations.astype(np.float32), actions])",
                            "Call"
                        ],
                        [
                            "weights * q_values",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/rommeo_agents.py": {
        "tensorflow": {
            "reduce_mean_194": {
                "variable": {
                    "value": "opponent_policy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "opponent_actions_log_pis - prior_log_pis - q_values + annealing * actions_log_pis",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_220": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - terminals) * self._gamma * q_value_targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_230": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], batch['annealing'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_246": {
                "input_tensor": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values([observations, actions, opponent_actions])",
                            "Call"
                        ],
                        [
                            "self._qf.get_values([observations, actions, opponent_actions])",
                            "Call"
                        ],
                        [
                            "self._qf.get_values([observations, actions, opponent_actions])",
                            "Call"
                        ],
                        [
                            "weights * q_values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_16": {
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_17": {
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_117": {
                "tensor": {
                    "value": "prior_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prior_loss(batch['recent_observations'], batch['recent_opponent_actions'])",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "prior loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_126": {
                "tensor": {
                    "value": "opponent_policy_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opponent_policy_loss(batch['observations'], batch['annealing'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(opponent_actions_log_pis - prior_log_pis - q_values + annealing * actions_log_pis)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "opponent policy loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_141": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], batch['annealing'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_151": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['annealing'], weights=weights)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(annealing * actions_log_pis - tf.reduce_mean(q_values))",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_112": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_121": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_130": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_145": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "input_tensor": {
                    "value": "log_pis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prior.log_pis([recent_observations], recent_opponent_actions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/agents/td3_agents.py": {
        "tensorflow": {
            "stop_gradient_224": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + (1 - terminals.reshape(-1, 1)) * self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_254": {
                "variable": {
                    "value": "return_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(env, agent_id, batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_142": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(env, agent_id, batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_155": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(env, agent_id, batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_292": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_293": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_129": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_151": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_264": {
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(env, agent_id, batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], batch['terminals'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_299": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf_2.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self.get_critic_value(tf.concat((observations, actions, tf.one_hot(opponent_actions[:, 1 - agent_id], env.action_num)), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_307": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action:action + 1], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action:action + 1], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_209": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "one_hot_232": {
                "indices": {
                    "value": "opponent_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "action_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "concat_294": {
                "values": {
                    "value": "(observations, actions, tf.one_hot(opponent_actions[:, 1 - agent_id], env.action_num))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_302": {
                "x": {
                    "value": "policies[:, action:action + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf_2.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self.get_critic_value(tf.concat((observations, actions, tf.one_hot(opponent_actions[:, 1 - agent_id], env.action_num)), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_292": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_294": {
                "indices": {
                    "value": "opponent_actions[:, 1 - agent_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/common/distributions.py": {
        "tensorflow": {
            "exp_160": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_161": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_168": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_191": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_192": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "other.logits - U.max(other.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_199": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_213": {
                "variable": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_236": {
                "variable": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_265": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_268": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_291": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_303": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_43": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_220": {
                "inputs": {
                    "value": "[p.logp(px) for (p, px) in zip(self.categoricals, tf.unstack(x - self.low, axis=len(x.get_shape()) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_222": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_226": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_244": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_246": {
                "inputs": {
                    "value": "[p.logp(px) for (p, px) in zip(self.categoricals, tf.unstack(x - self.low, axis=len(x.get_shape()) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_248": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_252": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_257": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_295": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_305": {
                "x": {
                    "value": "math_ops.less(u, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_156": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_173": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_187": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_204": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_218": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_228": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_301": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_304": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_305": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(p))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_331": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_174": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(p))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_205": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(p))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_214": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "high - low + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_218": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_228": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_237": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "high - low + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_297": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_299": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_165": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_171": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_196": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_202": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_275": {
                "x": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_283": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_220": {
                "value": {
                    "value": "x - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(x.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_246": {
                "value": {
                    "value": "x - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(x.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_274": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_297": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_275": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "square_279": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/common/tf_util.py": {
        "tensorflow": {
            "ConfigProto_163": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_7": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_9": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_14": {
                "x": {
                    "value": "var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_16": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_18": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "None if axis is None else [axis]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_20": {
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "arrs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_24": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_126": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_166": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_206": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Saver_229": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_238": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_295": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "square_12": {
                "x": {
                    "value": "x - meanx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variables_initializer_180": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_scope_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_102": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_104": {
                "x": {
                    "value": "super().get()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_127": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_128": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_129": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_norm_148": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/environment/bi_leader_pg.py": {
        "tensorflow": {
            "stop_gradient_194": {
                "variable": {
                    "value": "td_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._reward_scale * rewards + self._gamma * target_q_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_219": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "check_numerics_128": {
                "tensor": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_loss(batch['observations'], batch['actions'], batch['opponent_actions'], batch['target_actions'], batch['rewards'], batch['next_observations'], weights=weights)",
                            "Call"
                        ],
                        [
                            "self._td_errors_loss_fn(reduction=tf.losses.Reduction.NONE)(td_targets, q_values)",
                            "Call"
                        ],
                        [
                            "weights * critic_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(critic_loss)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "qf loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_141": {
                "tensor": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_loss(batch['observations'], batch['opponent_actions'], weights=weights)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(tot_q_values)",
                            "UnaryOp"
                        ]
                    ]
                },
                "message": {
                    "value": "Actor loss is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_244": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(observations)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(policies.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_245": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(observations)[0]], action)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(actions, self.action_space.n)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_118": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_137": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_251": {
                "variable": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "policies[:, action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_259": {
                "input_tensor": {
                    "value": "tot_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.multiply(policies[:, action], q_values)",
                            "Call"
                        ],
                        [
                            "tot_q_values + tf.multiply(policies[:, action], q_values)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_188": {
                "indices": {
                    "value": "target_actions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_246": {
                "values": {
                    "value": "(observations, actions, opponent_actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_254": {
                "x": {
                    "value": "policies[:, action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._qf.get_values(critic_net_input)",
                            "Call"
                        ],
                        [
                            "self._qf.get_values(tf.concat((observations, actions, opponent_actions), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_244": {
                "input": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/logger/tensor_board_output.py": {
        "tensorflow": {}
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/misc/kernel.py": {
        "tensorflow": {
            "reduce_sum_39": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(leading_shape, [Kx * Ky])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_44": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(dist_sq, input_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "Kx * Ky // 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_52": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_53": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_54": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "medians_sq / np.log(Kx)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(h, h_min)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_57": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-dist_sq / h_expanded_twice",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "variable": {
                    "value": "h_expanded_thrice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_expanded_twice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(h, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "variable": {
                    "value": "kappa_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-dist_sq / h_expanded_twice)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "input": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(input_tensor=diff ** 2, axis=-1, keepdims=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((leading_shape, [Kx * Ky]), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/networks/mlp.py": {
        "tensorflow": {
            "Input_17": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_30": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_layer_sizes",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_31": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/optimizers/lola.py": {
        "tensorflow": {}
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/optimizers/sga.py": {
        "tensorflow": {
            "gradients_7": {
                "variable": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.zeros_like(y) + float('nan') for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "stop_gradients": {
                    "value": "stop_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_16": {
                "variable": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(ys=ys, xs=xs, grad_ys=us, stop_gradients=stop_gradients)",
                            "Call"
                        ],
                        [
                            "[tf.convert_to_tensor(value=dydx) if isinstance(dydx, tf.IndexedSlices) else dydx for dydx in dydxs]",
                            "ListComp"
                        ],
                        [
                            "[tf.zeros_like(x) if dydx is None else dydx for (x, dydx) in zip(xs, dydxs)]",
                            "ListComp"
                        ],
                        [
                            "tf.gradients(ys=dydxs, xs=us, grad_ys=grad_xs)",
                            "Call"
                        ],
                        [
                            "tf.gradients(ys=ys, xs=xs, grad_ys=vs, stop_gradients=xs)",
                            "Call"
                        ],
                        [
                            "[tf.zeros_like(x) if dydx is None else dydx for (x, dydx) in zip(xs, dydxs)]",
                            "ListComp"
                        ]
                    ]
                },
                "xs": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.zeros_like(y) + float('nan') for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "grad_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_33": {
                "variable": {
                    "value": "dydxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": []
                },
                "stop_gradients": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_44": {
                "inputs": {
                    "value": "dot_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_57": {
                "variable": {
                    "value": "self._gd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_6": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_10": {
                "value": {
                    "value": "dydx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "xx * yy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_82": {
                "x": {
                    "value": "mult / n + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/policy/base_policy.py": {
        "tensorflow": {
            "Model_118": {
                "variable": {
                    "value": "self.diagnostics_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "(raw_policies, policies)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_119": {
                "variable": {
                    "value": "self.policy_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "policies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_policies",
                            "variable"
                        ]
                    ]
                }
            },
            "Input_89": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_93": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_94": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_101": {
                "units": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda x: tf.concat(x, axis=-1))(self.condition_inputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LSTM(rnn_size)(tf.reshape(conditions, shape=[tf.shape(conditions)[0], tf.shape(conditions)[1], 1]))",
                            "Call"
                        ],
                        [
                            "preprocessor(conditions)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(conditions)[0], tf.shape(conditions)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda x: tf.concat(x, axis=-1))(self.condition_inputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.LSTM(rnn_size)(tf.reshape(conditions, shape=[tf.shape(conditions)[0], tf.shape(conditions)[1], 1]))",
                            "Call"
                        ],
                        [
                            "preprocessor(conditions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/policy/deterministic_policy.py": {
        "tensorflow": {
            "Model_47": {
                "variable": {
                    "value": "self.actions_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_actions if self._squash else tf.nn.tanh(raw_actions)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Model_48": {
                "variable": {
                    "value": "self.diagnostics_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "(raw_actions, actions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_32": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_36": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "x": {
                    "value": "raw_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._policy_net(input_shapes=(conditions.shape[1:],), output_size=output_shape[0])(conditions)",
                            "Call"
                        ],
                        [
                            "MLP(input_shapes=input_shapes, hidden_layer_sizes=self._hidden_layer_sizes, output_size=output_size, activation=self._activation, output_activation=self._output_activation, name='{}/GaussianMLPPolicy'.format(self._name))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_37": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/policy/gaussian_policy.py": {
        "tensorflow": {
            "Model_89": {
                "variable": {
                    "value": "self.latents_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda batch_size: base_distribution.sample(batch_size))(batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_90": {
                "variable": {
                    "value": "self.latents_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_116": {
                "variable": {
                    "value": "self.actions_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda raw_actions: squash_bijector.forward(raw_actions))(raw_actions)",
                            "Call"
                        ],
                        [
                            "bijector.forward(latents)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_121": {
                "variable": {
                    "value": "self.actions_model_for_fixed_latents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "(*self.condition_inputs, self.latents_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "actions_for_fixed_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda raw_actions: squash_bijector.forward(raw_actions))(raw_actions_for_fixed_latents)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_129": {
                "variable": {
                    "value": "self.deterministic_actions_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda shift: squash_bijector.forward(shift))(shift)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_151": {
                "variable": {
                    "value": "self.actions_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Model_159": {
                "variable": {
                    "value": "self.log_pis_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "(*self.condition_inputs, self.actions_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "log_pis_for_action_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(log_pis_fn)([shift, log_scale_diag, self.actions_input])",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_163": {
                "variable": {
                    "value": "self.diagnostics_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "(shift, log_scale_diag, log_pis, raw_actions, actions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_50": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_54": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_66": {
                "function": {
                    "value": "lambda shift_and_log_scale_diag: tf.split(shift_and_log_scale_diag, num_or_size_splits=2, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_73": {
                "function": {
                    "value": "lambda log_scale_diag: tf.clip_by_value(log_scale_diag, *SCALE_DIAG_MIN_MAX)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_78": {
                "function": {
                    "value": "lambda x: tf.shape(x)[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_85": {
                "function": {
                    "value": "lambda batch_size: base_distribution.sample(batch_size)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_100": {
                "function": {
                    "value": "raw_actions_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_104": {
                "function": {
                    "value": "raw_actions_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_113": {
                "function": {
                    "value": "lambda raw_actions: squash_bijector.forward(raw_actions)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_118": {
                "function": {
                    "value": "lambda raw_actions: squash_bijector.forward(raw_actions)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_125": {
                "function": {
                    "value": "lambda shift: squash_bijector.forward(shift)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_153": {
                "function": {
                    "value": "log_pis_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_156": {
                "function": {
                    "value": "log_pis_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_83": {
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_55": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_67": {
                "value": {
                    "value": "shift_and_log_scale_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._shift_and_log_scale_diag_net(input_shapes=(conditions.shape[1:],), output_size=output_shape[0] * 2)(conditions)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_74": {
                "t": {
                    "value": "log_scale_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda log_scale_diag: tf.clip_by_value(log_scale_diag, *SCALE_DIAG_MIN_MAX))(log_scale_diag)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "*SCALE_DIAG_MIN_MAX",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_96": {
                "x": {
                    "value": "log_scale_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda log_scale_diag: tf.clip_by_value(log_scale_diag, *SCALE_DIAG_MIN_MAX))(log_scale_diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_136": {
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_141": {
                "x": {
                    "value": "log_scale_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda log_scale_diag: tf.clip_by_value(log_scale_diag, *SCALE_DIAG_MIN_MAX))(log_scale_diag)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/samplers/sampler.py": {
        "tensorflow": {
            "one_hot_95": {
                "variable": {
                    "value": "mix_observe_0",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._current_observation_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.num_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_105": {
                "indices": {
                    "value": "action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, self.env.action_num)",
                            "Call"
                        ],
                        [
                            "[action_0]",
                            "List"
                        ],
                        [
                            "self.agents[0].act(mix_observe_0)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_120": {
                "indices": {
                    "value": "action_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, self.env.action_num)",
                            "Call"
                        ],
                        [
                            "[action_0]",
                            "List"
                        ],
                        [
                            "self.agents[0].act(mix_observe_0)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_164": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_172": {
                "indices": {
                    "value": "opponent_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_n[[j for j in range(len(action_n)) if j != i]].flatten()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/samplers/sampler_highway.py": {
        "tensorflow": {
            "one_hot_229": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_125": {
                "indices": {
                    "value": "action_n[leader.index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_150": {
                "indices": {
                    "value": "action_n[leader.index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/samplers/sampler_highway_bilevel.py": {
        "tensorflow": {
            "one_hot_188": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_131": {
                "indices": {
                    "value": "action_n[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_141": {
                "indices": {
                    "value": "action_n[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/samplers/sampler_highway_iq.py": {
        "tensorflow": {
            "one_hot_171": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/samplers/sampler_highway_maddpg.py": {
        "tensorflow": {
            "one_hot_156": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/samplers/sampler_highway_td3.py": {
        "tensorflow": {
            "one_hot_160": {
                "indices": {
                    "value": "action_n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/trainer/utils.py": {
        "tensorflow": {
            "one_hot_18": {
                "indices": {
                    "value": "target_actions_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "agents[1].action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/trainer/utils_highway.py": {
        "tensorflow": {
            "one_hot_43": {
                "variable": {
                    "value": "mix_obs[:, env.num_state:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_leader_actions[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/trainer/utils_highway_iq.py": {
        "tensorflow": {}
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/trainer/utils_highway_leader_q.py": {
        "tensorflow": {
            "one_hot_37": {
                "indices": {
                    "value": "target_actions_n[closest_leaders[j].index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "env.action_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/trainer/utils_highway_maddpg.py": {
        "tensorflow": {}
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/trainer/utils_maddpg.py": {
        "tensorflow": {
            "one_hot_28": {
                "indices": {
                    "value": "target_actions_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "agents[1].action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_52": {
                "indices": {
                    "value": "target_actions_n[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "agents[1].action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/utils/keras.py": {
        "tensorflow": {
            "load_model_21": {
                "variable": {
                    "value": "loaded_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "fd.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{self.__class__.__name__: self.__class__}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "save_model_10": {
                "model": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "fd.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/utils/random.py": {
        "tensorflow": {
            "set_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed % 234234234523",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/utils/tf_utils.py": {
        "tensorflow": {
            "group_46": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'soft_variables_update'",
                            "str"
                        ],
                        [
                            "'{}_{}'.format(name, op_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "atanh_82": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atanh(actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.math.log(1 - tf.tanh(actions) ** 2 + EPS)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_35": {
                "name": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'soft_variables_update'",
                            "str"
                        ],
                        [
                            "'{}_{}'.format(name, op_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_83": {
                "x": {
                    "value": "1 - tf.tanh(actions) ** 2 + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_norm_61": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "IndexedSlices_62": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_norm(grad.values, max_norm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "grad.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_64": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.IndexedSlices(tmp, grad.indices, grad.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(grad, max_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_83": {
                "x": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atanh(actions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/bilevel_pg/bilevelpg/value_functions/value_function.py": {
        "tensorflow": {
            "Model_52": {
                "variable": {
                    "value": "self.values_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._value_net(input_shapes=(conditions.shape[1:],), output_size=output_shape[0])(conditions)",
                            "Call"
                        ],
                        [
                            "self.diagnostics_model.predict(conditions)",
                            "Call"
                        ],
                        [
                            "MLP(input_shapes=input_shapes, hidden_layer_sizes=self._hidden_layer_sizes, output_size=output_size, activation=self._activation, output_activation=self._output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_53": {
                "variable": {
                    "value": "self.diagnostics_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.condition_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._value_net(input_shapes=(conditions.shape[1:],), output_size=output_shape[0])(conditions)",
                            "Call"
                        ],
                        [
                            "self.diagnostics_model.predict(conditions)",
                            "Call"
                        ],
                        [
                            "MLP(input_shapes=input_shapes, hidden_layer_sizes=self._hidden_layer_sizes, output_size=output_size, activation=self._activation, output_activation=self._output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_33": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_37": {
                "function": {
                    "value": "lambda x: tf.concat(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/run_trainer_highway_bilevel.py": {
        "tensorflow": {
            "uniform_36": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "logits": {
                    "value": "x - tf.math.log(-tf.math.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_37": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/run_trainer_highway_iq.py": {
        "tensorflow": {
            "uniform_35": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "logits": {
                    "value": "x - tf.math.log(-tf.math.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_36": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/run_trainer_highway_maddpg.py": {
        "tensorflow": {
            "uniform_25": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "logits": {
                    "value": "x - tf.math.log(-tf.math.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_26": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(tf.shape(x))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bilevel_pg_highway_1x1/bilevel_pg/run_trainer_highway_td3.py": {
        "tensorflow": {}
    },
    "matrix_game_baselines/drl/ddpg/actor.py": {
        "tensorflow": {
            "device_39": {
                "device_name": {
                    "value": "self.c.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_53": {
                "variable": {
                    "value": "self.scaled_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.c.ddpg.upper_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.previous_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + [self.c.outputs]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "a": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "term1.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "term2.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/drl/ddpg/critic.py": {
        "tensorflow": {
            "device_41": {
                "device_name": {
                    "value": "self.c.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + [self.c.outputs]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.previous_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + [self.c.outputs]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_69": {
                "ys": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "a": {
                    "value": "self.previous_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "term3.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "a": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "term1.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "term2.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "term1.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "a": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "term2.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/drl/ddpg/ddpg.py": {
        "tensorflow": {}
    },
    "matrix_game_baselines/drl/dqn/dqn.py": {
        "tensorflow": {
            "placeholder_143": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_213": {
                "variable": {
                    "value": "self.maxOutputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "self.outputsIndices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "outputsIndices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_215": {
                "variable": {
                    "value": "self.outputsUsingIndices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.outputsIndices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_216": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_220": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.K, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_222": {
                "variable": {
                    "value": "self.simHash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.A, self.features, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_150": {
                "device_name": {
                    "value": "self.c.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_154": {
                "variable": {
                    "value": "actionsOneHot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.c.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "actionsOneHot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_159": {
                "variable": {
                    "value": "self.activeQValues",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.cNet.outputs * actionsOneHot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "activeQValues",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_199": {
                "device_name": {
                    "value": "self.c.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_221": {
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_222": {
                "a": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "optimiser",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hLoss(self.deltaAfter)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_168": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.c.dqn.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_166": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/drl/drl.py": {
        "tensorflow": {
            "ConfigProto_91": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_93": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False, gpu_options=tf.GPUOptions(allow_growth=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_97": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_18": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_140": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "folder + model + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_17": {
                "device_name": {
                    "value": "self.c.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_94": {
                "var_list": {
                    "value": "set(tf.global_variables())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_107": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_116": {
                "variable": {
                    "value": "self.syncNetworks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_117": {
                "variable": {
                    "value": "self.incSyncNetworks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*incAssigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GPUOptions_92": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_114": {
                "x": {
                    "value": "c.value()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.c.tau",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_115": {
                "x": {
                    "value": "t.value()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 - self.c.tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/madrl/hysteretic/hql.py": {
        "tensorflow": {
            "where_14": {
                "condition": {
                    "value": "tf.greater(self.delta, tf.constant(0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.delta * self.c.hysteretic.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_14": {
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_14": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/madrl/leniency/leniency.py": {
        "tensorflow": {
            "placeholder_82": {
                "variable": {
                    "value": "self.leniency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "leniency",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_96": {
                "condition": {
                    "value": "tf.greater(self.delta, tf.constant(0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.delta * (1.0 - self.leniency)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_96": {
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/madrl/nui/nui_dqn.py": {
        "tensorflow": {}
    },
    "matrix_game_baselines/madrl/scheduled_hysteretic/shdqn.py": {
        "tensorflow": {
            "placeholder_61": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_q_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_64": {
                "variable": {
                    "value": "action_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "config.NUMBER_OF_ACTIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "action_one_hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "q_acted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.current_network.outputs * action_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "q_acted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_67": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(self.delta, tf.constant(0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.delta * self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_70": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "'optimizer_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "clipped_error(self.delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "greater_67": {
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_68": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/matrix_game.py": {
        "tensorflow": {}
    },
    "matrix_game_baselines/net/autoencoder.py": {
        "tensorflow": {
            "device_19": {
                "device_name": {
                    "value": "self.c.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._k, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_28": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.c.cnn.max_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "self.l2_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, reduce(lambda x, y: x * y, shape[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "self.dl1_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.dl1_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 4, 4, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_68": {
                "variable": {
                    "value": "self.ae_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "hLoss(self.l0 - self.outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_69": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_70": {
                "variable": {
                    "value": "self.simHash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.A, self.dense_sig, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_25": {
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "a": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.dense_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "self.dense_sig",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/net/feature_extractors.py": {
        "tensorflow": {
            "reshape_24": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayers(i, c) if c.use_conv == True else fcLayers(i, c)",
                            "IfExp"
                        ],
                        [
                            "tf.reshape(features, [batch_size, sequence_length, c.recurrent.h_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, sequence_length, c.recurrent.h_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_25": {
                "variable": {
                    "value": "(output, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convLayers(i, c) if c.use_conv == True else fcLayers(i, c)",
                            "IfExp"
                        ],
                        [
                            "tf.reshape(features, [batch_size, sequence_length, c.recurrent.h_size])",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_36": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "div_38": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(inputs, c.cnn.max_in)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, o, [k, k], [s, s], name='conv' + str(layer), format=c.cnn.format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, reduce(lambda x, y: x * y, shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.subtract(inputs, tf.reduce_min(inputs)), tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs)))",
                            "Call"
                        ],
                        [
                            "relu(tflearn.fully_connected(inputs, s, weights_init=c.fcfe.w_init))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "c.cnn.max_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(inputs, c.cnn.max_in)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, o, [k, k], [s, s], name='conv' + str(layer), format=c.cnn.format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, reduce(lambda x, y: x * y, shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.subtract(inputs, tf.reduce_min(inputs)), tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs)))",
                            "Call"
                        ],
                        [
                            "relu(tflearn.fully_connected(inputs, s, weights_init=c.fcfe.w_init))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, reduce(lambda x, y: x * y, shape[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_54": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(inputs, c.cnn.max_in)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, o, [k, k], [s, s], name='conv' + str(layer), format=c.cnn.format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, reduce(lambda x, y: x * y, shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.subtract(inputs, tf.reduce_min(inputs)), tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs)))",
                            "Call"
                        ],
                        [
                            "relu(tflearn.fully_connected(inputs, s, weights_init=c.fcfe.w_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_56": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(inputs, tf.reduce_min(inputs))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, c.recurrent.h_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_56": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(inputs, c.cnn.max_in)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, o, [k, k], [s, s], name='conv' + str(layer), format=c.cnn.format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, reduce(lambda x, y: x * y, shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.subtract(inputs, tf.reduce_min(inputs)), tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs)))",
                            "Call"
                        ],
                        [
                            "relu(tflearn.fully_connected(inputs, s, weights_init=c.fcfe.w_init))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_min(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_57": {
                "x": {
                    "value": "tf.reduce_max(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_min(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_56": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(inputs, c.cnn.max_in)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, o, [k, k], [s, s], name='conv' + str(layer), format=c.cnn.format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, reduce(lambda x, y: x * y, shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.subtract(inputs, tf.reduce_min(inputs)), tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs)))",
                            "Call"
                        ],
                        [
                            "relu(tflearn.fully_connected(inputs, s, weights_init=c.fcfe.w_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_57": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(inputs, c.cnn.max_in)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, o, [k, k], [s, s], name='conv' + str(layer), format=c.cnn.format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, reduce(lambda x, y: x * y, shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.subtract(inputs, tf.reduce_min(inputs)), tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs)))",
                            "Call"
                        ],
                        [
                            "relu(tflearn.fully_connected(inputs, s, weights_init=c.fcfe.w_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_57": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(inputs, c.cnn.max_in)",
                            "Call"
                        ],
                        [
                            "conv2d(inputs, o, [k, k], [s, s], name='conv' + str(layer), format=c.cnn.format)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, reduce(lambda x, y: x * y, shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.subtract(inputs, tf.reduce_min(inputs)), tf.subtract(tf.reduce_max(inputs), tf.reduce_min(inputs)))",
                            "Call"
                        ],
                        [
                            "relu(tflearn.fully_connected(inputs, s, weights_init=c.fcfe.w_init))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "matrix_game_baselines/net/network.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[None, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + c.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + c.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, c.dim[0], c.dim[1], c.erm.sequence_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, c.dim[2], c.dim[0], c.dim[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, c.erm.sequence_len, c.dim[0], c.dim[1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "matrix_game_baselines/net/ops.py": {
        "tensorflow": {
            "abs_17": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_18": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_21": {
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(residual, delta)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.square(residual)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta * residual - 0.5 * tf.square(delta)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel[0], kernel[1], input.get_shape()[1], output_dimension]",
                            "List"
                        ],
                        [
                            "[kernel[0], kernel[1], input.get_shape()[-1], output_dimension]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', kernel_shape, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', kernel, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, k_d, input.get_shape()[-1], output_shape], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [shape[1], output_size], tf.float32, initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, stride[0], stride[1]]",
                            "List"
                        ],
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_59": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, w, stride, padding, data_format=format)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(input, w, strides=[1, 2, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "lrelu(tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape()))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dimension], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_channels], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [output_size], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size[0], kernel_size[1], output_channels, input_channels]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, k_d, input.get_shape()[-1], output_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_106": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', kernel_shape, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', kernel, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, k_d, input.get_shape()[-1], output_shape], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [shape[1], output_size], tf.float32, initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_127": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(input, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dimension], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_channels], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [output_size], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_19": {
                "x": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d_transpose'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d_transpose'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d_transpose'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d_transpose'",
                            "Method Argument"
                        ],
                        [
                            "'conv3d'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_20": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_97": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', kernel_shape, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', kernel, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, k_d, input.get_shape()[-1], output_shape], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [shape[1], output_size], tf.float32, initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[32, heightAndWidth[0], heightAndWidth[1], output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', kernel_shape, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', kernel, tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, k_d, input.get_shape()[-1], output_shape], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [shape[1], output_size], tf.float32, initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_57": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_90": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_105": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_107": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bias_add_108": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, w, stride, padding, data_format=format)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(input, w, strides=[1, 2, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "lrelu(tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape()))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_126": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}