{
    "code/model/training.py": {
        "sklearn": {},
        "torch": {
            "tensor_186": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "dev_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dev_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(dev_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "dev_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dev_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(dev_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "train_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(train_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "dev_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dev_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(dev_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_196": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_197": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(train_inputs, train_masks, train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(train_inputs, train_masks, train_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_199": {
                "variable": {
                    "value": "dev_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "dev_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_200": {
                "variable": {
                    "value": "dev_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dev_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(dev_inputs, dev_masks, dev_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(dev_inputs, dev_masks, dev_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "dev_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dev_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "device_226": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_227": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "the_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "label2idx",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "label_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_name + '.labels'",
                            "BinOp"
                        ],
                        [
                            "task_name + '_' + emotion_label + '.labels'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_device_name_228": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "the_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/model/utils.py": {
        "sklearn": {
            "f1_score_401": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "new_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_403": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_labels()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "norm_26": {
                "input": {
                    "value": "attributions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attributions.sum(dim=-1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "attributions / torch.norm(attributions)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/model/captum_label.py": {
        "torch": {
            "tensor_329": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "all_ref_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.ref_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_269": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, '../cached_{}={}_{}_{}'.format('test_input' if evaluate else 'train', basename_eval_dataset, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('test', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ],
                        [
                            "'../output_data/' + args.data_dir + '/cached'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorDataset_342": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_345": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SequentialSampler_71": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_71": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.pad_token_id, pad_token_segment_id=tokenizer.pad_token_type_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, '../cached_{}={}_{}_{}'.format('test_input' if evaluate else 'train', basename_eval_dataset, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('test', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ],
                        [
                            "'../output_data/' + args.data_dir + '/cached'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_133": {
                "variable": {
                    "value": "pred_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "logits.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.append(preds, logits.detach().cpu().numpy(), axis=0)",
                            "Call"
                        ],
                        [
                            "predict(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/configuration_new_captum.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_52": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_54": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}