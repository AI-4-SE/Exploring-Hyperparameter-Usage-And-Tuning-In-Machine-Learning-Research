{
    "text_models/dataset.py": {
        "sklearn": {
            "LinearSVC_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "text_models/inhouse/text_representations.py": {
        "sklearn": {
            "LinearSVC_140": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "recall_score_163": {
                "variable": {
                    "value": "perf",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_emo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[emo in i for i in y]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "hy > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "text_models/model_selection.py": {
        "sklearn": {
            "KFold_231": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "text_models/place.py": {
        "sklearn": {
            "KMeans_722": {
                "variable": {
                    "value": "self._data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_clusters(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "KMeans_707": {
                "variable": {
                    "value": "km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(2, min(8, X.shape[0]))",
                            "Call"
                        ],
                        [
                            "keys",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "text_models/tests/test_model_selection.py": {
        "sklearn": {
            "KFold_50": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KFold_12": {
                "n_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KFold_34": {
                "n_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "f1_score_11": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_33": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_55": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "text_models/tests/test_place.py": {
        "sklearn": {}
    },
    "text_models/utils.py": {
        "sklearn": {
            "f1_score_61": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_73": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "text_models/vocabulary.py": {
        "sklearn": {
            "cosine_similarity_651": {
                "variable": {
                    "value": "cs_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.atleast_2d(vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "vec_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(prev_voc), len(w2id)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}