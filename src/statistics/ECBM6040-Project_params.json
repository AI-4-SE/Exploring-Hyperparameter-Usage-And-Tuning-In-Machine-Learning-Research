{
    "utils/evaluation.py": {
        "sklearn": {
            "MeanShift_29": {
                "variable": {
                    "value": "mean_shift",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "distance",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bin_seeding": {
                    "value": "True",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "unique_17": {
                "variable": {
                    "value": "element",
                    "possible_values": []
                },
                "input": {
                    "value": "gray_img",
                    "possible_values": []
                }
            }
        }
    },
    "utils/lane.py": {
        "sklearn": {
            "LinearRegression_7": {
                "variable": {
                    "value": "lr",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Lanenet/cluster_loss3.py": {
        "torch": {
            "cluster_loss_helper_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "cluster_loss_61": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "unique_25": {
                "variable": {
                    "value": "(output, inverse_indices, counts)",
                    "possible_values": []
                },
                "input": {
                    "value": "correct_label_reshape",
                    "possible_values": [
                        [
                            "correct_label.view(correct_label.shape[0], 1, correct_label.shape[1] * correct_label.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "index_select_34": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "muc",
                    "possible_values": [
                        [
                            "scatter(prediction_reshape, inverse_indices, dim=2, reduce='mean')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "inverse_indices.view(inverse_indices.shape[-1])",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "norm_37": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "possible_values": [
                        [
                            "torch.index_select(muc, 2, inverse_indices.view(inverse_indices.shape[-1]), out=None)",
                            "Call"
                        ],
                        [
                            "dis - prediction_reshape",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "dis - delta_v",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ],
                        [
                            "muc[:, :, A] - muc[:, :, B]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "delta_d - dis",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "clamp_39": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "possible_values": [
                        [
                            "torch.index_select(muc, 2, inverse_indices.view(inverse_indices.shape[-1]), out=None)",
                            "Call"
                        ],
                        [
                            "dis - prediction_reshape",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "dis - delta_v",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ],
                        [
                            "muc[:, :, A] - muc[:, :, B]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "delta_d - dis",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "pow_40": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "possible_values": [
                        [
                            "torch.index_select(muc, 2, inverse_indices.view(inverse_indices.shape[-1]), out=None)",
                            "Call"
                        ],
                        [
                            "dis - prediction_reshape",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "dis - delta_v",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ],
                        [
                            "muc[:, :, A] - muc[:, :, B]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "delta_d - dis",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "L_dist",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "unique_69": {
                "variable": {
                    "value": "(output, counts)",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_labels",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "False",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "div_71": {
                "variable": {
                    "value": "inverse_weights",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log(torch.add(torch.div(counts, torch.sum(counts)), torch.tensor(1.02, dtype=torch.float)))",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_74": {
                "variable": {
                    "value": "binary_loss",
                    "possible_values": []
                },
                "weight": {
                    "value": "inverse_weights",
                    "possible_values": [
                        [
                            "torch.div(1.0, torch.log(torch.add(torch.div(counts, torch.sum(counts)), torch.tensor(1.02, dtype=torch.float))))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "instance_segmenatation_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "prediction",
                    "possible_values": []
                },
                "input": {
                    "value": "instance_logits[dimen]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "correct_label",
                    "possible_values": []
                },
                "input": {
                    "value": "instance_labels[dimen]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "L_var",
                    "possible_values": [
                        [
                            "scatter(dis, inverse_indices.view(inverse_indices.shape[-1]), dim=1, reduce='mean')",
                            "Call"
                        ],
                        [
                            "torch.sum(L_var) / num_instances",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_71": {
                "input": {
                    "value": "torch.add(torch.div(counts, torch.sum(counts)), torch.tensor(1.02, dtype=torch.float))",
                    "possible_values": []
                }
            },
            "norm_50": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "possible_values": [
                        [
                            "torch.index_select(muc, 2, inverse_indices.view(inverse_indices.shape[-1]), out=None)",
                            "Call"
                        ],
                        [
                            "dis - prediction_reshape",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "dis - delta_v",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ],
                        [
                            "muc[:, :, A] - muc[:, :, B]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "delta_d - dis",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "possible_values": []
                },
                "dtype": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "clamp_52": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "possible_values": [
                        [
                            "torch.index_select(muc, 2, inverse_indices.view(inverse_indices.shape[-1]), out=None)",
                            "Call"
                        ],
                        [
                            "dis - prediction_reshape",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "dis - delta_v",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ],
                        [
                            "muc[:, :, A] - muc[:, :, B]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "delta_d - dis",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "pow_53": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "possible_values": [
                        [
                            "torch.index_select(muc, 2, inverse_indices.view(inverse_indices.shape[-1]), out=None)",
                            "Call"
                        ],
                        [
                            "dis - prediction_reshape",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "dis - delta_v",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ],
                        [
                            "muc[:, :, A] - muc[:, :, B]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dis, dim=1, keepdim=False, out=None, dtype=None)",
                            "Call"
                        ],
                        [
                            "delta_d - dis",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dis, min=0.0)",
                            "Call"
                        ],
                        [
                            "torch.pow(dis, 2, out=None)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "add_72": {
                "input": {
                    "value": "torch.div(counts, torch.sum(counts))",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(1.02, dtype=torch.float)",
                    "possible_values": []
                }
            },
            "div_72": {
                "input": {
                    "value": "counts",
                    "possible_values": [
                        [
                            "counts.float()",
                            "Call"
                        ],
                        [
                            "counts.float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(counts)",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "1.02",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "counts",
                    "possible_values": [
                        [
                            "counts.float()",
                            "Call"
                        ],
                        [
                            "counts.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Lanenet/model2.py": {
        "torch": {
            "InitialBlock_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_41": {
                    "variable": {
                        "value": "self.main_branch",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels - 3",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "False",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "MaxPool2d_50": {
                    "variable": {
                        "value": "self.ext_branch",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_53": {
                    "variable": {
                        "value": "self.batch_norm",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channels",
                        "possible_values": []
                    }
                }
            },
            "RegularBottleneck_71": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_139": {
                    "variable": {
                        "value": "self.ext_conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(channels, internal_channels, kernel_size=1, stride=1, bias=bias)",
                        "possible_values": []
                    }
                },
                "Sequential_180": {
                    "variable": {
                        "value": "self.ext_conv3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(internal_channels, channels, kernel_size=1, stride=1, bias=bias)",
                        "possible_values": []
                    }
                },
                "Dropout2d_188": {
                    "variable": {
                        "value": "self.ext_regul",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout_prob",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "DownsamplingBottleneck_209": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.return_indices": {
                    "value": "return_indices",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "MaxPool2d_266": {
                    "variable": {
                        "value": "self.main_max1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "return_indices": {
                        "value": "return_indices",
                        "possible_values": [
                            [
                                "False",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Sequential_276": {
                    "variable": {
                        "value": "self.ext_conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels, internal_channels, kernel_size=2, stride=2, bias=bias)",
                        "possible_values": []
                    }
                },
                "Sequential_285": {
                    "variable": {
                        "value": "self.ext_conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(internal_channels, internal_channels, kernel_size=3, stride=1, padding=1, bias=bias)",
                        "possible_values": []
                    }
                },
                "Sequential_295": {
                    "variable": {
                        "value": "self.ext_conv3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(internal_channels, out_channels, kernel_size=1, stride=1, bias=bias)",
                        "possible_values": []
                    }
                },
                "Dropout2d_303": {
                    "variable": {
                        "value": "self.ext_regul",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout_prob",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "UpsamplingBottleneck_340": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_394": {
                    "variable": {
                        "value": "self.main_conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=bias)",
                        "possible_values": []
                    }
                },
                "MaxUnpool2d_400": {
                    "variable": {
                        "value": "self.main_unpool1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Sequential_407": {
                    "variable": {
                        "value": "self.ext_conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels, internal_channels, kernel_size=1, bias=bias)",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_413": {
                    "variable": {
                        "value": "self.ext_tconv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "internal_channels",
                        "possible_values": [
                            [
                                "channels // internal_ratio",
                                "BinOp"
                            ],
                            [
                                "in_channels // internal_ratio",
                                "BinOp"
                            ],
                            [
                                "in_channels // internal_ratio",
                                "BinOp"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "internal_channels",
                        "possible_values": [
                            [
                                "channels // internal_ratio",
                                "BinOp"
                            ],
                            [
                                "in_channels // internal_ratio",
                                "BinOp"
                            ],
                            [
                                "in_channels // internal_ratio",
                                "BinOp"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "False",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "BatchNorm2d_419": {
                    "variable": {
                        "value": "self.ext_tconv1_bnorm",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "internal_channels",
                        "possible_values": [
                            [
                                "channels // internal_ratio",
                                "BinOp"
                            ],
                            [
                                "in_channels // internal_ratio",
                                "BinOp"
                            ],
                            [
                                "in_channels // internal_ratio",
                                "BinOp"
                            ]
                        ]
                    }
                },
                "Sequential_423": {
                    "variable": {
                        "value": "self.ext_conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(internal_channels, out_channels, kernel_size=1, bias=bias)",
                        "possible_values": []
                    }
                },
                "Dropout2d_428": {
                    "variable": {
                        "value": "self.ext_regul",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout_prob",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Lanenet_453": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ConvTranspose2d_503": {
                    "variable": {
                        "value": "self.binary_transposed_conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "binary_seg",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_511": {
                    "variable": {
                        "value": "self.embedding_transposed_conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "embedding_dim",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "ones_578": {
                "variable": {
                    "value": "test_input",
                    "possible_values": []
                },
                "*size": {
                    "value": "(8, 3, 256, 512)",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main, ext)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "padding",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "possible_values": []
                },
                "out": {
                    "value": "ch_ext - ch_main",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "main",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main, padding)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.ext_conv2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, internal_channels, kernel_size=(kernel_size, 1), stride=1, padding=(padding, 0), dilation=dilation, bias=bias)",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.ext_conv2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(internal_channels, internal_channels, kernel_size=kernel_size, stride=1, padding=padding, dilation=dilation, bias=bias)",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_145": {
                "num_features": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "channels",
                    "possible_values": []
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_282": {
                "num_features": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_292": {
                "num_features": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_296": {
                "in_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_301": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_396": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "Conv2d_408": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_410": {
                "num_features": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_424": {
                "in_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_426": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0)",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding)",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "torch.zeros(n, ch_ext - ch_main, h, w)",
                            "Call"
                        ],
                        [
                            "padding.cuda()",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_177": {
                "num_features": {
                    "value": "internal_channels",
                    "possible_values": [
                        [
                            "channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ],
                        [
                            "in_channels // internal_ratio",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/dataset_utils.py": {
        "torch": {
            "TUSIMPLE_8": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.transforms": {
                    "value": "transforms",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.resize": {
                    "value": "resize",
                    "possible_values": [
                        [
                            "(512",
                            "MethodArgument"
                        ],
                        [
                            "(512",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.flag": {
                    "value": "flag",
                    "possible_values": [
                        [
                            "'train'",
                            "MethodArgument"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TUSIMPLE_AUG_67": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.transforms": {
                    "value": "transforms",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.resize": {
                    "value": "resize",
                    "possible_values": [
                        [
                            "(512",
                            "MethodArgument"
                        ],
                        [
                            "(512",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.flag": {
                    "value": "flag",
                    "possible_values": [
                        [
                            "'train'",
                            "MethodArgument"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "gt_image",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_image",
                    "possible_values": [
                        [
                            "cv2.imread(self.img_pathes[idx][0], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_image, dsize=self.resize, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "gt_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gt_image, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "np.transpose(gt_image, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int(idx / 2)][0], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int((idx - 1) / 2)][0], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt_image, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_image, dsize=self.resize, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "gt_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gt_image, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "np.transpose(gt_image, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "gt_binary_image",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_binary_image",
                    "possible_values": [
                        [
                            "cv2.imread(self.img_pathes[idx][1], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_binary_image, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(gt_binary_image / 255.0, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "gt_binary_image[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_binary_image, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_binary_image, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int(idx / 2)][1], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int((idx - 1) / 2)][1], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt_binary_image, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_binary_image, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(gt_binary_image / 255.0, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "gt_binary_image[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_binary_image, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_binary_image, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "gt_instance",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_instance",
                    "possible_values": [
                        [
                            "cv2.imread(self.img_pathes[idx][2], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_instance, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "gt_instance[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_instance, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_instance, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int(idx / 2)][2], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int((idx - 1) / 2)][2], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt_instance, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_instance, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "gt_instance[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_instance, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_instance, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "gt_image",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_image",
                    "possible_values": [
                        [
                            "cv2.imread(self.img_pathes[idx][0], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_image, dsize=self.resize, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "gt_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gt_image, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "np.transpose(gt_image, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int(idx / 2)][0], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int((idx - 1) / 2)][0], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt_image, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_image, dsize=self.resize, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "gt_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gt_image, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "np.transpose(gt_image, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "gt_binary_image",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_binary_image",
                    "possible_values": [
                        [
                            "cv2.imread(self.img_pathes[idx][1], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_binary_image, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(gt_binary_image / 255.0, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "gt_binary_image[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_binary_image, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_binary_image, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int(idx / 2)][1], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int((idx - 1) / 2)][1], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt_binary_image, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_binary_image, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(gt_binary_image / 255.0, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "gt_binary_image[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_binary_image, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_binary_image, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "gt_instance",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_instance",
                    "possible_values": [
                        [
                            "cv2.imread(self.img_pathes[idx][2], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_instance, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "gt_instance[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_instance, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_instance, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int(idx / 2)][2], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.imread(self.img_pathes[int((idx - 1) / 2)][2], cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt_instance, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(gt_instance, dsize=self.resize, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "gt_instance[:, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(gt_instance, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(gt_instance, dtype=torch.long).view(self.resize[1], self.resize[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            }
        }
    }
}