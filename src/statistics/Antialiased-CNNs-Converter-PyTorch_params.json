{
    "antialiased_cnns_converter/antialiased_cnns_converter.py": {
        "torch": {
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_40": {
                "variable": {
                    "value": "self.max_pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_73": {
                "variable": {
                    "value": "mod",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "antialiased_cnns_converter/functions.py": {
        "torch": {
            "Tensor_40": {
                "variable": {
                    "value": "filt",
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "filt",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "filt",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_53": {
                "input": {
                    "value": "self.pad(inp)",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt[None, None, :, :].repeat((inp.shape[1], 1, 1, 1))",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "filt",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_107": {
                "input": {
                    "value": "self.pad(inp)",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "possible_values": []
                }
            }
        }
    }
}