{
    "app/search_subbert.py": {
        "torch": {
            "device_228": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_230": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_233": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "SequentialSampler_100": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(self.args, eval_task, self.tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(self.args, eval_task, self.tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "possible_values": []
                }
            },
            "set_device_232": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_229": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "app/train_superbert.py": {
        "torch": {
            "DataLoader_159": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "SummaryWriter_154": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "path_tensorboard",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, train_type + str(phase), 'tensorboard')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_194": {
                "variable": {
                    "value": "super_model",
                    "possible_values": []
                },
                "module": {
                    "value": "super_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.super_model, from_tf=bool('.ckpt' in args.super_model), config=super_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "teacher_model",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.teacher_model, from_tf=bool('.ckpt' in args.teacher_model), config=teacher_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_198": {
                "variable": {
                    "value": "super_model",
                    "possible_values": []
                },
                "module": {
                    "value": "super_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.super_model, from_tf=bool('.ckpt' in args.super_model), config=super_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_201": {
                "variable": {
                    "value": "teacher_model",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.teacher_model, from_tf=bool('.ckpt' in args.teacher_model), config=teacher_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "device_383": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_384": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_387": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_479": {
                "variable": {
                    "value": "teacher_model",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.teacher_model, from_tf=bool('.ckpt' in args.teacher_model), config=teacher_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_482": {
                "variable": {
                    "value": "super_model",
                    "possible_values": []
                },
                "module": {
                    "value": "super_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.super_model, from_tf=bool('.ckpt' in args.super_model), config=super_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "RandomSampler_158": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_158": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_386": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DataParallel_486": {
                "variable": {
                    "value": "teacher_model",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.teacher_model, from_tf=bool('.ckpt' in args.teacher_model), config=teacher_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(teacher_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_487": {
                "variable": {
                    "value": "super_model",
                    "possible_values": []
                },
                "module": {
                    "value": "super_model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.super_model, from_tf=bool('.ckpt' in args.super_model), config=super_model_config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(super_model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(super_model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_532": {
                "obj": {
                    "value": "args",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_356": {
                "obj": {
                    "value": "args",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "clip_grad_norm__281": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__284": {
                "parameters": {
                    "value": "super_model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__306": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__308": {
                "parameters": {
                    "value": "super_model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "is_available_383": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "model/criterion.py": {
        "torch": {
            "softmax_27": {
                "variable": {
                    "value": "soft_targets",
                    "possible_values": []
                },
                "input": {
                    "value": "t_logits / T",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_softmax_28": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "s_logits / T",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "kl_div_29": {
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "F.log_softmax(s_logits / T, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_targets.detach()",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            }
        }
    },
    "model/supermodel.py": {
        "torch": {
            "Dropout_62": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "attention_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_197": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dropout_318": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "ModuleList_424": {
                "variable": {
                    "value": "self.layer",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "possible_values": []
                }
            },
            "Tanh_496": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_654": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "self.position_ids.device",
                    "possible_values": []
                }
            },
            "ones_600": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_602": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_63": {
                "start": {
                    "value": "config.max_position_embeddings",
                    "possible_values": []
                }
            },
            "Softmax_161": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_612": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_700": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_703": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "modules/embeddingsuper.py": {
        "torch": {
            "embedding_47": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.sampled_weight(part)",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "possible_values": []
                }
            }
        }
    },
    "modules/layernormsuper.py": {
        "torch": {
            "layer_norm_31": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(self.sample_embed_dim,)",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.samples['weight']",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.samples['bias']",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            }
        }
    },
    "modules/linearsuper.py": {
        "torch": {
            "linear_47": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.samples['weight']",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.samples['bias']",
                    "possible_values": []
                }
            }
        }
    },
    "utils/measure_utils.py": {
        "torch": {
            "tensor_16": {
                "data": {
                    "value": "[[5000] * 64 + [0] * 64]",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "[[1] * 64 + [0] * 64]",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[[0] * 50 + [1] * 28 + [0] * 50]",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[[random.choice([0, 1])]]",
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_utils.py": {
        "torch": {
            "tensor_143": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_156": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SequentialSampler_44": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}