{
    "linear.py": {
        "torch": {
            "DataLoader_73": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "STL10(root='data', split='train', transform=utils.train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "STL10(root='data', split='test', transform=utils.test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_80": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Net(num_class=len(train_data.classes), pretrained_path=model_path).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Model().cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.module.fc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_83": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_19": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Net(num_class=len(train_data.classes), pretrained_path=model_path).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Model().cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_28": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.f(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_52": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "self.fc(feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "pretrained_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "enable_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "(prediction[:, 0:1] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "(prediction[:, 0:5] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "ones_17": {
                "variable": {
                    "value": "negative_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "negative_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(negative_mask, negative_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.STL10Pair(root='data', split='train+unlabeled', transform=utils.train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "memory_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "memory_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.STL10Pair(root='data', split='train', transform=utils.test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.STL10Pair(root='data', split='test', transform=utils.test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_138": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Model(feature_dim).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_1, out_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_36": {
                "variable": {
                    "value": "neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(out, out.t().contiguous()) / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_41": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(out_1 * out_2, dim=-1) / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos, pos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(feature_bank, dim=0).t().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_78": {
                "variable": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "feature_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "memory_data_loader.dataset.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feature_bank.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "Ng",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Ng",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(-tau_plus * N * pos + neg.sum(dim=-1)) / (1 - tau_plus)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Ng, min=N * np.e ** (-1 / temperature))",
                            "Call"
                        ],
                        [
                            "neg.sum(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "N * np.e ** (-1 / temperature)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_89": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(feature_bank, dim=0).t().contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_93": {
                "variable": {
                    "value": "sim_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_labels.expand(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "sim_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.size(0) * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(memory_data.classes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "sim_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "pred_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_label.view(data.size(0), -1, c) * sim_weight.unsqueeze(dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "(pred_labels[:, :1] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "(pred_labels[:, :5] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'results/model_{}.pth'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_36": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([out_1, out_2], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "out.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "out_1 * out_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_54": {
                "input": {
                    "value": "pos / (pos + Ng)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.f",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 512, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_25": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.f(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_27": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g(feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}