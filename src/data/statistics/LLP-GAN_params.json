{
    "utils.py": {
        "sklearn": {
            "train_test_split_36": {
                "variable": {
                    "value": "(train_X, test_X, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "cifar_X",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "cifar_y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "5000",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "hp.RANDOM_STATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_38": {
                "variable": {
                    "value": "(train_X, valid_X, train_y, valid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_X",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "5000",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "hp.RANDOM_STATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "good-llp-gan.py": {
        "tensorflow": {
            "placeholder_63": {
                "variable": {
                    "value": "X_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mb_size, image_width, image_width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "Y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mb_size, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "trnow",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_151": {
                "variable": {
                    "value": "l_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_net_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_152": {
                "variable": {
                    "value": "l_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_net_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_158": {
                "variable": {
                    "value": "theta_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "G_",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_159": {
                "variable": {
                    "value": "theta_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "D_",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "input_tensor": {
                    "value": "tf.nn.softmax(d_net_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "input_tensor": {
                    "value": "d_net_fake_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_179": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_191": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_193": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_196": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensordot_173": {
                "variable": {
                    "value": "G_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_net_fake_feat / tf.norm(d_net_fake_feat, axis=1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "feat_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_net_fake_feat / tf.norm(d_net_fake_feat, axis=1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "variable": {
                    "value": "G_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G_pt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tensordot(feat_norm, feat_norm, axes=[[1], [1]])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(G_pt)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_181": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0003",
                            "Constant"
                        ]
                    ]
                },
                "beta1": {
                    "value": "BETA",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv2d_79": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[filter_size, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "nonlinearity",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_83": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[filter_size, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "nonlinearity",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_93": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "nonlinearity",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ],
                        [
                            "lrelu",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_99": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "trnow",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_102": {
                "input": {
                    "value": "tf.layers.average_pooling2d(layer, [old_width, old_width], [old_width, old_width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bn_dense(z, 4 * 4 * 512, bias=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (mb_size, 4, 4, 512))",
                            "Call"
                        ],
                        [
                            "bn_convlayer_t(h, 5, 2, 256, bias=False)",
                            "Call"
                        ],
                        [
                            "bn_convlayer_t(h, 5, 2, 128, bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=h, filters=channels, kernel_size=[5, 5], padding='same', activation=tf.nn.tanh, strides=(2, 2), use_bias=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_X, NUM_CLASSES)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(mb_size, 4, 4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_transpose_111": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bn_dense(z, 4 * 4 * 512, bias=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (mb_size, 4, 4, 512))",
                            "Call"
                        ],
                        [
                            "bn_convlayer_t(h, 5, 2, 256, bias=False)",
                            "Call"
                        ],
                        [
                            "bn_convlayer_t(h, 5, 2, 128, bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=h, filters=channels, kernel_size=[5, 5], padding='same', activation=tf.nn.tanh, strides=(2, 2), use_bias=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_X, NUM_CLASSES)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_131": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h_X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dropout_layer(X, 0.2)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 3, 1, 64)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 3, 1, 64)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 3, 2, 64)",
                            "Call"
                        ],
                        [
                            "dropout_layer(h_X, 0.5)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 3, 1, 128)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 3, 1, 128)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 3, 2, 128)",
                            "Call"
                        ],
                        [
                            "dropout_layer(h_X, 0.5)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 3, 1, 256)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 1, 1, 128)",
                            "Call"
                        ],
                        [
                            "convlayer(h_X, 1, 1, 64)",
                            "Call"
                        ],
                        [
                            "global_pool(h_X, 8)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "NUM_CLASSES",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_162": {
                "input_tensor": {
                    "value": "l_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_logsumexp(d_net_real, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_168": {
                "x": {
                    "value": "tf.reduce_mean(d_net_real_feat, axis=0) - tf.reduce_mean(d_net_fake_feat, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_180": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_187": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(d_net_real, axis=1), tf.argmax(Y_, axis=1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_87": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[filter_size, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_90": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[filter_size, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_96": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "average_pooling2d_102": {
                "inputs": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "[old_width, old_width]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[old_width, old_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "G_",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "D_",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_161": {
                "input_tensor": {
                    "value": "y_prob * tf.log(tf.reduce_mean(tf.nn.softmax(d_net_real), [0]) + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_162": {
                "features": {
                    "value": "l_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_logsumexp(d_net_real, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_172": {
                "tensor": {
                    "value": "d_net_fake_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_187": {
                "x": {
                    "value": "tf.equal(tf.argmax(d_net_real, axis=1), tf.argmax(Y_, axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_187": {
                "x": {
                    "value": "tf.argmax(d_net_real, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y_, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_76": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_161": {
                "x": {
                    "value": "tf.reduce_mean(tf.nn.softmax(d_net_real), [0]) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_187": {
                "input": {
                    "value": "Y_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "logits": {
                    "value": "d_net_real",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}