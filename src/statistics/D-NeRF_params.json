{
    "load_blender.py": {
        "torch": {
            "linspace_128": {
                "variable": {
                    "value": "render_times",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "render_poses.shape[0]",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "render_poses",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pose_spherical(angle, -30.0, 4.0) for angle in np.linspace(-180, 180, 40 + 1)[:-1]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "run_dnerf.py": {
        "torch": {
            "SummaryWriter_731": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(basedir, 'summaries', expname)",
                    "possible_values": []
                }
            }
        }
    },
    "run_dnerf_helpers.py": {
        "torch": {
            "set_detect_anomaly_2": {
                "mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "floor_245": {
                "variable": {
                    "value": "hi",
                    "possible_values": []
                },
                "input": {
                    "value": "h * 6",
                    "possible_values": []
                }
            },
            "meshgrid_263": {
                "variable": {
                    "value": "(i, j)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(0, W - 1, W)",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0, H - 1, H)",
                    "possible_values": []
                }
            },
            "stack_266": {
                "variable": {
                    "value": "dirs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(i - W * 0.5) / focal, -(j - H * 0.5) / focal, -torch.ones_like(i)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_268": {
                "variable": {
                    "value": "rays_d",
                    "possible_values": []
                },
                "input": {
                    "value": "dirs[..., np.newaxis, :] * c2w[:3, :3]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "rays_o",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o0, o1, o2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_299": {
                "variable": {
                    "value": "rays_d",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d0, d1, d2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cumsum_309": {
                "variable": {
                    "value": "cdf",
                    "possible_values": []
                },
                "input": {
                    "value": "pdf",
                    "possible_values": [
                        [
                            "weights / torch.sum(weights, -1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "cdf",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(cdf[..., :1]), cdf]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "max_333": {
                "variable": {
                    "value": "below",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(inds - 1)",
                    "possible_values": []
                }
            },
            "min_334": {
                "variable": {
                    "value": "above",
                    "possible_values": []
                },
                "input": {
                    "value": "(cdf.shape[-1] - 1) * torch.ones_like(inds)",
                    "possible_values": []
                }
            },
            "stack_335": {
                "variable": {
                    "value": "inds_g",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[below, above]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_340": {
                "variable": {
                    "value": "cdf_g",
                    "possible_values": []
                },
                "input": {
                    "value": "cdf.unsqueeze(1).expand(matched_shape)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_g",
                    "possible_values": [
                        [
                            "torch.stack([below, above], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_341": {
                "variable": {
                    "value": "bins_g",
                    "possible_values": []
                },
                "input": {
                    "value": "bins.unsqueeze(1).expand(matched_shape)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "inds_g",
                    "possible_values": [
                        [
                            "torch.stack([below, above], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_344": {
                "variable": {
                    "value": "denom",
                    "possible_values": []
                },
                "condition": {
                    "value": "denom < 1e-05",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(denom)",
                    "possible_values": []
                },
                "y": {
                    "value": "denom",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_10": {
                "input": {
                    "value": "(x - y) ** 2",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_pts, t]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_114": {
                "variable": {
                    "value": "(input_pts, input_views)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.input_ch, self.input_ch_views]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.pts_linears",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "possible_values": [
                        [
                            "[nn.Linear(self.input_ch + self.input_ch_time, self.W)]",
                            "List"
                        ],
                        [
                            "layers + [layer(in_channels, W)]",
                            "BinOp"
                        ],
                        [
                            "[nn.Linear(input_ch, W)]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.views_linears",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_ch_views + W, W // 2)]",
                    "possible_values": []
                }
            },
            "split_187": {
                "variable": {
                    "value": "(input_pts, input_views)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.input_ch, self.input_ch_views]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "variable": {
                    "value": "self.feature_linear.weight.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_feature_linear])",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "self.feature_linear.bias.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_feature_linear + 1])",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "self.views_linears[0].weight.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_views_linears])",
                    "possible_values": []
                }
            },
            "from_numpy_228": {
                "variable": {
                    "value": "self.views_linears[0].bias.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_views_linears + 1])",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "variable": {
                    "value": "self.rgb_linear.weight.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_rbg_linear])",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "self.rgb_linear.bias.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_rbg_linear + 1])",
                    "possible_values": []
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "self.alpha_linear.weight.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_alpha_linear])",
                    "possible_values": []
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "self.alpha_linear.bias.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_alpha_linear + 1])",
                    "possible_values": []
                }
            },
            "linspace_314": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "N_samples",
                    "possible_values": []
                }
            },
            "rand_317": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(cdf.shape[:-1]) + [N_samples]",
                    "possible_values": []
                }
            },
            "log_11": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "linspace_35": {
                "variable": {
                    "value": "freq_bands",
                    "possible_values": []
                },
                "start": {
                    "value": "2.0 ** 0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0 ** max_freq",
                    "possible_values": []
                },
                "steps": {
                    "value": "N_freqs",
                    "possible_values": [
                        [
                            "self.kwargs['num_freqs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[fn(inputs) for fn in self.embed_fns]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "torch.cat([new_pts, t], dim=-1)",
                            "Call"
                        ],
                        [
                            "net[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_pts, h], -1)",
                            "Call"
                        ],
                        [
                            "input_pts",
                            "Name"
                        ],
                        [
                            "self.pts_linears[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_pts, h], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, input_views], -1)",
                            "Call"
                        ],
                        [
                            "self.views_linears[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "variable": {
                    "value": "dx",
                    "possible_values": []
                },
                "input": {
                    "value": "input_pts[:, :3]",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.feature_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "W",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "W",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.alpha_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "W",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.rgb_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "W // 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_color_ch",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.output_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "W",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_ch",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_191": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "torch.cat([new_pts, t], dim=-1)",
                            "Call"
                        ],
                        [
                            "net[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_pts, h], -1)",
                            "Call"
                        ],
                        [
                            "input_pts",
                            "Name"
                        ],
                        [
                            "self.pts_linears[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_pts, h], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, input_views], -1)",
                            "Call"
                        ],
                        [
                            "self.views_linears[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, input_views]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb, alpha]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "self.pts_linears[i].weight.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_pts_linears])",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "self.pts_linears[i].bias.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(weights[idx_pts_linears + 1])",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "[hi, hi, hi]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_252": {
                "tensors": {
                    "value": "(v, t, p)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "(q, v, p)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "(p, v, t)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "(p, q, v)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "(t, p, v)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "(v, p, q)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "linspace_263": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "H - 1",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "possible_values": []
                }
            },
            "sum_308": {
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "weights + 1e-05",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "input": {
                    "value": "inds - 1",
                    "possible_values": []
                }
            },
            "ones_like_344": {
                "input": {
                    "value": "denom",
                    "possible_values": [
                        [
                            "cdf_g[..., 1] - cdf_g[..., 0]",
                            "BinOp"
                        ],
                        [
                            "torch.where(denom < 1e-05, torch.ones_like(denom), denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_11": {},
            "Identity_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "self.input_ch + self.input_ch_time",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.W",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "modules": {
                    "value": "layers",
                    "possible_values": [
                        [
                            "[nn.Linear(self.input_ch + self.input_ch_time, self.W)]",
                            "List"
                        ],
                        [
                            "layers + [layer(in_channels, W)]",
                            "BinOp"
                        ],
                        [
                            "[nn.Linear(input_ch, W)]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "self.W",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_pts, h]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[input_pts, input_views]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "input_ch",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "W",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_193": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_pts, h]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "torch.cat([new_pts, t], dim=-1)",
                            "Call"
                        ],
                        [
                            "net[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_pts, h], -1)",
                            "Call"
                        ],
                        [
                            "input_pts",
                            "Name"
                        ],
                        [
                            "self.pts_linears[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_pts, h], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([feature, input_views], -1)",
                            "Call"
                        ],
                        [
                            "self.views_linears[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_209": {
                "input": {
                    "value": "input_pts[:, :3]",
                    "possible_values": []
                }
            },
            "zeros_like_310": {
                "input": {
                    "value": "cdf[..., :1]",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "input": {
                    "value": "inds",
                    "possible_values": [
                        [
                            "searchsorted(cdf, u, side='right')",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_33": {
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "max_freq",
                    "possible_values": [
                        [
                            "self.kwargs['max_freq_log2']",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "N_freqs",
                    "possible_values": [
                        [
                            "self.kwargs['num_freqs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unique_117": {
                "input": {
                    "value": "t[:, :1]",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "in_features": {
                    "value": "input_ch_views + W",
                    "possible_values": []
                },
                "out_features": {
                    "value": "W // 2",
                    "possible_values": []
                }
            },
            "ones_like_266": {
                "input": {
                    "value": "i",
                    "possible_values": [
                        [
                            "i.t()",
                            "Call"
                        ],
                        [
                            "range(self.D - 1)",
                            "Call"
                        ],
                        [
                            "range(D - 1)",
                            "Call"
                        ],
                        [
                            "range(self.D)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchsearchsorted/examples/benchmark.py": {
        "torch": {
            "randn_34": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "possible_values": [
                        [
                            "5000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "V",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "empty_35": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "possible_values": [
                        [
                            "5000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "V",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sort_33": {
                "input": {
                    "value": "torch.randn(B, A, device=device)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "synchronize_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_33": {
                "*size": {
                    "value": "B",
                    "possible_values": [
                        [
                            "5000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "A",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            }
        }
    },
    "torchsearchsorted/examples/test.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "*size": {
                    "value": "nrows_a",
                    "possible_values": [
                        [
                            "50000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "nsorted_values",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "*size": {
                    "value": "nrows_v",
                    "possible_values": [
                        [
                            "50000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "nvalues",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "test_NP",
                    "possible_values": []
                },
                "data": {
                    "value": "numpy_searchsorted(a, v, side)",
                    "possible_values": []
                }
            },
            "norm_42": {
                "variable": {
                    "value": "error_CPU",
                    "possible_values": []
                },
                "input": {
                    "value": "test_NP.double() - test_CPU.double()",
                    "possible_values": []
                }
            },
            "norm_63": {
                "variable": {
                    "value": "error_CUDA",
                    "possible_values": []
                },
                "input": {
                    "value": "test_NP.to('cuda').double() - test_GPU.double()",
                    "possible_values": []
                }
            },
            "sort_28": {
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "torch.randn(nrows_a, nsorted_values, device='cpu')",
                            "Call"
                        ],
                        [
                            "torch.sort(a, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "a.to('cuda')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "torchsearchsorted/setup.py": {
        "torch": {}
    },
    "torchsearchsorted/src/torchsearchsorted/searchsorted.py": {
        "torch": {
            "empty_38": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "result_shape",
                    "possible_values": [
                        [
                            "(max(a.shape[0], v.shape[0]), v.shape[1])",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            }
        }
    },
    "torchsearchsorted/test/conftest.py": {
        "torch": {
            "is_available_5": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "devices[cuda]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "device_4": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "torchsearchsorted/test/test_searchsorted.py": {
        "torch": {
            "rand_15": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "A",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "empty_22": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "v.shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "*size": {
                    "value": "Bv",
                    "possible_values": []
                },
                "out": {
                    "value": "V",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "sort_14": {
                "input": {
                    "value": "torch.rand(B, V, device=device)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_14": {
                "*size": {
                    "value": "B",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "V",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "sort_39": {
                "input": {
                    "value": "torch.rand(Ba, A, device=device)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_39": {
                "*size": {
                    "value": "Ba",
                    "possible_values": []
                },
                "out": {
                    "value": "A",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            }
        }
    }
}