{
    "config.py": {
        "sklearn": {
            "CalibratedClassifierCV_63": {
                "base_estimator": {
                    "value": "LinearSVC(C=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_63": {
                "C": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "taggers/svm_tagger.py": {
        "sklearn": {
            "Pipeline_98": {
                "variable": {
                    "value": "wordcount_pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('selector', ItemSelector(key='word_count')), ('vectorizer', CountVectorizer(ngram_range=(1, 2)))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_104": {
                "variable": {
                    "value": "label_pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('selector', ItemSelector(key='labels')), ('vectorizer', DictVectorizer())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CountVectorizer_101": {
                "ngram_range": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DictVectorizer_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tester.py": {
        "sklearn": {
            "MultiLabelBinarizer_32": {
                "variable": {
                    "value": "binarizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_43": {
                "y_true": {
                    "value": "binarizer.transform(y_dim_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "binarizer.transform(y_dim_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "classification_report_71": {
                "y_true": {
                    "value": "y_comm_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_comm_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "trainers/svm_trainer.py": {
        "sklearn": {
            "Pipeline_51": {
                "variable": {
                    "value": "train_pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('union', FeatureUnion(transformer_list=[('feature_' + str(i), pipeline) for (i, pipeline) in enumerate(features[1])])), ('classifier', config.create_classifier())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FeatureUnion_56": {
                "transformer_list": {
                    "value": "[('feature_' + str(i), pipeline) for (i, pipeline) in enumerate(features[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "MultiLabelBinarizer_129": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "classes": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_transformer.py": {
        "torch": {}
    },
    "taggers/transformer_tagger.py": {
        "torch": {
            "load_85": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "trainers/transformer_trainer.py": {
        "torch": {
            "save_45": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_state_dict': model.state_dict(), 'valid_loss': valid_loss}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f'{self.config.out_folder}/{model_name}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    }
}