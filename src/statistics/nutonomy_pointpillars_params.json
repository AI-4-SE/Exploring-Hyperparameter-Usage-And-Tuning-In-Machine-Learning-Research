{
    "second/pytorch/builder/input_reader_builder.py": {
        "torch": {
            "DatasetWrapper_31": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self._dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "dataset_builder.build(input_reader_config, model_config, training, voxel_generator, target_assigner)",
                            "Call"
                        ],
                        [
                            "DatasetWrapper(dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "second/pytorch/builder/lr_scheduler_builder.py": {
        "torch": {}
    },
    "second/pytorch/builder/optimizer_builder.py": {
        "torch": {
            "RMSprop_38": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": []
                },
                "lr": {
                    "value": "_get_base_lr_by_lr_scheduler(config.learning_rate)",
                    "possible_values": []
                },
                "alpha": {
                    "value": "config.decay",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum_optimizer_value",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.epsilon",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "possible_values": []
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": []
                },
                "lr": {
                    "value": "_get_base_lr_by_lr_scheduler(config.learning_rate)",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum_optimizer_value",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "possible_values": []
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": []
                },
                "lr": {
                    "value": "_get_base_lr_by_lr_scheduler(config.learning_rate)",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "possible_values": []
                }
            }
        }
    },
    "second/pytorch/check_onnx_valid.py": {
        "torch": {
            "unsqueeze_36": {
                "variable": {
                    "value": "actual_num",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_num",
                    "possible_values": [
                        [
                            "torch.unsqueeze(actual_num, axis + 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis + 1",
                    "possible_values": []
                }
            },
            "arange_39": {
                "variable": {
                    "value": "max_num",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num",
                    "possible_values": [
                        [
                            "torch.arange(max_num, dtype=torch.int, device=actual_num.device).view(max_num_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "possible_values": []
                },
                "device": {
                    "value": "actual_num.device",
                    "possible_values": []
                }
            },
            "ones_147": {
                "variable": {
                    "value": "pillar_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_148": {
                "variable": {
                    "value": "pillar_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "pillar_z",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "pillar_i",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "num_points_per_pillar",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 9918]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_152": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_153": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_154": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "device_156": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "coors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coors_numpy",
                    "possible_values": [
                        [
                            "np.loadtxt('coors.txt', dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('./onnx_predict_outputs/coors.txt', dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_263": {
                "variable": {
                    "value": "pillar_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_264": {
                "variable": {
                    "value": "pillar_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_265": {
                "variable": {
                    "value": "pillar_z",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_266": {
                "variable": {
                    "value": "pillar_i",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_267": {
                "variable": {
                    "value": "num_points_per_pillar",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 9918]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_268": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_269": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "ones_270": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 9918, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "from_numpy_292": {
                "variable": {
                    "value": "voxel_features_tensor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pfe_outs",
                    "possible_values": [
                        [
                            "pfe_session.run(None, pfe_inputs)",
                            "Call"
                        ],
                        [
                            "np.array(pfe_outs)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_316": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "variable": {
                    "value": "coors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coors_numpy",
                    "possible_values": [
                        [
                            "np.loadtxt('coors.txt', dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('./onnx_predict_outputs/coors.txt', dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_49": {
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "variable": {
                    "value": "example_torch[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "device or torch.device('cuda:0')",
                            "BoolOp"
                        ],
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_57": {
                "variable": {
                    "value": "example_torch[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "device or torch.device('cuda:0')",
                            "BoolOp"
                        ],
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_59": {
                "variable": {
                    "value": "example_torch[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "device or torch.device('cuda:0')",
                            "BoolOp"
                        ],
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "second/pytorch/core/box_coders.py": {
        "torch": {
            "full_26": {
                "variable": {
                    "value": "z_fixed",
                    "possible_values": []
                },
                "size": {
                    "value": "[*ret.shape[:-1], 1]",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.z_fixed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ret.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "ret.device",
                    "possible_values": []
                }
            },
            "full_27": {
                "variable": {
                    "value": "h_fixed",
                    "possible_values": []
                },
                "size": {
                    "value": "[*ret.shape[:-1], 1]",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.h_fixed",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ret.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "ret.device",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "[ret[..., :2], z_fixed, ret[..., 2:4], h_fixed, ret[..., 4:]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "second/pytorch/core/box_torch_ops.py": {
        "torch": {
            "split_23": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_24": {
                "variable": {
                    "value": "(xg, yg, zg, wg, lg, hg, rg)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_71": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "split_101": {
                "variable": {
                    "value": "(xa, ya, wa, la, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_102": {
                "variable": {
                    "value": "(xg, yg, wg, lg, rg)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_103": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "split_134": {
                "variable": {
                    "value": "(xa, ya, wa, la, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "variable": {
                    "value": "corners_norm",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "corners_norm",
                    "possible_values": [
                        [
                            "np.stack(np.unravel_index(np.arange(2 ** ndim), [2] * ndim), axis=1).astype(dtype)",
                            "Call"
                        ],
                        [
                            "corners_norm[[0, 1, 3, 2]]",
                            "Subscript"
                        ],
                        [
                            "corners_norm - np.array(origin, dtype=dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(corners_norm).type_as(dims)",
                            "Call"
                        ],
                        [
                            "corners_norm[[0, 1, 3, 2, 4, 5, 7, 6]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_229": {
                "variable": {
                    "value": "rot_sin",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cos_230": {
                "variable": {
                    "value": "rot_cos",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_231": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_cos",
                    "possible_values": [
                        [
                            "torch.cos(angles)",
                            "Call"
                        ],
                        [
                            "math.cos(angle)",
                            "Call"
                        ],
                        [
                            "torch.cos(angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_cos",
                    "possible_values": [
                        [
                            "torch.cos(angles)",
                            "Call"
                        ],
                        [
                            "math.cos(angle)",
                            "Call"
                        ],
                        [
                            "torch.cos(angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_295": {
                "variable": {
                    "value": "rot_sin",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cos_296": {
                "variable": {
                    "value": "rot_cos",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_297": {
                "variable": {
                    "value": "rot_mat_T",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tstack([rot_cos, -rot_sin]), tstack([rot_sin, rot_cos])]",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "points_4",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points_3d, torch.zeros(*points_shape).type_as(points_3d)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_358": {
                "variable": {
                    "value": "point_2d",
                    "possible_values": []
                },
                "input": {
                    "value": "points_4",
                    "possible_values": [
                        [
                            "torch.cat([points_3d, torch.zeros(*points_shape).type_as(points_3d)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_mat.t()",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, torch.ones(num_points, 1).type_as(points)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, torch.ones(num_points, 1).type_as(points)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_454": {
                "variable": {
                    "value": "dets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, scores.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "dets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rbboxes, scores.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_36": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "lg / la",
                    "possible_values": []
                }
            },
            "log_37": {
                "variable": {
                    "value": "wt",
                    "possible_values": []
                },
                "input": {
                    "value": "wg / wa",
                    "possible_values": []
                }
            },
            "log_38": {
                "variable": {
                    "value": "ht",
                    "possible_values": []
                },
                "input": {
                    "value": "hg / ha",
                    "possible_values": []
                }
            },
            "cos_40": {
                "variable": {
                    "value": "rgx",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_41": {
                "variable": {
                    "value": "rgy",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_42": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_43": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "split_63": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rtx, rty)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_67": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cos_85": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_86": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "atan2_89": {
                "variable": {
                    "value": "rg",
                    "possible_values": []
                },
                "input": {
                    "value": "rgy",
                    "possible_values": [
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ],
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rgx",
                    "possible_values": [
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ],
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "[xg, yg, zg, wg, lg, hg, rg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_110": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "lg / la",
                    "possible_values": []
                }
            },
            "log_111": {
                "variable": {
                    "value": "wt",
                    "possible_values": []
                },
                "input": {
                    "value": "wg / wa",
                    "possible_values": []
                }
            },
            "cos_113": {
                "variable": {
                    "value": "rgx",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_114": {
                "variable": {
                    "value": "rgy",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_115": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_116": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "split_136": {
                "variable": {
                    "value": "(xt, yt, wt, lt, rtx, rty)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_140": {
                "variable": {
                    "value": "(xt, yt, wt, lt, rt)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cos_153": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_154": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "atan2_157": {
                "variable": {
                    "value": "rg",
                    "possible_values": []
                },
                "input": {
                    "value": "rgy",
                    "possible_values": [
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ],
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rgx",
                    "possible_values": [
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ],
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "[xg, yg, wg, lg, rg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_223": {
                "tensors": {
                    "value": "standup_boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_254": {
                "equation": {
                    "value": "aij,jka->aik",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(points, rot_mat_T)",
                    "possible_values": []
                }
            },
            "stack_263": {
                "variable": {
                    "value": "rot_mat_T",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([rot_cos, 0, -rot_sin], dtype=points.dtype, device=points.device), torch.tensor([0, 1, 0], dtype=points.dtype, device=points.device), torch.tensor([rot_sin, 0, rot_cos], dtype=points.dtype, device=points.device)]",
                    "possible_values": []
                }
            },
            "einsum_300": {
                "equation": {
                    "value": "aij,jka->aik",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(points, rot_mat_T)",
                    "possible_values": []
                }
            },
            "cat_384": {
                "tensors": {
                    "value": "[xyz_lidar, w, l, h, r]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_392": {
                "tensors": {
                    "value": "[xyz, l, h, w, r]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "topk_452": {
                "variable": {
                    "value": "(scores, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": []
                },
                "k": {
                    "value": "pre_max_size",
                    "possible_values": [
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_464": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_478": {
                "variable": {
                    "value": "(scores, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": []
                },
                "k": {
                    "value": "pre_max_size",
                    "possible_values": [
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_490": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[xt, yt, zt, wt, lt, ht, rtx, rty]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "[xt, yt, zt, wt, lt, ht, rt]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "[xt, yt, wt, lt, rtx, rty]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "[xt, yt, wt, lt, rt]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_269": {
                "variable": {
                    "value": "rot_mat_T",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([rot_cos, -rot_sin, 0], dtype=points.dtype, device=points.device), torch.tensor([rot_sin, rot_cos, 0], dtype=points.dtype, device=points.device), torch.tensor([0, 0, 1], dtype=points.dtype, device=points.device)]",
                    "possible_values": []
                }
            },
            "inverse_367": {
                "input": {
                    "value": "(r_rect @ velo2cam).t()",
                    "possible_values": []
                }
            },
            "nonzero_421": {
                "variable": {
                    "value": "class_scores_keep",
                    "possible_values": []
                },
                "input": {
                    "value": "class_scores >= score_thresh",
                    "possible_values": []
                }
            },
            "from_numpy_467": {
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_493": {
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_81": {
                "input": {
                    "value": "lt",
                    "possible_values": [
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ],
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_82": {
                "input": {
                    "value": "wt",
                    "possible_values": [
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "ht",
                    "possible_values": [
                        [
                            "hg / ha - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(hg / ha)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_150": {
                "input": {
                    "value": "lt",
                    "possible_values": [
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ],
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_151": {
                "input": {
                    "value": "wt",
                    "possible_values": [
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_275": {
                "variable": {
                    "value": "rot_mat_T",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([1, 0, 0], dtype=points.dtype, device=points.device), torch.tensor([0, rot_cos, -rot_sin], dtype=points.dtype, device=points.device), torch.tensor([0, rot_sin, rot_cos], dtype=points.dtype, device=points.device)]",
                    "possible_values": []
                }
            },
            "zeros_356": {
                "*size": {
                    "value": "*points_shape",
                    "possible_values": []
                }
            },
            "ones_366": {
                "*size": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_374": {
                "*size": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "min_220": {
                "input": {
                    "value": "boxes_corner[:, :, i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_222": {
                "input": {
                    "value": "boxes_corner[:, :, i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "[rot_cos, 0, -rot_sin]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "data": {
                    "value": "[0, 1, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "data": {
                    "value": "[rot_sin, 0, rot_cos]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "[rot_cos, -rot_sin, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "[rot_sin, rot_cos, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "data": {
                    "value": "[0, 0, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_276": {
                "data": {
                    "value": "[1, 0, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "[0, rot_cos, -rot_sin]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "[0, rot_sin, rot_cos]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "points.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "possible_values": []
                }
            }
        }
    },
    "second/pytorch/core/losses.py": {
        "torch": {
            "zeros_60": {
                "variable": {
                    "value": "dense",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_213": {
                "variable": {
                    "value": "loss_ftor",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "abs_185": {
                "variable": {
                    "value": "abs_diff",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "code_weights.view(1, 1, -1) * diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "le_186": {
                "variable": {
                    "value": "abs_diff_lt_1",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_diff",
                    "possible_values": [
                        [
                            "torch.abs(diff)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 / self._sigma ** 2",
                    "possible_values": []
                }
            },
            "log1p_202": {
                "input": {
                    "value": "torch.exp(-torch.abs(logits))",
                    "possible_values": []
                }
            },
            "sigmoid_295": {
                "variable": {
                    "value": "prediction_probabilities",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_356": {
                "variable": {
                    "value": "prediction_probabilities",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "div_401": {
                "variable": {
                    "value": "prediction_tensor",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._logit_scale",
                    "possible_values": []
                }
            },
            "where_93": {
                "variable": {
                    "value": "target_tensor",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(target_tensor)",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_194": {
                "variable": {
                    "value": "anchorwise_smooth_l1norm",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "torch.clamp(logits, min=0) - logits * labels.type_as(logits)",
                            "BinOp"
                        ],
                        [
                            "loss + torch.log1p(torch.exp(-torch.abs(logits)))",
                            "BinOp"
                        ],
                        [
                            "loss_ftor(logits, labels.max(dim=-1)[1])",
                            "Call"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "clamp_201": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "logits.permute(*transpose_param)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "exp_202": {
                "input": {
                    "value": "-torch.abs(logits)",
                    "possible_values": []
                }
            },
            "pow_300": {
                "variable": {
                    "value": "modulating_factor",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - p_t",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "possible_values": []
                }
            },
            "pow_361": {
                "variable": {
                    "value": "modulating_factor",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - p_t",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "possible_values": []
                }
            },
            "where_364": {
                "variable": {
                    "value": "alpha_weight_factor",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_tensor[..., 0] == 1",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(1 - self._alpha).type_as(per_entry_cross_ent)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(self._alpha).type_as(per_entry_cross_ent)",
                    "possible_values": []
                }
            },
            "isnan_93": {
                "input": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_123": {
                "ndarray": {
                    "value": "self._code_weights",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "self._code_weights",
                    "possible_values": []
                }
            },
            "pow_187": {
                "input": {
                    "value": "abs_diff * self._sigma",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "abs_202": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "logits.permute(*transpose_param)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_365": {
                "data": {
                    "value": "1 - self._alpha",
                    "possible_values": []
                }
            },
            "tensor_366": {
                "data": {
                    "value": "self._alpha",
                    "possible_values": []
                }
            },
            "sigmoid_459": {
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_462": {
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "second/pytorch/inference.py": {
        "torch": {}
    },
    "second/pytorch/models/__init__.py": {
        "torch": {}
    },
    "second/pytorch/models/pointpillars.py": {
        "torch": {
            "PFNLayer_16": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.last_vfe": {
                    "value": "last_layer",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.units": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "Linear_46": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.in_channels",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.units",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_47": {
                    "variable": {
                        "value": "self.norm",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.units",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "Conv2d_49": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.units",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_50": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "100",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_52": {
                    "variable": {
                        "value": "self.t_conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "100",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 8)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(1, 7)",
                        "possible_values": []
                    }
                },
                "Conv2d_53": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 34)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(1, 1)",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "(1, 3)",
                        "possible_values": []
                    }
                }
            },
            "PillarFeatureNet_76": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._with_distance": {
                    "value": "with_distance",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_115": {
                    "variable": {
                        "value": "self.pfn_layers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "pfn_layers",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                }
            },
            "PointPillarsScatter_151": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_shape": {
                    "value": "output_shape",
                    "possible_values": []
                },
                "self.nchannels": {
                    "value": "num_input_features",
                    "possible_values": [
                        [
                            "num_input_features + 1",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_127": {
                "variable": {
                    "value": "pillar_xyz",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pillar_x, pillar_y, pillar_z)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "f_center_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f_center_offset_0, f_center_offset_1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "pillar_xyzi",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pillar_x, pillar_y, pillar_z, pillar_i)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features_list",
                    "possible_values": [
                        [
                            "[pillar_xyzi, f_cluster, f_center_concat]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "canvas",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nchannels",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nx * self.ny",
                    "possible_values": []
                },
                "dtype": {
                    "value": "voxel_features.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_features.device",
                    "possible_values": []
                }
            },
            "ones_186": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.nchannels, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_features.device",
                    "possible_values": []
                }
            },
            "mm_187": {
                "variable": {
                    "value": "indices_num_channel",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "torch.ones([self.nchannels, 1], dtype=torch.float64, device=voxel_features.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "indices_2d",
                    "possible_values": [
                        [
                            "indices.view(1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_195": {
                "variable": {
                    "value": "batch_canvas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_canvas",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_canvas, 0)",
                            "Call"
                        ],
                        [
                            "batch_canvas.view(1, self.nchannels, self.ny, self.nx)",
                            "Call"
                        ],
                        [
                            "torch.stack(batch_canvas, 0)",
                            "Call"
                        ],
                        [
                            "batch_canvas.view(2, self.nchannels, self.ny, self.nx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "first_canvas",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nchannels",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nx * self.ny",
                    "possible_values": []
                },
                "dtype": {
                    "value": "voxel_features.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_features.device",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "second_canvas",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nchannels",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nx * self.ny",
                    "possible_values": []
                },
                "dtype": {
                    "value": "voxel_features.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_features.device",
                    "possible_values": []
                }
            },
            "stack_235": {
                "variable": {
                    "value": "batch_canvas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_canvas",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_canvas, 0)",
                            "Call"
                        ],
                        [
                            "batch_canvas.view(1, self.nchannels, self.ny, self.nx)",
                            "Call"
                        ],
                        [
                            "torch.stack(batch_canvas, 0)",
                            "Call"
                        ],
                        [
                            "batch_canvas.view(2, self.nchannels, self.ny, self.nx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "second/pytorch/models/voxelnet.py": {
        "torch": {
            "VFELayer_41": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'vfe'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'SparseMiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'MiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'voxelnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "VoxelFeatureExtractor_74": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'vfe'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'SparseMiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'MiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'voxelnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._with_distance": {
                    "value": "with_distance",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "VoxelFeatureExtractorV2_132": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'vfe'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'SparseMiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'MiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'voxelnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._with_distance": {
                    "value": "with_distance",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_157": {
                    "variable": {
                        "value": "self.vfe_layers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[VFELayer(i, o, use_norm) for (i, o) in filters_pairs]",
                        "possible_values": []
                    }
                }
            },
            "SparseMiddleExtractor_192": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'vfe'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'SparseMiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'MiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'voxelnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.voxel_output_shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "[batch_size] + self.voxel_output_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ZeroPad3d_263": {
                "base_class_0": {
                    "value": "torch.nn.ConstantPad3d",
                    "possible_values": []
                }
            },
            "MiddleExtractor_268": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'vfe'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'SparseMiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'MiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'voxelnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.voxel_output_shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "[batch_size] + self.voxel_output_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RPN_315": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._num_anchor_per_loc": {
                    "value": "num_anchor_per_loc",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_direction_classifier": {
                    "value": "use_direction_classifier",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_bev": {
                    "value": "use_bev",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_448": {
                    "variable": {
                        "value": "self.conv_cls",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "sum(num_upsample_filters)",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_cls",
                        "possible_values": [
                            [
                                "num_anchor_per_loc * num_class",
                                "BinOp"
                            ],
                            [
                                "num_anchor_per_loc * (num_class + 1)",
                                "BinOp"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_449": {
                    "variable": {
                        "value": "self.conv_box",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "sum(num_upsample_filters)",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_anchor_per_loc * box_code_size",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "VoxelNet_492": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'vfe'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'VoxelFeatureExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'SparseMiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'MiddleExtractor'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'voxelnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._num_class": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "self._num_class",
                            "Attribute"
                        ],
                        [
                            "num_class + 1",
                            "BinOp"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_rotate_nms": {
                    "value": "use_rotate_nms",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._multiclass_nms": {
                    "value": "multiclass_nms",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._nms_score_threshold": {
                    "value": "nms_score_threshold",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._nms_pre_max_size": {
                    "value": "nms_pre_max_size",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._nms_post_max_size": {
                    "value": "nms_post_max_size",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._nms_iou_threshold": {
                    "value": "nms_iou_threshold",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_sigmoid_score": {
                    "value": "use_sigmoid_score",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._encode_background_as_zeros": {
                    "value": "encode_background_as_zeros",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_sparse_rpn": {
                    "value": "use_sparse_rpn",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_direction_classifier": {
                    "value": "use_direction_classifier",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_bev": {
                    "value": "use_bev",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._num_input_features": {
                    "value": "num_input_features",
                    "possible_values": [
                        [
                            "num_input_features + 1",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._lidar_only": {
                    "value": "lidar_only",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.target_assigner": {
                    "value": "target_assigner",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._pos_cls_weight": {
                    "value": "pos_cls_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._neg_cls_weight": {
                    "value": "neg_cls_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._encode_rad_error_by_sin": {
                    "value": "encode_rad_error_by_sin",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._loss_norm_type": {
                    "value": "loss_norm_type",
                    "possible_values": [
                        [
                            "LossNormType.NormByNumPositives",
                            "MethodArgument"
                        ],
                        [
                            "LossNormType.NormByNumPositives",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._loc_loss_ftor": {
                    "value": "loc_loss_ftor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._cls_loss_ftor": {
                    "value": "cls_loss_ftor",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._direction_loss_weight": {
                    "value": "direction_loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._cls_loss_weight": {
                    "value": "cls_loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._loc_loss_weight": {
                    "value": "loc_loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "cls_loss.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(box_preds.shape[0])",
                            "Call"
                        ],
                        [
                            "reg_targets.shape[0]",
                            "Subscript"
                        ],
                        [
                            "self._batch_size",
                            "Attribute"
                        ],
                        [
                            "cls_preds.shape[0]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_1040": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes1[..., :-1], rad_pred_encoding]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_1041": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes2[..., :-1], rad_tg_encoding]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_1121": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "pointwise",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, self.bev_extractor(bev)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([up1, up2, up3], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_69": {
                "variable": {
                    "value": "concatenated",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pointwise, repeated]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ],
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ],
                        [
                            "example[7]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, self.bev_extractor(bev)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([up1, up2, up3], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ],
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ],
                        [
                            "example[7]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "vfe(features)",
                            "Call"
                        ],
                        [
                            "features * mask",
                            "BinOp"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ],
                        [
                            "self.norm(features.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_466": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up1, up2, up3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_1094": {
                "variable": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "input": {
                    "value": "num_examples",
                    "possible_values": [
                        [
                            "cared.type(dtype).sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(num_examples, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "norm_109": {
                "variable": {
                    "value": "points_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :3]",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative, points_dist]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "norm_171": {
                "variable": {
                    "value": "points_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :3]",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative, points_dist]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "variable": {
                    "value": "self.conv_dir_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "sum(num_upsample_filters)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchor_per_loc * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_459": {
                "variable": {
                    "value": "bev[:, -1]",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(1 + bev[:, -1]) / np.log(16.0)",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.bev_extractor(bev)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "synchronize_754": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sin_1037": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "possible_values": []
                }
            },
            "cos_1037": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "possible_values": []
                }
            },
            "cos_1039": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "possible_values": []
                }
            },
            "sin_1039": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "possible_values": []
                }
            },
            "clamp_1097": {
                "input": {
                    "value": "bbox_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_1127": {
                "variable": {
                    "value": "normalizer",
                    "possible_values": []
                },
                "input": {
                    "value": "normalizer",
                    "possible_values": [
                        [
                            "pos_neg.sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(normalizer, min=1.0)",
                            "Call"
                        ],
                        [
                            "positives.sum()",
                            "Call"
                        ],
                        [
                            "torch.clamp(normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "max_65": {
                "input": {
                    "value": "pointwise",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_128": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, self.bev_extractor(bev)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([up1, up2, up3], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_188": {
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "vfe(features)",
                            "Call"
                        ],
                        [
                            "features * mask",
                            "BinOp"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ],
                        [
                            "self.norm(features.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_292": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_296": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ZeroPad2d_380": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_384": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ZeroPad2d_401": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_408": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_422": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ZeroPad2d_425": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_428": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_442": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_810": {
                "variable": {
                    "value": "total_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x)",
                            "Call"
                        ],
                        [
                            "cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "preds_dict[1]",
                            "Subscript"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_953": {
                "variable": {
                    "value": "box_2d_preds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[minxy, maxxy]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_1100": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_1101": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "stack_1103": {
                "variable": {
                    "value": "pos_neg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positives, negatives]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "clamp_1106": {
                "variable": {
                    "value": "cls_normalizer",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_normalizer",
                    "possible_values": [
                        [
                            "(pos_neg * normalizer).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(cls_normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_1108": {
                "variable": {
                    "value": "normalizer",
                    "possible_values": []
                },
                "input": {
                    "value": "normalizer",
                    "possible_values": [
                        [
                            "pos_neg.sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(normalizer, min=1.0)",
                            "Call"
                        ],
                        [
                            "positives.sum()",
                            "Call"
                        ],
                        [
                            "torch.clamp(normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "ReLU_370": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_375": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_390": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_414": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_434": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_742": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "cat_859": {
                "variable": {
                    "value": "selected_boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_boxes",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(selected_boxes, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "box_preds[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_860": {
                "variable": {
                    "value": "selected_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_labels",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(selected_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "top_labels[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_861": {
                "variable": {
                    "value": "selected_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_scores",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(selected_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "top_scores[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_875": {
                "variable": {
                    "value": "top_labels",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_scores.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "total_scores.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "max_880": {
                "variable": {
                    "value": "(top_scores, top_labels)",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores",
                    "possible_values": [
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(cls_preds)[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(cls_preds, dim=-1)[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_883": {
                "variable": {
                    "value": "thresh",
                    "possible_values": []
                },
                "data": {
                    "value": "[self._nms_score_threshold]",
                    "possible_values": []
                },
                "device": {
                    "value": "total_scores.device",
                    "possible_values": []
                }
            },
            "log_460": {
                "input": {
                    "value": "1 + bev[:, -1]",
                    "possible_values": []
                }
            },
            "max_806": {
                "input": {
                    "value": "dir_preds",
                    "possible_values": [
                        [
                            "dir_preds[a_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_863": {
                "variable": {
                    "value": "selected_dir_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_dir_labels",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(selected_dir_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "dir_labels[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "where_926": {
                "condition": {
                    "value": "opp_labels",
                    "possible_values": [
                        [
                            "(box_preds[..., -1] > 0) ^ (dir_labels.byte() > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.tensor(np.pi).type_as(box_preds)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0).type_as(box_preds)",
                    "possible_values": []
                }
            },
            "min_946": {
                "input": {
                    "value": "box_corners_in_image",
                    "possible_values": [
                        [
                            "box_torch_ops.project_to_image(box_corners, P2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_947": {
                "input": {
                    "value": "box_corners_in_image",
                    "possible_values": [
                        [
                            "box_torch_ops.project_to_image(box_corners, P2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_814": {
                "input": {
                    "value": "cls_preds",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x)",
                            "Call"
                        ],
                        [
                            "cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "preds_dict[1]",
                            "Subscript"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_816": {
                "input": {
                    "value": "cls_preds",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x)",
                            "Call"
                        ],
                        [
                            "cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "preds_dict[1]",
                            "Subscript"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_928": {
                "data": {
                    "value": "np.pi",
                    "possible_values": []
                }
            },
            "tensor_929": {
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "full_854": {
                "size": {
                    "value": "[num_dets]",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(len(layer_nums))",
                            "Call"
                        ],
                        [
                            "range(layer_nums[0])",
                            "Call"
                        ],
                        [
                            "range(layer_nums[1])",
                            "Call"
                        ],
                        [
                            "range(layer_nums[2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            }
        }
    },
    "second/pytorch/tensorrt_onnx_infer.py": {
        "torch": {
            "from_numpy_95": {
                "variable": {
                    "value": "voxel_features_tensor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pfe_outs",
                    "possible_values": [
                        [
                            "np.array(pfe_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_118": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "coors",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coors_numpy",
                    "possible_values": [
                        [
                            "np.loadtxt('coors.txt', dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "second/pytorch/train.py": {
        "torch": {
            "unsqueeze_37": {
                "variable": {
                    "value": "actual_num",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_num",
                    "possible_values": [
                        [
                            "torch.unsqueeze(actual_num, axis + 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis + 1",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "max_num",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num",
                    "possible_values": [
                        [
                            "torch.arange(max_num, dtype=torch.int, device=actual_num.device).view(max_num_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "possible_values": []
                },
                "device": {
                    "value": "actual_num.device",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "input_reader_builder.build(input_cfg, model_cfg, training=True, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "input_cfg.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "input_cfg.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "merge_second_batch",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "_worker_init_fn",
                    "possible_values": []
                }
            },
            "DataLoader_210": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "input_reader_builder.build(eval_input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ],
                        [
                            "input_reader_builder.build(input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ],
                        [
                            "input_reader_builder.build(input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_input_cfg.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "eval_input_cfg.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "merge_second_batch",
                    "possible_values": []
                }
            },
            "ones_501": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "mm_502": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sub",
                    "possible_values": [
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.08",
                            "BinOp"
                        ],
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.1",
                            "BinOp"
                        ],
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_502": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mm_503": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "y_sub",
                    "possible_values": [
                        [
                            "coors_y.unsqueeze(1) * 0.16 - 39.6",
                            "BinOp"
                        ],
                        [
                            "coors_y.unsqueeze(1) * 0.16 + -39.9",
                            "BinOp"
                        ],
                        [
                            "coors_y.unsqueeze(1) * 0.16 + -39.9",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_503": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "as_tensor_514": {
                "variable": {
                    "value": "anchors_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "anchors_mask",
                    "possible_values": [
                        [
                            "example[7]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(anchors_mask, dtype=torch.uint8, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "anchors_mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "DataLoader_651": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "input_reader_builder.build(eval_input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ],
                        [
                            "input_reader_builder.build(input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ],
                        [
                            "input_reader_builder.build(input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "input_cfg.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "input_cfg.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "merge_second_batch",
                    "possible_values": []
                }
            },
            "ones_731": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "mm_732": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sub",
                    "possible_values": [
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.08",
                            "BinOp"
                        ],
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.1",
                            "BinOp"
                        ],
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_732": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mm_733": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "y_sub",
                    "possible_values": [
                        [
                            "coors_y.unsqueeze(1) * 0.16 - 39.6",
                            "BinOp"
                        ],
                        [
                            "coors_y.unsqueeze(1) * 0.16 + -39.9",
                            "BinOp"
                        ],
                        [
                            "coors_y.unsqueeze(1) * 0.16 + -39.9",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_733": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ones_756": {
                "variable": {
                    "value": "pillar_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 12000, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_757": {
                "variable": {
                    "value": "pillar_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 12000, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_758": {
                "variable": {
                    "value": "pillar_z",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 12000, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_759": {
                "variable": {
                    "value": "pillar_i",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 12000, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_760": {
                "variable": {
                    "value": "num_points_per_pillar",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 12000]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_761": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 12000, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_762": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 12000, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_763": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, 12000, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "ones_782": {
                "variable": {
                    "value": "rpn_input",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 64, 496, 432]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "DataLoader_844": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "input_reader_builder.build(eval_input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ],
                        [
                            "input_reader_builder.build(input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ],
                        [
                            "input_reader_builder.build(input_cfg, model_cfg, training=False, voxel_generator=voxel_generator, target_assigner=target_assigner)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "merge_second_batch",
                    "possible_values": []
                }
            },
            "from_numpy_681": {
                "variable": {
                    "value": "example_tuple[8]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example_tuple[8]",
                    "possible_values": []
                }
            },
            "from_numpy_682": {
                "variable": {
                    "value": "example_tuple[9]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example_tuple[9]",
                    "possible_values": []
                }
            },
            "from_numpy_872": {
                "variable": {
                    "value": "example_tuple[8]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example_tuple[8]",
                    "possible_values": []
                }
            },
            "from_numpy_873": {
                "variable": {
                    "value": "example_tuple[9]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example_tuple[9]",
                    "possible_values": []
                }
            },
            "device_86": {
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "as_tensor_92": {
                "variable": {
                    "value": "example_torch[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": [
                        [
                            "{str(i): e for (i, e) in enumerate(v)}",
                            "DictComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "device or torch.device('cuda:0')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_94": {
                "variable": {
                    "value": "example_torch[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": [
                        [
                            "{str(i): e for (i, e) in enumerate(v)}",
                            "DictComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "device or torch.device('cuda:0')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "example_tuple[11]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example_tuple[11]",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "example_tuple[12]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "example_tuple[12]",
                    "possible_values": []
                }
            },
            "ones_292": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 100]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_x.device",
                    "possible_values": []
                }
            },
            "mm_293": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sub",
                    "possible_values": [
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.08",
                            "BinOp"
                        ],
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.1",
                            "BinOp"
                        ],
                        [
                            "coors_x.unsqueeze(1) * 0.16 + 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_293": {
                "variable": {
                    "value": "x_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mm_294": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "y_sub",
                    "possible_values": [
                        [
                            "coors_y.unsqueeze(1) * 0.16 - 39.6",
                            "BinOp"
                        ],
                        [
                            "coors_y.unsqueeze(1) * 0.16 + -39.9",
                            "BinOp"
                        ],
                        [
                            "coors_y.unsqueeze(1) * 0.16 + -39.9",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 100], dtype=torch.float32, device=pillar_x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_294": {
                "variable": {
                    "value": "y_sub_shaped",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "as_tensor_96": {
                "variable": {
                    "value": "example_torch[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": [
                        [
                            "{str(i): e for (i, e) in enumerate(v)}",
                            "DictComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "device or torch.device('cuda:0')",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__328": {
                "parameters": {
                    "value": "net.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10.0",
                    "possible_values": []
                }
            }
        }
    },
    "second/pytorch/utils.py": {
        "torch": {
            "unsqueeze_15": {
                "variable": {
                    "value": "actual_num",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_num",
                    "possible_values": [
                        [
                            "torch.unsqueeze(actual_num, axis + 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis + 1",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "max_num",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num",
                    "possible_values": [
                        [
                            "torch.arange(max_num, dtype=torch.int, device=actual_num.device).view(max_num_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "possible_values": []
                },
                "device": {
                    "value": "actual_num.device",
                    "possible_values": []
                }
            }
        }
    },
    "torchplus/metrics.py": {
        "torch": {
            "Scalar_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Accuracy_27": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._ignore_idx": {
                    "value": "ignore_idx",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._threshold": {
                    "value": "threshold",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._encode_background_as_zeros": {
                    "value": "encode_background_as_zeros",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Precision_76": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._ignore_idx": {
                    "value": "ignore_idx",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._threshold": {
                    "value": "threshold",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Recall_126": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._ignore_idx": {
                    "value": "ignore_idx",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._threshold": {
                    "value": "threshold",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PrecisionRecall_195": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._ignore_idx": {
                    "value": "ignore_idx",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._thresholds": {
                    "value": "thresholds",
                    "possible_values": [
                        [
                            "[thresholds]",
                            "List"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._use_sigmoid_score": {
                    "value": "use_sigmoid_score",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._encode_background_as_zeros": {
                    "value": "encode_background_as_zeros",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_60": {
                "variable": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_61": {
                "variable": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "input": {
                    "value": "num_examples",
                    "possible_values": [
                        [
                            "torch.sum(weights)",
                            "Call"
                        ],
                        [
                            "torch.clamp(num_examples, min=1.0).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "total",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred_labels == labels.long()).float()",
                    "possible_values": []
                }
            },
            "clamp_268": {
                "variable": {
                    "value": "prec_count",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prec_count",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_269": {
                "variable": {
                    "value": "rec_count",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rec_count",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "where_47": {
                "variable": {
                    "value": "pred_labels",
                    "possible_values": []
                },
                "condition": {
                    "value": "(scores > self._threshold).any(self._dim)",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_pred",
                    "possible_values": [
                        [
                            "torch.max(preds, dim=self._dim)[1] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0).type_as(labels_pred)",
                    "possible_values": []
                }
            },
            "sigmoid_227": {
                "variable": {
                    "value": "total_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "max_247": {
                "input": {
                    "value": "total_scores",
                    "possible_values": [
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(preds, dim=-1)[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_51": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "max_94": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "max_144": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "sigmoid_231": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "softmax_233": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            }
        }
    },
    "torchplus/nn/functional.py": {
        "torch": {
            "zeros_4": {
                "variable": {
                    "value": "tensor_onehot",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(tensor.shape)",
                    "possible_values": []
                },
                "out": {
                    "value": "depth",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            }
        }
    },
    "torchplus/nn/modules/common.py": {
        "torch": {
            "Empty_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "torchplus/nn/modules/normalization.py": {
        "torch": {
            "GroupNorm_4": {
                "base_class_0": {
                    "value": "torch.nn.GroupNorm",
                    "possible_values": []
                }
            }
        }
    },
    "torchplus/ops/array_ops.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "updates.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "updates.device",
                    "possible_values": []
                }
            }
        }
    },
    "torchplus/tools.py": {
        "torch": {}
    },
    "torchplus/train/checkpoint.py": {
        "torch": {
            "save_90": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "Path(model_dir) / ckpt_filename",
                            "BinOp"
                        ],
                        [
                            "model_dir + '/' + ckpt_filename",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_117": {
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "Path(model_dir) / ckpt_filename",
                            "BinOp"
                        ],
                        [
                            "model_dir + '/' + ckpt_filename",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchplus/train/learning_schedules.py": {
        "torch": {}
    },
    "torchplus/train/optim.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "param.grad",
                    "possible_values": []
                },
                "data": {
                    "value": "param.data.new().resize_(*param.data.size())",
                    "possible_values": []
                }
            },
            "isnan_26": {
                "input": {
                    "value": "grad",
                    "possible_values": [
                        [
                            "param_w_grad.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad / scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isinf_26": {
                "input": {
                    "value": "grad",
                    "possible_values": [
                        [
                            "param_w_grad.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad / scale",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}