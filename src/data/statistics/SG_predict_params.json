{
    "ML/RF_of_us.py": {
        "sklearn": {
            "RandomForestClassifier_18": {
                "variable": {
                    "value": "forest",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_validate_27": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "forest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomForestClassifier(criterion='entropy', n_estimators=100, max_features=80, max_depth=None, min_samples_leaf=1, min_samples_split=2, n_jobs=-1)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv('cubic.csv').iloc[:, 5:].fillna(0).values",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv('cubic.csv').iloc[:, 1].fillna(0).values",
                            "Attribute"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scoring",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': 'accuracy', 'f1_weighted': 'f1_weighted', 'MCC': make_scorer(matthews_corrcoef)}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_scorer_25": {
                "score_func": {
                    "value": "matthews_corrcoef",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ML/cryspnet.py": {
        "sklearn": {
            "LabelEncoder_31": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KFold_37": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_48": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_81": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(x_test)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_82": {
                "variable": {
                    "value": "mcc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(x_test)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_83": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_test, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(x_test)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ML/yong.py": {
        "sklearn": {
            "RandomForestClassifier_18": {
                "variable": {
                    "value": "forest",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_validate_27": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "forest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomForestClassifier(criterion='entropy', n_estimators=100, max_features=80, max_depth=None, min_samples_leaf=1, min_samples_split=2, n_jobs=-1)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv('cubic.csv').iloc[:, 5:137].fillna(0).values",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv('cubic.csv').iloc[:, 1].fillna(0).values",
                            "Attribute"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scoring",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'accuracy': 'accuracy', 'f1_weighted': 'f1_weighted', 'MCC': make_scorer(matthews_corrcoef)}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_scorer_25": {
                "score_func": {
                    "value": "matthews_corrcoef",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "sklearn": {
            "RandomForestClassifier_150": {
                "variable": {
                    "value": "forest",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}