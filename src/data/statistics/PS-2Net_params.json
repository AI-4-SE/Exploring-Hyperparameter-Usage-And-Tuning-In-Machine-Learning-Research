{
    "data/P1_data_loader.py": {
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_slice.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_slice.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "knn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "knn_slice.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "semantic_seg.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "knn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "knn_slice.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_sets.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "knn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "knn_list.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "semantic_segs.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data/P2_data_loader.py": {
        "torch": {
            "from_numpy_62": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_slice.transpose().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_slice.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "knn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "knn_slice.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main_P1/test.py": {
        "torch": {
            "DataLoader_91": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S3DISDataset('test', opt)",
                            "Call"
                        ],
                        [
                            "ScannetDatasetWholeScene(opt.data_dir, opt.num_point, opt.K, 'test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_102": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(LOG_DIR, 'checkpoints', opt.checkpoint)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "predicted_label_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predicted_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predicted_label_total, dim=0).view(-1, opt.num_point)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "gt_label_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_label_total, dim=0).view(-1, opt.num_point)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_149": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "softmax(score)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main_P1/train.py": {
        "torch": {
            "DataLoader_113": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S3DISDataset('train', opt)",
                            "Call"
                        ],
                        [
                            "ScannetDataset(opt.data_dir, opt.num_point, opt.K, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S3DISDataset('test', opt)",
                            "Call"
                        ],
                        [
                            "ScannetDataset(opt.data_dir, opt.num_point, opt.K, 'test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pretrain_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "predicted_label_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predicted_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(predicted_label_total, dim=0).view(-1, opt.num_point)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "gt_label_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gt_label_total, dim=0).view(-1, opt.num_point)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model.score.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "main_P2/inference.py": {
        "torch": {
            "Softmax_98": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(LOG_DIR, 'checkpoints', opt.checkpoint)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_batch.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "sampled_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices_batch_shuffle.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_133": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(points_batch.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.gather(input_data, dim=1, index=sampled_indices)",
                            "Call"
                        ],
                        [
                            "input_data.transpose(1, 2).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sampled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(indices_batch_shuffle.astype(np.int64))",
                            "Call"
                        ],
                        [
                            "sampled_indices.expand(-1, -1, input_data.shape[2]).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "knn_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "knn_idx.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main_P2/train.py": {
        "torch": {
            "DataLoader_123": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset('test', test_data_file_list, opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pretrain_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset('train', filelist_train, opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "predicted_label_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predicted_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(predicted_label_total, dim=0).view(-1, opt.num_point)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "gt_label_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_label_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gt_label_total, dim=0).view(-1, opt.num_point)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_187": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "model.score.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers.py": {
        "torch": {
            "Conv1d_55": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_201": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_202": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_clusters, self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_227": {
                "variable": {
                    "value": "soft_assign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_assign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(soft_assign, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "(_, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_assign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(soft_assign, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_236": {
                "variable": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_238": {
                "variable": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_43": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_norm_130": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, epoch)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, epoch)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_59": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "norm_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_63": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_146": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "norm_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_150": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_202": {
                "*size": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ELU_65": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ELU_152": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_154": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "CrossEntropyLoss_40": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "labelweights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(opt.lossweight_path)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labelweights.astype(np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_110": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.score.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eq_111": {
                "variable": {
                    "value": "correct_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_label",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.input_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correct_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(predicted_label, self.input_label).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "labelweights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labelweights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': self.network.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/network.py": {
        "torch": {
            "gather_20": {
                "variable": {
                    "value": "knn_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "knn_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_idx.unsqueeze(1).expand(-1, C, -1, -1).contiguous().view(B, C, N * K)",
                            "Call"
                        ],
                        [
                            "knn_idx[:, :, :self.K]",
                            "Subscript"
                        ],
                        [
                            "knn_idx[:, :, :self.K]",
                            "Subscript"
                        ],
                        [
                            "knn_idx[:, :, :self.K]",
                            "Subscript"
                        ],
                        [
                            "knn_idx.unsqueeze(1).expand(-1, C, -1, -1).contiguous().view(B, C, N * self.K)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_21": {
                "variable": {
                    "value": "edge_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(central_feat, knn_feat - central_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.mlp_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.mlp_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.mlp_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.mlp_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_135": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_136": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, global_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_181": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_182": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_186": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.num_point",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, global_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_224": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_241": {
                "variable": {
                    "value": "knn_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.featEX(x)",
                            "Call"
                        ],
                        [
                            "self.featEX(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "knn_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_idx.unsqueeze(1).expand(-1, C, -1, -1).contiguous().view(B, C, N * K)",
                            "Call"
                        ],
                        [
                            "knn_idx[:, :, :self.K]",
                            "Subscript"
                        ],
                        [
                            "knn_idx[:, :, :self.K]",
                            "Subscript"
                        ],
                        [
                            "knn_idx[:, :, :self.K]",
                            "Subscript"
                        ],
                        [
                            "knn_idx.unsqueeze(1).expand(-1, C, -1, -1).contiguous().view(B, C, N * self.K)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_243": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_feat, local_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat, global_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_264": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_feat, global_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_287": {
                "variable": {
                    "value": "self.mlp_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_322": {
                "variable": {
                    "value": "self.stacked_encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_358": {
                "variable": {
                    "value": "self.stacked_encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_394": {
                "variable": {
                    "value": "self.stacked_encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_430": {
                "variable": {
                    "value": "self.stacked_encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "(mp_feat, ap_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "(mp_feat, ap_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "p": {
                    "value": "dropout_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "dropout_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout2d_85": {
                "p": {
                    "value": "dropout_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout2d_105": {
                "p": {
                    "value": "dropout_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_293": {
                "p": {
                    "value": "dropout_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {
            "mean_47": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_47": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}