{
    "MuZero/config.py": {
        "torch": {
            "SGD_88": {
                "params": {
                    "value": "network.get_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MuZero/game/vertex_cover.py": {
        "torch": {
            "tensor_15": {
                "variable": {
                    "value": "g.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1] for x in range(g.num_nodes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MuZero/networks/network.py": {
        "torch": {
            "stack_75": {
                "variable": {
                    "value": "hidden_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_representation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(hidden_representation).squeeze()",
                            "Call"
                        ],
                        [
                            "self.dynamic_network(conditioned_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "hidden_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(value).squeeze()",
                            "Call"
                        ],
                        [
                            "self.value_network(hidden_representation)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "policy_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "policy_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(policy_logits).squeeze()",
                            "Call"
                        ],
                        [
                            "self.policy_network(hidden_representation)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "policy_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "conditioned_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "conditioned_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conditioned_hidden_state(hidden_state, action)",
                            "Call"
                        ],
                        [
                            "torch.tensor(conditioned_hidden, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MuZero/networks/shared_storage.py": {
        "torch": {}
    },
    "MuZero/networks/vertex_cover_network.py": {
        "torch": {
            "Sequential_77": {
                "variable": {
                    "value": "policy_network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(representation_size, hidden_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "dynamic_network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(representation_size + self.action_size, hidden_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Flatten_35": {
                "variable": {
                    "value": "self.flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "self.flat(x).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "insize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "self.flat(x).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "insize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "self.flat(x).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "representation_size + self.action_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "hidden_neurons",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_45": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "self.flat(x).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_58": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "self.flat(x).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_70": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index.long())",
                            "Call"
                        ],
                        [
                            "self.flat(x).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(data)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MuZero/training/training.py": {
        "torch": {
            "zeros_138": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, value_support_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_139": {
                "variable": {
                    "value": "sqrt_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(target_value_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_140": {
                "variable": {
                    "value": "floor_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqrt_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.abs(target_value_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_49": {
                "input": {
                    "value": "torch.tensor(target_value_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "value_batch.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_50": {
                "input": {
                    "value": "torch.sum(-torch.tensor(target_policy_batch) * F.log_softmax(policy_batch, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_71": {
                "variable": {
                    "value": "actions_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(actions_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "network.action_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "conditioned_representation_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[representation_batch, actions_batch.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "target_policy_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[policy for policy in target_policy_batch if policy]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mse_loss_83": {
                "variable": {
                    "value": "p_value_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_value_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_value_batch)[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "value_batch.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_84": {
                "variable": {
                    "value": "p_reward_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_reward_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_reward_batch)[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.squeeze(reward_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "p_policy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(-target_policy_batch * F.log_softmax(policy_batch, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__124": {
                "parameters": {
                    "value": "network.dynamic_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__125": {
                "parameters": {
                    "value": "network.policy_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__126": {
                "parameters": {
                    "value": "network.reward_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__127": {
                "parameters": {
                    "value": "network.value_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__128": {
                "parameters": {
                    "value": "network.representation_network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_145": {
                "input": {
                    "value": "torch.sum(-targets * F.log_softmax(value_batch, -1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "target_value_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_value_batch)[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_50": {
                "input": {
                    "value": "-torch.tensor(target_policy_batch) * F.log_softmax(policy_batch, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_139": {
                "input": {
                    "value": "target_value_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_value_batch)[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_145": {
                "input": {
                    "value": "-targets * F.log_softmax(value_batch, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "target_value_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_value_batch)[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "data": {
                    "value": "target_reward_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_reward_batch)[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "data": {
                    "value": "actions_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.one_hot(torch.tensor(actions_batch), network.action_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "input": {
                    "value": "reward_batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "-target_policy_batch * F.log_softmax(policy_batch, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_50": {
                "input": {
                    "value": "policy_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "policy_batch[mask_policy]",
                            "Subscript"
                        ],
                        [
                            "policy_batch[mask_policy]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_145": {
                "input": {
                    "value": "value_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "target_policy_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(filter(lambda l: bool(l), target_policy_batch))",
                            "Call"
                        ],
                        [
                            "[policy for (policy, b) in zip(target_policy_batch, mask) if b]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor([policy for policy in target_policy_batch if policy])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_85": {
                "input": {
                    "value": "policy_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "policy_batch[mask_policy]",
                            "Subscript"
                        ],
                        [
                            "policy_batch[mask_policy]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}