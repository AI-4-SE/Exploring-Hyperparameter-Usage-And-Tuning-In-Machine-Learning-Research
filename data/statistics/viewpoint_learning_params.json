{
    "viewpoint_learning/code/VQs.py": {
        "tensorflow": {}
    },
    "viewpoint_learning/code/models/MCRegV_images.py": {
        "tensorflow": {
            "reshape_117": {
                "variable": {
                    "value": "encoderOutput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoderOutput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_activation_drop_out('BNRELUDROP_finalencoder', poolFeatures3, isTraining, useConvDropOut, keepProbConv, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(encoderOutput, [-1, 1, 1, k * 32])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, k * 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNormalization_31": {
                "variable": {
                    "value": "BN",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "x + x_r",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "x + x_r",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_35": {
                "variable": {
                    "value": "BN",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "x + x_r",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "BN(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters, kernel_size=kernel_size, padding='same')",
                            "Call"
                        ],
                        [
                            "x + x_r",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_121": {
                "variable": {
                    "value": "deconvLayer0",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "[1, 1, k * 32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'deconvFeatures0' + str(vq_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_126": {
                "variable": {
                    "value": "deconvLayer1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "[4, 4, k * 16]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'deconvFeatures0' + str(vq_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_131": {
                "variable": {
                    "value": "deconvLayer2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "[16, 16, k * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'deconvFeatures0' + str(vq_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "predicted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconvLayer2(deconvFeatures1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "viewpoint_learning/code/models/MCRegV_mult.py": {
        "tensorflow": {
            "reshape_106": {
                "variable": {
                    "value": "finalPredictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(final, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3 * numOutputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_106": {
                "values": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "viewpoint_learning/code/time_eval.py": {
        "tensorflow": {
            "concat_87": {
                "variable": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pred_views_norm_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "accuracy_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_90": {
                "variable": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_n_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_94": {
                "variable": {
                    "value": "regVariables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "weight_decay_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_111": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningRate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "learningDecayRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayRate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learningDecayFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_112": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minLearningRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_114": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tuple_135": {
                "variable": {
                    "value": "accumTrainOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_136": {
                "variable": {
                    "value": "accumTestOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_137": {
                "variable": {
                    "value": "accumVQLossOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vq_op_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_141": {
                "variable": {
                    "value": "(accumLoss, accumLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels, inSizes, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views_norm, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_142": {
                "variable": {
                    "value": "(accumAccuracy, accumAccuracyOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels, inSizes, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views_norm, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(accuracy_list)",
                            "Call"
                        ],
                        [
                            "accuracy",
                            "Method Argument"
                        ],
                        [
                            "accuracy",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_143": {
                "variable": {
                    "value": "(accumVQLoss, accumVQLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "VQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQLoss",
                            "Method Argument"
                        ],
                        [
                            "VQLoss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_144": {
                "variable": {
                    "value": "accumOpsTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "accumAccuracyOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_145": {
                "variable": {
                    "value": "accumOpsTest",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "accumAccuracyOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_162": {
                "variable": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumAccuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumVQLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_175": {
                "variable": {
                    "value": "trainingSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_176": {
                "variable": {
                    "value": "testSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Variable_344": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_345": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_346": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_347": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Batchids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_349": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "isTraining",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_352": {
                "variable": {
                    "value": "inSizes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inSizes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_353": {
                "variable": {
                    "value": "inSizes_mult",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inSizes_mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_354": {
                "variable": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbConv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbFull",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_356": {
                "variable": {
                    "value": "inVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "VQLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "inSigns",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SignLabels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_358": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variables_initializer_384": {
                "variable": {
                    "value": "resetMetrics",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "metricsVars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_variables('metrics', collection=tf.GraphKeys.LOCAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_391": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_392": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_395": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_398": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_399": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_402": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logFolder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_77": {
                "variable": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred_views_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_views_all",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3 * i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_78": {
                "variable": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_80": {
                "variable": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels, inSizes, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(pred_views, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat(pred_views_norm_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_103": {
                "variable": {
                    "value": "pred_views_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(pred_views, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Method Argument"
                        ],
                        [
                            "sizes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_104": {
                "variable": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_105": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(min_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.1)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "import_meta_graph_415": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "args.logFolder + '/model.ckpt.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_108": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch(repeatModelInBatch=args.tta)",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_115": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_162": {
                "values": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_163": {
                "values": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_164": {
                "values": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_165": {
                "name": {
                    "value": "Train total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_166": {
                "name": {
                    "value": "Train total accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_167": {
                "name": {
                    "value": "Train total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "name": {
                    "value": "Val total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_170": {
                "name": {
                    "value": "Val total accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_171": {
                "name": {
                    "value": "Val total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_172": {
                "name": {
                    "value": "learninRate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_173": {
                "name": {
                    "value": "BN_Momentum",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "BNMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN_decay(args.initBNMom, global_step, numBatchesXEpoch, 0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_350": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'Labels_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_351": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'Labels_mult_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(pred_views_norm, pred_views)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_n_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_103": {
                "input": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_106": {
                "input_tensor": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_106": {
                "x": {
                    "value": "tf.count_nonzero(tf.math.greater(threshold, min_dist))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(min_dist, out_type=tf.int64)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_154": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_155": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  accuracy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_156": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_158": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_159": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  accuracy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_160": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_399": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True, visible_device_list=args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "tf.multiply(pred_views_exp, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "count_nonzero_106": {
                "input": {
                    "value": "tf.math.greater(threshold, min_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_104": {
                "x": {
                    "value": "pred_views_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(pred_views, 1), sizes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch(repeatModelInBatch=args.tta)",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_106": {
                "x": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.shape(min_dist), t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_106": {
                "input": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "viewpoint_learning/code/train_images.py": {
        "tensorflow": {
            "concat_90": {
                "variable": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pred_views_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_93": {
                "variable": {
                    "value": "lossGraph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_images, numVQs, inImages, inRefViews)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_images, labels)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exponential_decay_103": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningRate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "learningDecayRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayRate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learningDecayFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_104": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minLearningRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_106": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tuple_126": {
                "variable": {
                    "value": "accumTrainOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_127": {
                "variable": {
                    "value": "accumTestOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_128": {
                "variable": {
                    "value": "accumVQLossOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vq_op_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_132": {
                "variable": {
                    "value": "(accumLoss, accumLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_images, numVQs, inImages, inRefViews)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_images, labels)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "(accumVQLoss, accumVQLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "VQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQLoss",
                            "Method Argument"
                        ],
                        [
                            "VQLoss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_134": {
                "variable": {
                    "value": "accumOpsTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_135": {
                "variable": {
                    "value": "accumOpsTest",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_150": {
                "variable": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "variable": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumVQLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_160": {
                "variable": {
                    "value": "trainingSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_161": {
                "variable": {
                    "value": "testSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Variable_327": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_328": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_329": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_330": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Batchids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_332": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "isTraining",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_333": {
                "variable": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbConv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_334": {
                "variable": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbFull",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_335": {
                "variable": {
                    "value": "inVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "VQLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_336": {
                "variable": {
                    "value": "inImages",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, None, 32, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "VQImages",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_337": {
                "variable": {
                    "value": "inRefViews",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1024, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "refViews",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_359": {
                "variable": {
                    "value": "resetMetrics",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "metricsVars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_variables('metrics', collection=tf.GraphKeys.LOCAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_366": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_367": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_370": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_373": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_374": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_380": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logFolder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "pred_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_images_all[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arg_max_81": {
                "variable": {
                    "value": "pred_views_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(pred_images, [-1, 1024])",
                    "type": "Call",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_82": {
                "variable": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ref_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_views",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "pred_views_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.arg_max(tf.reshape(pred_images, [-1, 1024]), dimension=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_99": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inImages[i]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred_images_all[i], [-1, 32, 32])",
                            "Call"
                        ],
                        [
                            "pred_images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "import_meta_graph_393": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "args.logFolder + '/model.ckpt.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_107": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_150": {
                "values": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_151": {
                "values": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_152": {
                "name": {
                    "value": "Train total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_153": {
                "name": {
                    "value": "Train total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_155": {
                "name": {
                    "value": "Val total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_156": {
                "name": {
                    "value": "Val total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_157": {
                "name": {
                    "value": "learninRate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_158": {
                "name": {
                    "value": "BN_Momentum",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "BNMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN_decay(args.initBNMom, global_step, numBatchesXEpoch, 0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "pred_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred_images_all[i], [-1, 32, 32])",
                            "Call"
                        ],
                        [
                            "pred_images",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_145": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_147": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_148": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_374": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True, visible_device_list=args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "viewpoint_learning/code/train_ops.py": {
        "tensorflow": {
            "placeholder_58": {
                "variable": {
                    "value": "inPtHierFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dummy_ptH_features_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "inPtHierAabbMin",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dummy_ptH_min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "inPtHierAabbMax",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dummy_ptH_max",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ptH_points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ptH_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ptH_batchIds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_285": {
                "variable": {
                    "value": "(grad_sum, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grad_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0 for i in range(len(vals))]",
                            "ListComp"
                        ],
                        [
                            "[grad_sum[i] + grad_x[i] + grad_y[i] + grad_z[i] for i in range(len(grad_x))]",
                            "ListComp"
                        ],
                        [
                            "[grad_sum[i] / batchSize + grad_reg[i] for i in range(len(vals))]",
                            "ListComp"
                        ],
                        [
                            "tf.clip_by_global_norm(grad_sum, 0.5)",
                            "Call"
                        ],
                        [
                            "[grad_x[i] + grad_y[i] + grad_z[i] for i in range(len(grad_x))]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_261": {
                "x": {
                    "value": "BNMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.train.exponential_decay(init_momentum, global_step, decay_rate, decay_factor, staircase=True)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'dummy_ptH_points_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'dummy_ptH_sampledInd_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'dummy_ptH_batchIds_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exponential_decay_260": {
                "learning_rate": {
                    "value": "init_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_momentum",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decay_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "viewpoint_learning/code/train_with_GL.py": {
        "tensorflow": {
            "concat_87": {
                "variable": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pred_views_norm_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_n_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "pred_views_formatted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_106": {
                "variable": {
                    "value": "max_inds_cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss * inVQs3d",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_107": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "max_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rows, max_inds_cols]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_109": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inSpheres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1000, 3], name='PointSpheres')",
                            "Call"
                        ],
                        [
                            "inSpheres",
                            "Method Argument"
                        ],
                        [
                            "inSpheres",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "max_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([rows, max_inds_cols], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exponential_decay_120": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningRate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "learningDecayRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayRate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learningDecayFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_121": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minLearningRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_123": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tuple_143": {
                "variable": {
                    "value": "accumTrainOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_144": {
                "variable": {
                    "value": "accumTestOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_145": {
                "variable": {
                    "value": "accumVQLossOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vq_op_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_149": {
                "variable": {
                    "value": "(accumLoss, accumLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inSpheres, inVQs3d, std, offset, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views_norm, inSpheres, inVQs3d[i], std, offset, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_150": {
                "variable": {
                    "value": "(accumVQLoss, accumVQLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "VQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQLoss",
                            "Method Argument"
                        ],
                        [
                            "VQLoss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_151": {
                "variable": {
                    "value": "accumOpsTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_152": {
                "variable": {
                    "value": "accumOpsTest",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumVQLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_177": {
                "variable": {
                    "value": "trainingSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_178": {
                "variable": {
                    "value": "testSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Variable_346": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_347": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_348": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_349": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Batchids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_351": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "isTraining",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_352": {
                "variable": {
                    "value": "inSpheres",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1000, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "PointSpheres",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_353": {
                "variable": {
                    "value": "inVQs3d",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, None, 1000]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "VQSpheres",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_354": {
                "variable": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbConv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbFull",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_356": {
                "variable": {
                    "value": "inVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "VQLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_358": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_359": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_382": {
                "variable": {
                    "value": "resetMetrics",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "metricsVars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_variables('metrics', collection=tf.GraphKeys.LOCAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_389": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_390": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_393": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_396": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_397": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_403": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logFolder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_78": {
                "variable": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred_views_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_views_all",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3 * i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_79": {
                "variable": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_81": {
                "variable": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inSpheres, inVQs3d, std, offset, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(pred_views, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat(pred_views_norm_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "import_meta_graph_416": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "args.logFolder + '/model.ckpt.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(pred_views_norm, pred_views)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_n_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_107": {
                "x": {
                    "value": "tf.shape(pred_views)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cosine_distance_112": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(inSpheres, max_inds)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_114": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(inSpheres, max_inds)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_117": {
                "x": {
                    "value": "-tf.norm(pts - mean, axis=2) / (2 * std ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_124": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_167": {
                "values": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_168": {
                "values": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "name": {
                    "value": "Train total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_170": {
                "name": {
                    "value": "Train total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_172": {
                "name": {
                    "value": "Val total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_173": {
                "name": {
                    "value": "Val total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_174": {
                "name": {
                    "value": "learninRate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_175": {
                "name": {
                    "value": "BN_Momentum",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "BNMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN_decay(args.initBNMom, global_step, numBatchesXEpoch, 0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_161": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_162": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_164": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_165": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_397": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True, visible_device_list=args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_107": {
                "input": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_117": {
                "tensor": {
                    "value": "pts - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "viewpoint_learning/code/train_with_ML.py": {
        "tensorflow": {
            "concat_87": {
                "variable": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pred_views_norm_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "accuracy_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_90": {
                "variable": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_n_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_94": {
                "variable": {
                    "value": "regVariables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "weight_decay_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_111": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningRate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "learningDecayRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayRate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learningDecayFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_112": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minLearningRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_114": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tuple_135": {
                "variable": {
                    "value": "accumTrainOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_136": {
                "variable": {
                    "value": "accumTestOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_137": {
                "variable": {
                    "value": "accumVQLossOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vq_op_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_141": {
                "variable": {
                    "value": "(accumLoss, accumLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels, inSizes, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views_norm, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_142": {
                "variable": {
                    "value": "(accumAccuracy, accumAccuracyOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels, inSizes, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views_norm, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(accuracy_list)",
                            "Call"
                        ],
                        [
                            "accuracy",
                            "Method Argument"
                        ],
                        [
                            "accuracy",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_143": {
                "variable": {
                    "value": "(accumVQLoss, accumVQLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "VQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQLoss",
                            "Method Argument"
                        ],
                        [
                            "VQLoss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_144": {
                "variable": {
                    "value": "accumOpsTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "accumAccuracyOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_145": {
                "variable": {
                    "value": "accumOpsTest",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "accumAccuracyOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_162": {
                "variable": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumAccuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumVQLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_175": {
                "variable": {
                    "value": "trainingSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_176": {
                "variable": {
                    "value": "testSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Variable_342": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_343": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_344": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_345": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Batchids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_347": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "isTraining",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_350": {
                "variable": {
                    "value": "inSizes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inSizes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_351": {
                "variable": {
                    "value": "inSizes_mult",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inSizes_mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_352": {
                "variable": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbConv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_353": {
                "variable": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbFull",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_354": {
                "variable": {
                    "value": "inVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "VQLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "inSigns",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SignLabels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_356": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variables_initializer_382": {
                "variable": {
                    "value": "resetMetrics",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "metricsVars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_variables('metrics', collection=tf.GraphKeys.LOCAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_389": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_390": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_393": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_396": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_397": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_400": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logFolder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_77": {
                "variable": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred_views_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_views_all",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3 * i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_78": {
                "variable": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_80": {
                "variable": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "pred_views_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels, inSizes, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(pred_views, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat(pred_views_norm_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_103": {
                "variable": {
                    "value": "pred_views_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(pred_views, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Method Argument"
                        ],
                        [
                            "sizes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_104": {
                "variable": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_105": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(min_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.1)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "import_meta_graph_413": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "args.logFolder + '/model.ckpt.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_108": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch(repeatModelInBatch=args.tta)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_115": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_162": {
                "values": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_163": {
                "values": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_164": {
                "values": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_165": {
                "name": {
                    "value": "Train total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_166": {
                "name": {
                    "value": "Train total accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_167": {
                "name": {
                    "value": "Train total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "name": {
                    "value": "Val total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_170": {
                "name": {
                    "value": "Val total accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_171": {
                "name": {
                    "value": "Val total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_172": {
                "name": {
                    "value": "learninRate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_173": {
                "name": {
                    "value": "BN_Momentum",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "BNMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BN_decay(args.initBNMom, global_step, numBatchesXEpoch, 0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_348": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'Labels_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_349": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'Labels_mult_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "loss_normalizing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(pred_views_norm, pred_views)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_n_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_103": {
                "input": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, 1, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, useRenorm, BNMomentum)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_106": {
                "input_tensor": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_106": {
                "x": {
                    "value": "tf.count_nonzero(tf.math.greater(threshold, min_dist))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(min_dist, out_type=tf.int64)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_154": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_155": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  accuracy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_156": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_158": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_159": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  accuracy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_160": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_397": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True, visible_device_list=args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "tf.multiply(pred_views_exp, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "count_nonzero_106": {
                "input": {
                    "value": "tf.math.greater(threshold, min_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_104": {
                "x": {
                    "value": "pred_views_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(pred_views, 1), sizes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch(repeatModelInBatch=args.tta)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_106": {
                "x": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.shape(min_dist), t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_106": {
                "input": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "viewpoint_learning/code/train_with_SR.py": {
        "tensorflow": {
            "stack_93": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_94": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "accuracy_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_98": {
                "variable": {
                    "value": "regVariables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "weight_decay_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_123": {
                "variable": {
                    "value": "pred_signs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pred_signs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "loss_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "create_classification_loss_tf(logits, labels[i])",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_128": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, numInputFeatures, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, activation=args.activation)",
                            "Call"
                        ],
                        [
                            "tf.slice(predLogits, [0, 8 * i], [-1, 8])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "xentropyloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='xentropy')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "top_k_130": {
                "variable": {
                    "value": "(_, logitsIndexs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.create_network(inPts, inFeatures, inBatchIds, args.batchSize, numInputFeatures, args.grow, 3, numVQs, isTraining, keepProbConv, keepProbFull, args.useDropOutConv, args.useDropOut, activation=args.activation)",
                            "Call"
                        ],
                        [
                            "tf.slice(predLogits, [0, 8 * i], [-1, 8])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exponential_decay_134": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningRate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "learningDecayRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayRate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learningDecayFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_135": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "minLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minLearningRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_137": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tuple_158": {
                "variable": {
                    "value": "accumTrainOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_159": {
                "variable": {
                    "value": "accumTestOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tuple_160": {
                "variable": {
                    "value": "accumVQLossOp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vq_op_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_164": {
                "variable": {
                    "value": "(accumLoss, accumLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "create_classification_loss_tf(logits, labels[i])",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_165": {
                "variable": {
                    "value": "(accumAccuracy, accumAccuracyOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(accuracy_list)",
                            "Call"
                        ],
                        [
                            "accuracy",
                            "Method Argument"
                        ],
                        [
                            "accuracy",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "(accumVQLoss, accumVQLossOp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "VQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VQLoss",
                            "Method Argument"
                        ],
                        [
                            "VQLoss",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_167": {
                "variable": {
                    "value": "accumOpsTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "accumAccuracyOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "group_168": {
                "variable": {
                    "value": "accumOpsTest",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "accumLossOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "accumAccuracyOp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_185": {
                "variable": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumAccuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(accumVQLoss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_198": {
                "variable": {
                    "value": "trainingSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_199": {
                "variable": {
                    "value": "testSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Variable_369": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_370": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Points",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_371": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, numInputFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_372": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Batchids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_374": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "isTraining",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_377": {
                "variable": {
                    "value": "inSizes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inSizes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_378": {
                "variable": {
                    "value": "inSizes_mult",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inSizes_mult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_379": {
                "variable": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbConv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_380": {
                "variable": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keepProbFull",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_381": {
                "variable": {
                    "value": "inVQLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "VQLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "inSigns",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numVQs, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SignLabels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_383": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variables_initializer_410": {
                "variable": {
                    "value": "resetMetrics",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "metricsVars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_variables('metrics', collection=tf.GraphKeys.LOCAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_417": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_418": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_421": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_424": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_425": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_428": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logFolder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_76": {
                "variable": {
                    "value": "views",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred_views_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_views_all",
                            "Method Argument"
                        ],
                        [
                            "pred_views_all",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3 * i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_80": {
                "values": {
                    "value": "signed_views_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_87": {
                "variable": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred_views_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_views_all",
                            "Method Argument"
                        ],
                        [
                            "pred_views_all",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3 * i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "pred_views_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(pred_views, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Method Argument"
                        ],
                        [
                            "sizes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_108": {
                "variable": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_109": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(min_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.1)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_118": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "predLogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predLogits",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 8 * i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "import_meta_graph_441": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "args.logFolder + '/model.ckpt.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_mult_tf(pred_views, numVQs, inLabels_mult, inSizes_mult, t, args.weightDecay, args.cosineLoss)",
                            "Call"
                        ],
                        [
                            "create_loss_tf(pred_views, labels[i], sizes[i], t, cosine)",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "create_classification_loss_tf(logits, labels[i])",
                            "Call"
                        ],
                        [
                            "tf.stack(loss_list)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_112": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signed_views(pred_views_abs, pred_signs, numVQs)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_185": {
                "values": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_186": {
                "values": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_187": {
                "values": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_188": {
                "name": {
                    "value": "Train total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_189": {
                "name": {
                    "value": "Train total accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_190": {
                "name": {
                    "value": "Train total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_192": {
                "name": {
                    "value": "Val total cosine distance",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(loss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumLoss))",
                            "Call"
                        ],
                        [
                            "accumLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_193": {
                "name": {
                    "value": "Val total accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(accuracy, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumAccuracy))",
                            "Call"
                        ],
                        [
                            "accumAccuracy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_194": {
                "name": {
                    "value": "Val total VQ loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss_metrics_mult(loss, accuracy, inVQLoss, numVQs)",
                            "Call"
                        ],
                        [
                            "create_summaries(accumLoss, accumAccuracy, accumVQLoss, VQ, numVQs)",
                            "Call"
                        ],
                        [
                            "create_loss_metrics(loss[i], accuracy[i], VQLoss[i])",
                            "Call"
                        ],
                        [
                            "tf.metrics.mean(VQLoss, name='metrics')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.stack(accumVQLoss))",
                            "Call"
                        ],
                        [
                            "accumVQLoss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "name": {
                    "value": "learninRate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_training(lossGraph, args.initLearningRate, args.minLearningRate, args.learningDecayFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningDecayRate, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, minLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_196": {
                "name": {
                    "value": "BN_Momentum",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "BNMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                }
            },
            "placeholder_375": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'Labels_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_376": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'Labels_mult_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_395": {
                "x": {
                    "value": "inLabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.placeholder(tf.float32, [None, None, 3], name='Labels_' + str(i)) for i in range(numVQs)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "pred_views",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signed_views(pred_views_abs, pred_signs, numVQs)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred_views_all, [0, 3 * i], [-1, 3])",
                            "Call"
                        ],
                        [
                            "pred_views",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_109": {
                "input": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_110": {
                "x": {
                    "value": "tf.count_nonzero(tf.math.greater(threshold, min_dist))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(min_dist, out_type=tf.int64)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_177": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_178": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  accuracy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_179": {
                "name": {
                    "value": "Train VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_181": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  cosine distance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_182": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  accuracy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumAccuracy[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_183": {
                "name": {
                    "value": "Val VQ  + VQs[i] +  loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accumVQLoss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_425": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True, visible_device_list=args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_78": {
                "values": {
                    "value": "[tf.mod(sign_ids, 2), tf.mod(sign_ids / 2, 2), tf.mod(sign_ids / 4, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_79": {
                "x": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "1 - 2 * tf.concat([tf.mod(sign_ids, 2), tf.mod(sign_ids / 2, 2), tf.mod(sign_ids / 4, 2)], axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_108": {
                "input_tensor": {
                    "value": "tf.multiply(pred_views_exp, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "count_nonzero_110": {
                "input": {
                    "value": "tf.math.greater(threshold, min_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_108": {
                "x": {
                    "value": "pred_views_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(pred_views, 1), sizes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mTrainDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mValDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "mTestDataSet.get_next_batch()",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_110": {
                "x": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.shape(min_dist), t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_110": {
                "input": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(1 - tf.reduce_sum(tf.multiply(pred_views_exp, labels), axis=2), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mod_78": {
                "x1": {
                    "value": "sign_ids / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}