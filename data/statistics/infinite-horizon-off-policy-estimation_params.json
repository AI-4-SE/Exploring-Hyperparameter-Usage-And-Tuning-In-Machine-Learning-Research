{
    "sumo/Density_ratio_continuous.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.med_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.next_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.state2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.next_state2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.policy_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.policy_ratio2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "norm_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_to_w(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "tf.ones([tf.shape(state)[0]])",
                            "Call"
                        ],
                        [
                            "w * w_part_i",
                            "BinOp"
                        ],
                        [
                            "self.state_to_w_batch_norm(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.state_to_w_gau_mix(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.get_density_ratio(np.array(S))",
                            "Call"
                        ],
                        [
                            "self.get_density_ratio(np.array(S0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_33": {
                "variable": {
                    "value": "norm_w_next",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_to_w(self.next_state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.state_to_w_batch_norm(self.next_state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.state_to_w_gau_mix(self.next_state, obs_dim, w_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "norm_w_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w * self.policy_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "variable": {
                    "value": "norm_w2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_to_w(self.state2, obs_dim, w_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "norm_w_next2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_next2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_to_w(self.next_state2, obs_dim, w_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_37": {
                "variable": {
                    "value": "norm_w_beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w2 * self.policy_ratio2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_49": {
                "variable": {
                    "value": "K_xx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_sum(tf.square(diff_xx), axis=-1) / (2.0 * self.med_dist * self.med_dist)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "norm_K",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "K_xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.reduce_sum(tf.square(diff_xx), axis=-1) / (2.0 * self.med_dist * self.med_dist))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_52": {
                "a": {
                    "value": "tf.expand_dims(x, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K_xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.reduce_sum(tf.square(diff_xx), axis=-1) / (2.0 * self.med_dist * self.med_dist))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_56": {
                "variable": {
                    "value": "self.reg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES, 'w')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_57": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "Learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Learning_rate",
                            "Method Argument"
                        ],
                        [
                            "Learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "variable": {
                    "value": "self.debug1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_to_w(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "tf.ones([tf.shape(state)[0]])",
                            "Call"
                        ],
                        [
                            "w * w_part_i",
                            "BinOp"
                        ],
                        [
                            "self.state_to_w_batch_norm(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.state_to_w_gau_mix(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.get_density_ratio(np.array(S))",
                            "Call"
                        ],
                        [
                            "self.get_density_ratio(np.array(S0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "self.debug2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_to_w(self.next_state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.state_to_w_batch_norm(self.next_state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.state_to_w_gau_mix(self.next_state, obs_dim, w_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_63": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "self.next_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "self.policy_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_255": {
                "variable": {
                    "value": "norm_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_to_w(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "tf.ones([tf.shape(state)[0]])",
                            "Call"
                        ],
                        [
                            "w * w_part_i",
                            "BinOp"
                        ],
                        [
                            "self.state_to_w_batch_norm(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.state_to_w_gau_mix(self.state, obs_dim, w_hidden)",
                            "Call"
                        ],
                        [
                            "self.get_density_ratio(np.array(S))",
                            "Call"
                        ],
                        [
                            "self.get_density_ratio(np.array(S0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_265": {
                "variable": {
                    "value": "self.reg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES, 'w')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "variable": {
                    "value": "self.reg_loss_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES, 'f')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_278": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_75": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(state)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(shape=[obs_dim, hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_87": {
                "variable": {
                    "value": "(mean_z1, var_z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W4) + b4",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "scale_z1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale_z1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "beta_z1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_z1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.01 * tf.random_normal(shape=[hidden_dim_dr, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_272": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "Learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Learning_rate",
                            "Method Argument"
                        ],
                        [
                            "Learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_273": {
                "variable": {
                    "value": "f_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_274": {
                "variable": {
                    "value": "w_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moments_290": {
                "variable": {
                    "value": "(mean_state, var_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "(state - mean_state) / tf.sqrt(var_state)",
                            "BinOp"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_301": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([num_component])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_302": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initial_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=[num_component, obs_dim], stddev=np.sqrt(1.0))",
                            "Call"
                        ],
                        [
                            "initial_mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_305": {
                "variable": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_sigma",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([num_component])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_307": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.exp(log_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_329": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(shape=[obs_dim, hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_330": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_332": {
                "variable": {
                    "value": "(mean_z1, var_z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W4) + b4",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_333": {
                "variable": {
                    "value": "scale_z1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale_z1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_334": {
                "variable": {
                    "value": "beta_z1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_z1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_335": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_339": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.1 * tf.random_normal(shape=[hidden_dim_dr, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_340": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_368": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.5 * tf.random_normal(shape=[obs_dim, hidden_dim_dr])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_369": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_371": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_374": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.5 * tf.random_normal(shape=[hidden_dim_dr, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_375": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_394": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(shape=[obs_dim, hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_395": {
                "variable": {
                    "value": "b4",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_397": {
                "variable": {
                    "value": "(mean_z1, var_z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W4) + b4",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_398": {
                "variable": {
                    "value": "scale_z1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale_z1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_399": {
                "variable": {
                    "value": "beta_z1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_z1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_dim_dr])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_400": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_403": {
                "variable": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W5",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(shape=[hidden_dim_dr, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_404": {
                "variable": {
                    "value": "b5",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b5",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "self.next_state2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w * self.policy_ratio / norm_w - w_next / norm_w_next",
                            "BinOp"
                        ],
                        [
                            "w * self.policy_ratio - w_next",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "input": {
                    "value": "loss_xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.matmul(tf.expand_dims(x, 0), K_xx), tf.expand_dims(x2, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_56": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_101": {
                "x": {
                    "value": "1 + tf.exp(tf.squeeze(z2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_256": {
                "x": {
                    "value": "tf.reduce_mean(f_next * f_next)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_265": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_266": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_270": {
                "input_tensor": {
                    "value": "x * f_next",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_298": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_308": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.exp(log_prob), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_343": {
                "x": {
                    "value": "1 + tf.exp(tf.squeeze(z2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_362": {
                "name_or_scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_378": {
                "x": {
                    "value": "1 + tf.exp(tf.squeeze(z2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_419": {
                "input": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W5) + b5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "(state - mean_state) / tf.sqrt(var_state)",
                            "BinOp"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W1', initializer=tf.random_normal(shape=[obs_dim, hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W1', initializer=tf.random_normal(shape=[obs_dim, hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W1', initializer=0.5 * tf.random_normal(shape=[obs_dim, hidden_dim_dr]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_90": {
                "x": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W4) + b4",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(z1)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W2', initializer=0.01 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', initializer=0.1 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', initializer=0.5 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_256": {
                "input_tensor": {
                    "value": "f_next * f_next",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_291": {
                "x": {
                    "value": "var_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(state, [0])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_307": {
                "x": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha - tf.reduce_sum(tf.square(tf.expand_dims(state, 1) - tf.expand_dims(mu, 0)), axis=-1) / (20 * tf.exp(log_sigma) + std_min)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_331": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "(state - mean_state) / tf.sqrt(var_state)",
                            "BinOp"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W1', initializer=tf.random_normal(shape=[obs_dim, hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W1', initializer=tf.random_normal(shape=[obs_dim, hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W1', initializer=0.5 * tf.random_normal(shape=[obs_dim, hidden_dim_dr]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_335": {
                "x": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W4) + b4",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_341": {
                "a": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(z1)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W2', initializer=0.01 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', initializer=0.1 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', initializer=0.5 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_370": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "(state - mean_state) / tf.sqrt(var_state)",
                            "BinOp"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W1', initializer=tf.random_normal(shape=[obs_dim, hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W1', initializer=tf.random_normal(shape=[obs_dim, hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W1', initializer=0.5 * tf.random_normal(shape=[obs_dim, hidden_dim_dr]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_376": {
                "a": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(z1)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W2', initializer=0.01 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', initializer=0.1 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W2', initializer=0.5 * tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_396": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "(state - mean_state) / tf.sqrt(var_state)",
                            "BinOp"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W4', initializer=tf.random_normal(shape=[obs_dim, hidden_dim_dr]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_400": {
                "x": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W1) + b1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(state, W4) + b4",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(z1, [0])",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta_z1', initializer=tf.zeros([hidden_dim_dr]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('scale_z1', initializer=tf.ones([hidden_dim_dr]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_405": {
                "a": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ],
                        [
                            "tf.tanh(z1)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.nn.batch_normalization(z1, mean_z1, var_z1, beta_z1, scale_z1, 1e-10))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W5', initializer=tf.random_normal(shape=[hidden_dim_dr, 1]), regularizer=tf.contrib.layers.l2_regularizer(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "tf.square(diff_xx)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_88": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_101": {
                "x": {
                    "value": "tf.squeeze(z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "shape": {
                    "value": "[num_component]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "shape": {
                    "value": "[num_component]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_306": {
                "input_tensor": {
                    "value": "tf.square(tf.expand_dims(state, 1) - tf.expand_dims(mu, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_333": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_343": {
                "x": {
                    "value": "tf.squeeze(z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_378": {
                "x": {
                    "value": "tf.squeeze(z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_395": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_398": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "shape": {
                    "value": "[hidden_dim_dr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_404": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_49": {
                "x": {
                    "value": "diff_xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.next_state, 1) - tf.expand_dims(self.next_state2, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "(state - mean_state) / tf.sqrt(var_state)",
                            "BinOp"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "sasr",
                            "variable"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_101": {
                "input": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W5) + b5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_306": {
                "x": {
                    "value": "tf.expand_dims(state, 1) - tf.expand_dims(mu, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_343": {
                "input": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W5) + b5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_378": {
                "input": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(l1, W5) + b5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_306": {
                "x": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('log_sigma', initializer=tf.zeros([num_component]))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_306": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('mu', initializer=initial_mu)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}