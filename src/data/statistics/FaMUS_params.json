{
    "FaMUS/train_famus_redminiimage.py": {
        "sklearn": {
            "GaussianMixture_362": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "reg_covar": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "softmax_100": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "pred_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_110": {
                "variable": {
                    "value": "pred_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior * torch.log(prior / pred_mean)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "cost_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy(y_f_hat, target_var, reduction=False, use_pytorch=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(len(cost), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_190": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "l_f_meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.sum(v_lambda[0:batch_size // 2] * cost[0:batch_size // 2]) + 2 * cur_lambda_u * torch.sum(v_lambda[batch_size // 2:] * mse_loss[batch_size // 2:])",
                            "BinOp"
                        ],
                        [
                            "l_f_meta + l_r_meta",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "meta_model.params()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_218": {
                "variable": {
                    "value": "valid_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "valid_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy(valid_y_f_hat, target_validation_var, reduction=True, use_pytorch=True)",
                            "Call"
                        ],
                        [
                            "valid_loss + valid_l_r",
                            "BinOp"
                        ],
                        [
                            "valid_loss + args.act_factor * act_loss",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tuple(valid_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "variable": {
                    "value": "cost_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_entropy(y_f, target_var, reduction=False, use_pytorch=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(len(cost_w), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dataloader.dataset.__len__()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_471": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_var)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_83": {
                "input": {
                    "value": "torch.sum(probs.log() * probs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_87": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "'none'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_102": {
                "input": {
                    "value": "(probs - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "(probs - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_141": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_var)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_var(target, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "to_var(target_train, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "to_var(target_train, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "to_var(targets, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_353": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_var)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_var(target, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "to_var(target_train, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "to_var(target_train, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "to_var(targets, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "probs.log() * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_89": {
                "input": {
                    "value": "torch.sum(F.log_softmax(input, dim=1) * target.float(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "F.log_softmax(input, dim=1) * target.float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "prior / pred_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "v_lambda[batch_size // 2:] * mse_loss[batch_size // 2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_274": {
                "input": {
                    "value": "w_new[batch_size // 2:] * mse_loss[batch_size // 2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "F.log_softmax(input, dim=1) * target.float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_226": {
                "input": {
                    "value": "grad_target.view(dim0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_226": {
                "input": {
                    "value": "grad_target.view(dim0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_227": {
                "input": {
                    "value": "train_grad.view(dim0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_227": {
                "input": {
                    "value": "train_grad.view(dim0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_228": {
                "input": {
                    "value": "(pg_mean - g_mean) ** 2 + (pg_std - g_std) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_231": {
                "input": {
                    "value": "grad_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valid_grad.detach()",
                            "Call"
                        ],
                        [
                            "valid_grad.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "std_231": {
                "input": {
                    "value": "grad_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valid_grad.detach()",
                            "Call"
                        ],
                        [
                            "valid_grad.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_232": {
                "input": {
                    "value": "train_grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "std_232": {
                "input": {
                    "value": "train_grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_233": {
                "input": {
                    "value": "(pg_mean - g_mean) ** 2 + (pg_std - g_std) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_91": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_89": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/code_mentormix_r32/code/mini_imagenet_data_provider.py": {
        "tensorflow": {
            "to_float_81": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_100": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, dataset.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(one_hot_labels, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_crop_87": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_88": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_185": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_147": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_170": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_brightness_172": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_173": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_174": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_175": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_177": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_178": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_179": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_180": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size + 4, image_size + 4)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "_apply_with_random_selector(image, lambda x, ordering: distort_color(x, ordering), num_cases=2)",
                            "Call"
                        ],
                        [
                            "2 * (image - 0.5)",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 127.5) / 127.5",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_148": {
                "x": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/code_mentormix_r32/code/mini_imagenet_dataset.py": {
        "tensorflow": {
            "Dataset_112": {
                "data_sources": {
                    "value": "file_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, _FILE_PATTERN % split_name)",
                            "Call"
                        ]
                    ]
                },
                "reader": {
                    "value": "tf.TFRecordReader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfexample_decoder.TFExampleDecoder(keys_to_features, items_to_handlers)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "_SPLITS_TO_SIZES[split_name]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'red_noise_nl_0.0': 50000, 'red_noise_nl_0.05': 50000, 'red_noise_nl_0.1': 50000, 'red_noise_nl_0.15': 50000, 'red_noise_nl_0.2': 50000, 'red_noise_nl_0.3': 49985, 'red_noise_nl_0.4': 50010, 'red_noise_nl_0.5': 49962, 'red_noise_nl_0.6': 50000, 'red_noise_nl_0.8': 50008, 'clean_validation': 5000}",
                            "Dict"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "_NUM_CLASSES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "items_to_descriptions": {
                    "value": "_ITEMS_TO_DESCRIPTIONS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': 'A [32 x 32 x 3] color image.', 'image/class/label': 'A single integer between 0 and 99.', 'image/format': 'a string indicating the image format.', 'image/class/fine_label': 'A single integer between 0 and 99.'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "FixedLenFeature_90": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_91": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_92": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([1], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_94": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([1], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_101": {
                "op": {
                    "value": "image/class/label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "op": {
                    "value": "image/class/fine_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/code_mentormix_r32/code/mini_imagenet_eval.py": {
        "tensorflow": {
            "set_verbosity_75": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_82": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_84": {
                "variable": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_111": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9999",
                    "type": "float",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_120": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.build_model()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(total_loss, name='xent')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_128": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.build_model()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_129": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_141": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_113": {
                "key": {
                    "value": "moving_vars",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_162": {
                "msg": {
                    "value": "unknown backbone student network %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.studentnet",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "ResNet32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_114": {
                "name": {
                    "value": "tf.GraphKeys.MOVING_AVERAGE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('moving_vars')",
                            "Call"
                        ],
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_116": {
                "name": {
                    "value": "tf.GraphKeys.MOVING_AVERAGE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('moving_vars')",
                            "Call"
                        ],
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_132": {
                "labels": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(one_hot_labels, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/code_mentormix_r32/code/mini_imagenet_train_mentormix.py": {
        "tensorflow": {
            "set_verbosity_121": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_169": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_142": {
                "key": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_173": {
                "variable": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_201": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.build_model()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_205": {
                "variable": {
                    "value": "example_dropout_rates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "dropout_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.parse_dropout_rate_list(FLAGS.example_dropout_rates)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "example_dropout_rates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_208": {
                "variable": {
                    "value": "loss_p_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array([FLAGS.loss_p_percentile] * 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_p_percentile",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(loss))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels_mix, logits=logits_mix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(weighted_loss_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_215": {
                "variable": {
                    "value": "epoch_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.divide(tf_global_step, max_step_run) * 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "zero_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(loss)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_235": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='individual')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ],
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='mixed')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_236": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.identity(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_237": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.identity(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_246": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.build_model()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_273": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(loss))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels_mix, logits=logits_mix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(weighted_loss_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_283": {
                "variable": {
                    "value": "moving_average_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_287": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9999",
                    "type": "float",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "exponential_decay_293": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.num_epochs_per_decay * num_samples_per_epoch / FLAGS.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.learning_rate, tf_global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_345": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_348": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "error_372": {
                "msg": {
                    "value": "unknown backbone student network %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.studentnet",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_151": {
                "msg": {
                    "value": "global step %d: loss = %.4f (%.3f sec/step)",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "np_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "total_loss_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_172": {
                "device_name": {
                    "value": "tf.train.replica_device_setter(FLAGS.ps_tasks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(loss))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels_mix, logits=logits_mix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(weighted_loss_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_262": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='individual')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ],
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='mixed')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_263": {
                "variable": {
                    "value": "weighted_loss_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(loss))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels_mix, logits=logits_mix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(weighted_loss_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='individual')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ],
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='mixed')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_264": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted_loss_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(loss, v)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_regularization_loss_266": {
                "variable": {
                    "value": "decay_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_280": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weighted_total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss + decay_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_289": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "variable_averages.apply(moving_average_variables)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_305": {
                "variable": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_309": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "weighted_total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss + decay_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.filter_variables(trainable_variables, exclude_patterns=['mentornet'])",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_310": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.learning_rate, tf_global_step, decay_steps, FLAGS.learning_rate_decay_factor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(lr)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_319": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_340": {
                "msg": {
                    "value": "'-' * 20 + 'MentorMix' + '-' * 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_341": {
                "msg": {
                    "value": "loss_p_percentile=%3f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.loss_p_percentile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_342": {
                "msg": {
                    "value": "mixup_alpha=%d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.mixup_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_343": {
                "msg": {
                    "value": "'-' * 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "replica_device_setter_172": {
                "ps_tasks": {
                    "value": "FLAGS.ps_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "ResNet32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_216": {
                "x": {
                    "value": "tf.divide(tf_global_step, max_step_run) * 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_236": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(loss))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels_mix, logits=logits_mix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(weighted_loss_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_237": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.build_model()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "ResNet32",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(loss))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels_mix, logits=logits_mix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(weighted_loss_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_303": {
                "control_inputs": {
                    "value": "[weighted_total_loss, data_util]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "latest_checkpoint_325": {
                "variable": {
                    "value": "ckpt_model",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.trained_mentornet_dir",
                            "Attribute"
                        ],
                        [
                            "tf.train.latest_checkpoint(ckpt_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_317": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_335": {
                "msg": {
                    "value": "Restore using customer initializer %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "'.' * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_216": {
                "x": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_step_run",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_218": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.identity(loss))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels_mix, logits=logits_mix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(loss, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(weighted_loss_vector)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_267": {
                "input_tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='individual')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ],
                        [
                            "utils.mentornet(epoch_step, loss, zero_labels, loss_p_percentile, example_dropout_rates, burn_in_epoch=FLAGS.burn_in_epoch, mentornet_net_hparams=mentornet_net_hparams, avg_name='mixed')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/code_mentormix_r32/code/resnet_model.py": {
        "tensorflow": {
            "Variable_73": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_all_77": {
                "variable": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_131": {
                "variable": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hps.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_134": {
                "variable": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_135": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_147": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.hps.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_285": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.uniform_unit_scaling_initializer(factor=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_288": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_132": {
                "name": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_186": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', params_shape, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_variance', params_shape, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', params_shape, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', params_shape, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "info_221": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_256": {
                "msg": {
                    "value": "image after unit %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "x.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_266": {
                "x": {
                    "value": "self.hps.weight_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add_n(costs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_272": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "DW",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, filter_size, in_filters, out_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=np.sqrt(2.0 / n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_280": {
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "leakiness * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "leaky_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_290": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [x.get_shape()[1], out_dim], initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_dim], initializer=tf.constant_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_294": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "unit_1_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "unit_2_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "unit_3_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "unit_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lrn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "moments_162": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "moving_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_178": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_182": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_215": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_216": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self._conv('project', orig_x, 1, in_filter, out_filter, stride)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "sub1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "sub2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "sub3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "sub_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_266": {
                "inputs": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_276": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('DW', [filter_size, filter_size, in_filters, out_filters], tf.float32, initializer=tf.random_normal_initializer(stddev=np.sqrt(2.0 / n)))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 2]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_280": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._images",
                            "Attribute"
                        ],
                        [
                            "self._conv('init_conv', x, 3, 3, 64, self._stride_arr(1))",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[0], filters[1], self._stride_arr(strides[0]), activate_before_residual[0])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[1], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[1], filters[2], self._stride_arr(strides[1]), activate_before_residual[1])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[2], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[2], filters[3], self._stride_arr(strides[2]), activate_before_residual[2])",
                            "Call"
                        ],
                        [
                            "res_func(x, filters[3], filters[3], self._stride_arr(1), False)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('final_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 3, in_filter, out_filter, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('init_bn', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv1', x, 1, in_filter, out_filter / 4, stride)",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn2', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv2', x, 3, out_filter / 4, out_filter / 4, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._batch_norm('bn3', x)",
                            "Call"
                        ],
                        [
                            "self._relu(x, self.hps.relu_leakiness)",
                            "Call"
                        ],
                        [
                            "self._conv('conv3', x, 1, out_filter / 4, out_filter, [1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [self.hps.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "'unit_1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "'unit_2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "'unit_3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "shared_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "residual_only_activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "common_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "residual_bn_relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_287": {
                "factor": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_156": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_159": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_264": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_274": {
                "stddev": {
                    "value": "np.sqrt(2.0 / n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_166": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_170": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_180": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_184": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/code_mentormix_r32/code/utils.py": {
        "tensorflow": {
            "get_variable_60": {
                "variable": {
                    "value": "nonzero_v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "data_util/nonzero_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_65": {
                "variable": {
                    "value": "rounded_v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_68": {
                "variable": {
                    "value": "nonzero_v",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "nonzero_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('data_util/nonzero_v', [], initializer=tf.zeros_initializer(), trainable=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(nonzero_v, tf.count_nonzero(rounded_v, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.count_nonzero(rounded_v, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_73": {
                "variable": {
                    "value": "data_util",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data_util",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonzero_v / tf.to_float(batch_size) / (tf.to_float(tf_global_step) + 2)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(data_util, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_features[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "loss_diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_features[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_135": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(input_features[:, 2], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_136": {
                "variable": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(input_features[:, 3], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_137": {
                "variable": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.reshape(input_features[:, 3], [-1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.minimum(epochs, tf.ones([batch_size, 1], dtype=tf.int32) * 99)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones([batch_size, 1], dtype=tf.int32) * 99",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([loss, lossdiff, labels, epoch_vec], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_309": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weights, [-1, 1], name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data, label_embedding_size=hparams.label_embedding_size, epoch_embedding_size=hparams.epoch_embedding_size, num_label_embedding=hparams.num_label_embedding, num_fc_nodes=hparams.num_fc_nodes), name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data), name='v')",
                            "Call"
                        ],
                        [
                            "tf.maximum(v, upper_bound, 'v_bound')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(cur_epoch < burn_in_epoch - 1, lambda : v_ones, lambda : v_zeros)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "v_bound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_311": {
                "variable": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "probabilistic_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[v, this_dropout_rate, 'random']",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_313": {
                "variable": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(probabilistic_sample, [v, this_dropout_rate, 'random'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_dropout, [-1, 1], name='v_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[cur_epoch, loss_moving_avg, percentile_loss], summarize=64, message='epoch, loss_moving_avg, percentile_loss')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[lossdiff], summarize=64, message='loss_diff')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v], summarize=64, message='v')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v_dropout], summarize=64, message='v_dropout')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_344": {
                "variable": {
                    "value": "v_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weights, [-1, 1], name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data, label_embedding_size=hparams.label_embedding_size, epoch_embedding_size=hparams.epoch_embedding_size, num_label_embedding=hparams.num_label_embedding, num_fc_nodes=hparams.num_fc_nodes), name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data), name='v')",
                            "Call"
                        ],
                        [
                            "tf.maximum(v, upper_bound, 'v_bound')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_348": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample(tf.shape(x)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_349": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample(tf.shape(x)[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Beta_351": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "beta_param",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "beta_param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_354": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(beta_param, beta_param).sample([tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf.where(v_flat >= 0.5, mix, 1 - mix)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_355": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "v_flat >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(beta_param, beta_param).sample([tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf.where(v_flat >= 0.5, mix, 1 - mix)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_359": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weights, [-1, 1], name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data, label_embedding_size=hparams.label_embedding_size, epoch_embedding_size=hparams.epoch_embedding_size, num_label_embedding=hparams.num_label_embedding, num_fc_nodes=hparams.num_fc_nodes), name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data), name='v')",
                            "Call"
                        ],
                        [
                            "tf.maximum(v, upper_bound, 'v_bound')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_360": {
                "variable": {
                    "value": "v_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(v, [-1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_361": {
                "variable": {
                    "value": "xmix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * mix + x2 * (1 - mix)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(xmix)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_362": {
                "variable": {
                    "value": "lmix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lmix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l * mix[:, :, 0, 0] + l2 * (1 - mix[:, :, 0, 0])",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(lmix)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_checkpoint_412": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_74": {
                "input": {
                    "value": "data_util",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nonzero_v / tf.to_float(batch_size) / (tf.to_float(tf_global_step) + 2)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(data_util, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "label_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_label_embedding, label_embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "epoch_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "epoch_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[100, epoch_embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[losses, loss_diffs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([losses, loss_diffs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(lstm_inputs)",
                            "Call"
                        ],
                        [
                            "[lstm_inputs]",
                            "List"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_154": {
                "variable": {
                    "value": "forward_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_155": {
                "variable": {
                    "value": "backward_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "static_bidirectional_rnn_157": {
                "variable": {
                    "value": "(_, out_state_fw, out_state_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "forward_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(1, forget_bias=0.0)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "backward_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(1, forget_bias=0.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([losses, loss_diffs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(lstm_inputs)",
                            "Call"
                        ],
                        [
                            "[lstm_inputs]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "np.ones(batch_size) * num_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_164": {
                "variable": {
                    "value": "label_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.embedding_lookup(label_embedding, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "epoch_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.embedding_lookup(epoch_embedding, epochs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_167": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_state_fw[0], out_state_bw[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_168": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_inputs, epoch_inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_171": {
                "variable": {
                    "value": "fc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(feat, tf.get_variable('Variable', initializer=tf.random_normal([feat_dim, num_fc_nodes])))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.get_variable('Variable_1', initializer=tf.random_normal([num_fc_nodes]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_179": {
                "variable": {
                    "value": "fc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(feat, tf.get_variable('Variable', initializer=tf.random_normal([feat_dim, num_fc_nodes]))), tf.get_variable('Variable_1', initializer=tf.random_normal([num_fc_nodes])))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(fc_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(feat, tf.get_variable('Variable', initializer=tf.random_normal([feat_dim, num_fc_nodes]))), tf.get_variable('Variable_1', initializer=tf.random_normal([num_fc_nodes])))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(fc_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.get_variable('Variable_2', initializer=tf.random_normal([num_fc_nodes, 1])) + tf.get_variable('Variable_3', initializer=tf.random_normal([1]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_203": {
                "variable": {
                    "value": "one_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "zero_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "percentile_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "percentile_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfp.stats.percentile(loss, int(para_lambda * 100))",
                            "Call"
                        ],
                        [
                            "tf.reshape(percentile_loss, [1])",
                            "Call"
                        ],
                        [
                            "tf.contrib.distributions.percentile(loss, this_percentile * 100)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(percentile_loss)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_211": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "loss >= percentile_loss",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zero_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(loss), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "one_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.shape(loss), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(loss >= percentile_loss, zero_weights, one_weights)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_257": {
                "variable": {
                    "value": "loss_moving_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "avg_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cumulative'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_265": {
                "variable": {
                    "value": "v_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "v_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_267": {
                "variable": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "cur_epoch < burn_in_epoch - 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : v_ones",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : v_zeros",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_270": {
                "variable": {
                    "value": "this_dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.embedding_lookup(example_dropout_rates, cur_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_272": {
                "variable": {
                    "value": "this_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.embedding_lookup(loss_p_percentile, cur_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_277": {
                "variable": {
                    "value": "percentile_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "percentile_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfp.stats.percentile(loss, int(para_lambda * 100))",
                            "Call"
                        ],
                        [
                            "tf.reshape(percentile_loss, [1])",
                            "Call"
                        ],
                        [
                            "tf.contrib.distributions.percentile(loss, this_percentile * 100)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(percentile_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_290": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(loss)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_292": {
                "variable": {
                    "value": "epoch_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "tf.to_float(cur_epoch)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([tf.shape(loss)[0], 1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_298": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mentornet_nn(input_data, label_embedding_size=hparams.label_embedding_size, epoch_embedding_size=hparams.epoch_embedding_size, num_label_embedding=hparams.num_label_embedding, num_fc_nodes=hparams.num_fc_nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_307": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mentornet_nn(input_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_317": {
                "variable": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(probabilistic_sample, [v, this_dropout_rate, 'random'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_dropout, [-1, 1], name='v_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[cur_epoch, loss_moving_avg, percentile_loss], summarize=64, message='epoch, loss_moving_avg, percentile_loss')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[lossdiff], summarize=64, message='loss_diff')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v], summarize=64, message='v')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v_dropout], summarize=64, message='v_dropout')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[cur_epoch, loss_moving_avg, percentile_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "summarize": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "epoch, loss_moving_avg, percentile_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_322": {
                "variable": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(probabilistic_sample, [v, this_dropout_rate, 'random'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_dropout, [-1, 1], name='v_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[cur_epoch, loss_moving_avg, percentile_loss], summarize=64, message='epoch, loss_moving_avg, percentile_loss')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[lossdiff], summarize=64, message='loss_diff')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v], summarize=64, message='v')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v_dropout], summarize=64, message='v_dropout')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[lossdiff]",
                    "type": "List",
                    "possible_values": []
                },
                "summarize": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "loss_diff",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_324": {
                "variable": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(probabilistic_sample, [v, this_dropout_rate, 'random'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_dropout, [-1, 1], name='v_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[cur_epoch, loss_moving_avg, percentile_loss], summarize=64, message='epoch, loss_moving_avg, percentile_loss')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[lossdiff], summarize=64, message='loss_diff')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v], summarize=64, message='v')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v_dropout], summarize=64, message='v_dropout')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                },
                "summarize": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_325": {
                "variable": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "v_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(probabilistic_sample, [v, this_dropout_rate, 'random'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_dropout, [-1, 1], name='v_dropout')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[cur_epoch, loss_moving_avg, percentile_loss], summarize=64, message='epoch, loss_moving_avg, percentile_loss')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[lossdiff], summarize=64, message='loss_diff')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v], summarize=64, message='v')",
                            "Call"
                        ],
                        [
                            "tf.Print(v_dropout, data=[v_dropout], summarize=64, message='v_dropout')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[v_dropout]",
                    "type": "List",
                    "possible_values": []
                },
                "summarize": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "v_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_410": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_65": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "count_nonzero_68": {
                "input": {
                    "value": "rounded_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(v - epsilon, tf.to_float(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(weights, [-1, 1], name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data, label_embedding_size=hparams.label_embedding_size, epoch_embedding_size=hparams.epoch_embedding_size, num_label_embedding=hparams.num_label_embedding, num_fc_nodes=hparams.num_fc_nodes), name='v')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(mentornet_nn(input_data), name='v')",
                            "Call"
                        ],
                        [
                            "tf.maximum(v, upper_bound, 'v_bound')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_135": {
                "tensor": {
                    "value": "input_features[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "tensor": {
                    "value": "input_features[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "mentornet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "mentornet/thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "mentor_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_263": {
                "variable": {
                    "value": "cur_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(epoch, burn_in_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_295": {
                "values": {
                    "value": "[loss, lossdiff, labels, epoch_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "mentornet/prob_sampling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "IsDirectory_409": {
                "dirname": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_71": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_features.get_shape()[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_72": {
                "x": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_137": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_164": {
                "params": {
                    "value": "label_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('label_embedding', [num_label_embedding, label_embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.reshape(input_features[:, 2], [-1, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_165": {
                "params": {
                    "value": "epoch_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('epoch_embedding', [100, epoch_embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.reshape(input_features[:, 3], [-1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.minimum(epochs, tf.ones([batch_size, 1], dtype=tf.int32) * 99)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_172": {
                "a": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([label_inputs, epoch_inputs, h], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.get_variable('Variable', initializer=tf.random_normal([feat_dim, num_fc_nodes]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_177": {
                "name": {
                    "value": "Variable_1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([num_fc_nodes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_203": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_204": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_265": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_266": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_271": {
                "params": {
                    "value": "example_dropout_rates",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "cur_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch",
                            "variable"
                        ],
                        [
                            "tf.to_int32(tf.minimum(epoch, burn_in_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_273": {
                "params": {
                    "value": "loss_p_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "cur_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch",
                            "variable"
                        ],
                        [
                            "tf.to_int32(tf.minimum(epoch, burn_in_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_292": {
                "x": {
                    "value": "cur_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch",
                            "variable"
                        ],
                        [
                            "tf.to_int32(tf.minimum(epoch, burn_in_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_293": {
                "scalar": {
                    "value": "loss_moving_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(avg_name, [], initializer=tf.zeros_initializer(), trainable=False)",
                            "Call"
                        ],
                        [
                            "loss_moving_avg.assign(loss_moving_avg * loss_moving_average_decay + (1 - loss_moving_average_decay) * percentile_loss)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([tf.shape(loss)[0], 1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_345": {
                "logits": {
                    "value": "v_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(v, [-1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_174": {
                "name": {
                    "value": "Variable",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([feat_dim, num_fc_nodes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "name": {
                    "value": "Variable_2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([num_fc_nodes, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "name": {
                    "value": "Variable_3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "minimum_263": {
                "x": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "burn_in_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "18",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_352": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_290": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "FaMUS/build_models.py": {
        "torch": {
            "SGD_10": {
                "variable": {
                    "value": "optimizer_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.params()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_16": {
                "variable": {
                    "value": "optimizer_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vnet.params()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.meta_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "_grad_model.params()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.go_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaMUS/data_utils.py": {
        "torch": {
            "randperm_16": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "labels_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1_var.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "labels_u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "unlabeled_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs1_x, inputs2_x, inputs1_u, inputs2_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[targets_x, targets_x, targets_u, targets_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "guess_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[guess_t_x, guess_t_x, guess_t_u, guess_t_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs1, inputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "guess_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[guess_t_x, guess_t_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(inputs2_var)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "input": {
                    "value": "outputs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(inputs2_var)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "input": {
                    "value": "outputs_u12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(inputs2_var)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "input": {
                    "value": "outputs_u12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model1(inputs2_var)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaMUS/dataloader_red_mini_imagenet.py": {
        "torch": {
            "DataLoader_126": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_train, mode='all')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "meta_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "meta_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_train, mode='meta', pred=pred, probability=prob)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "labeled_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "labeled_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_train, mode='labeled', pred=pred, probability=prob)",
                            "Call"
                        ],
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_train, mode='labeled', pred=pred, probability=prob)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "labeled_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "labeled_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_train, mode='labeled', pred=pred, probability=prob)",
                            "Call"
                        ],
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_train, mode='labeled', pred=pred, probability=prob)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "unlabeled_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabeled_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_train, mode='unlabeled', pred=pred, probability=prob)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_test, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_mini_imagenet_dataset(self.data, self.targets, transform=self.transform_test, mode='all')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FaMUS/grad_operator_layer.py": {
        "torch": {
            "PReLU_15": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_17": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_34": {
                "variable": {
                    "value": "reduced_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads[0:-num_opt]",
                            "Subscript"
                        ],
                        [
                            "grads[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_38": {
                "variable": {
                    "value": "reduced_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads[0:-num_opt]",
                            "Subscript"
                        ],
                        [
                            "grads[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "torch.cat(acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "acts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "FaMUS/gumbel_softmax.py": {
        "torch": {
            "zeros_like_23": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_13": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_9": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "FaMUS/load_corrupted_data.py": {
        "torch": {
            "cat_196": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_transform(current[i]).unsqueeze(0) for i in range(len(current))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "smax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_176": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./cifar{}_labeler'.format(num_classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FaMUS/lr_scheduler.py": {
        "torch": {}
    },
    "FaMUS/preresnet.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_218": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaConv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaConv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaConv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaConv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_171": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_184": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_228": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_60": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_116": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_117": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_233": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaMUS/utils.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/i{}_{}'.format(save_dir, ind, 'model_{}.pth'.format(model_idx))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_54": {
                "obj": {
                    "value": "vnet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/i{}_{}'.format(save_dir, ind, 'vnet_{}.pth'.format(model_idx))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FaMUS/wideresnet.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_190": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm1d_215": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm1d_246": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_277": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_309": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_362": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_393": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_406": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_417": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_443": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_477": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_488": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_512": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_533": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_535": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_558": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_583": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_585": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_591": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2, out3, out4, out5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_615": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_626": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_641": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_646": {
                "variable": {
                    "value": "self.grad_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_666": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_681": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_697": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_699": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_719": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_766": {
                "variable": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_786": {
                "variable": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_806": {
                "variable": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_833": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_853": {
                "variable": {
                    "value": "self.cor_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_864": {
                "variable": {
                    "value": "self.incor_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_882": {
                "variable": {
                    "value": "self.cor_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_900": {
                "variable": {
                    "value": "self.cor_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_919": {
                "variable": {
                    "value": "self.cor_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MetaLinear(input, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_940": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_941": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1012": {
                "variable": {
                    "value": "self.linear1_x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_1014": {
                "variable": {
                    "value": "self.linear1_x2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_1016": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1017": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_1019": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_1044": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1057": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_138": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_153": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_181": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_206": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_235": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_266": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_297": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "torch.where(po.float() == 1.0, po.float() * _x, ((1 - po).float() * _x_wo_grad).detach())",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, feat], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_327": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_329": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_340": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "where_463": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "po.float() == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "po.float() * _x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "((1 - po).float() * _x_wo_grad).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_635": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_675": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_690": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_710": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_729": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_780": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_800": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_824": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1059": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "out.detach()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block1, policy[:, 0:0 + self.num_block])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block2, policy[:, 0 + self.num_block:0 + self.num_block * 2])",
                            "Call"
                        ],
                        [
                            "self.forward_block(out, self.block3, policy[:, 0 + self.num_block * 2:0 + self.num_block * 3])",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "torch.mean(out, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, 0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.dis(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.cor_encode(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "p1 * x1 + p2 * x2",
                            "BinOp"
                        ],
                        [
                            "self.linear3(x3)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_148": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_593": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([out1, out2, out3, out4, out5], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_643": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_648": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_769": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_773": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_794": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_810": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_812": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_814": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_818": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_835": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_838": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_856": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_860": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_867": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_870": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_884": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_887": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_903": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_907": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_922": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_926": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_229": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_260": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_291": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1028": {
                "tensors": {
                    "value": "[x1 + x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}