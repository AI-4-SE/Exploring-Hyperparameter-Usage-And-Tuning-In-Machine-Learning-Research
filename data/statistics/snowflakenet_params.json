{
    "Chamfer3D/dist_chamfer_3D.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "chamfer_3D",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "chamfer_3D",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['/'.join(os.path.abspath(__file__).split('/')[:-1] + ['chamfer_cuda.cpp']), '/'.join(os.path.abspath(__file__).split('/')[:-1] + ['chamfer3D.cu'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz2.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz2.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_43": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.device",
                            "Attribute"
                        ],
                        [
                            "graddist1.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Chamfer3D/setup.py": {
        "torch": {}
    },
    "core/inference_c3d.py": {
        "torch": {
            "DataLoader_20": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dim_feat=512, up_factors=[2, 2])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/inference_pcn.py": {
        "torch": {
            "DataLoader_20": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dim_feat=512, up_factors=[4, 8])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/test_c3d.py": {
        "torch": {
            "DataLoader_21": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.VAL)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_33": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dim_feat=512, up_factors=[2, 2], radius=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/test_pcn.py": {
        "torch": {
            "DataLoader_21": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_33": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dim_feat=512, up_factors=[4, 8])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/train_c3d.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TRAIN)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.VAL)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "cfg.TRAIN.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_66": {
                "variable": {
                    "value": "scheduler_steplr",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=cfg.TRAIN.LEARNING_RATE, weight_decay=cfg.TRAIN.WEIGHT_DECAY, betas=cfg.TRAIN.BETAS)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "cfg.TRAIN.LR_DECAY_STEP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.TRAIN.GAMMA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dim_feat=512, up_factors=[2, 2])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "{'epoch_index': epoch_idx, 'best_metrics': best_metrics, 'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/train_pcn.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TRAIN)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "cfg.TRAIN.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_66": {
                "variable": {
                    "value": "scheduler_steplr",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=cfg.TRAIN.LEARNING_RATE, weight_decay=cfg.TRAIN.WEIGHT_DECAY, betas=cfg.TRAIN.BETAS)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "cfg.TRAIN.LR_DECAY_STEP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.TRAIN.GAMMA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dim_feat=512, up_factors=[4, 8])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "{'epoch_index': epoch_idx, 'best_metrics': best_metrics, 'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_c3d.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_pcn.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "ConvTranspose1d_45": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.mlp_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_81": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "up_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "up_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_83": {
                "variable": {
                    "value": "self.up_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "up_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_101": {
                "variable": {
                    "value": "feat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_1, torch.max(feat_1, 2, keepdim=True)[0].repeat((1, 1, feat_1.size(2))), feat_global.repeat(1, 1, feat_1.size(2))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.uppers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "uppers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv1d_50": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[x1, feat.repeat((1, 1, x1.size(2)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[x2, feat.repeat((1, 1, x2.size(2)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[feat_child, H_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "input": {
                    "value": "self.mlp_delta(torch.relu(K_curr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "[pcd, partial]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_113": {
                "input": {
                    "value": "K_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_delta_feature(torch.cat([feat_child, H_up], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_102": {
                "input": {
                    "value": "feat_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_1(pcd_prev)",
                            "Call"
                        ],
                        [
                            "torch.cat([feat_1, torch.max(feat_1, 2, keepdim=True)[0].repeat((1, 1, feat_1.size(2))), feat_global.repeat(1, 1, feat_1.size(2))], 1)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/skip_transformer.py": {
        "torch": {
            "Conv1d_15": {
                "variable": {
                    "value": "self.conv_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "variable": {
                    "value": "self.conv_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_17": {
                "variable": {
                    "value": "self.conv_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.pos_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, pos_hidden_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.attn_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim * attn_hidden_multiplier, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "variable": {
                    "value": "self.conv_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_mlp(qk_rel + pos_embedding)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_67": {
                "variable": {
                    "value": "agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b c i j, b c i j -> b c i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_mlp(qk_rel + pos_embedding)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[key, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {
            "zeros_150": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_152": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ],
                        [
                            "nsample",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_13": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + 3",
                            "BinOp"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + 3",
                            "BinOp"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_86": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_87": {
                "variable": {
                    "value": "self.conv_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_251": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recip_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / dist",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_283": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_401": {
                "variable": {
                    "value": "self.conv_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_402": {
                "variable": {
                    "value": "self.conv_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_403": {
                "variable": {
                    "value": "self.conv_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_405": {
                "variable": {
                    "value": "self.pos_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, pos_hidden_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_412": {
                "variable": {
                    "value": "self.attn_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim * attn_hidden_multiplier, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_419": {
                "variable": {
                    "value": "self.linear_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + 3",
                            "BinOp"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_420": {
                "variable": {
                    "value": "self.linear_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + 3",
                            "BinOp"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_450": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_mlp(qk_rel + pos_embedding)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_454": {
                "variable": {
                    "value": "agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b c i j, b c i j -> b c i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_mlp(qk_rel + pos_embedding)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_126": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz, points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_points, points1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_282": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_292": {
                "input": {
                    "value": "sqrdists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_209": {
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, grouped_points], 1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([xyz, points], 1)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "new_points.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, grouped_points], 1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(xyz, points, self.npoint, self.nsample, self.radius, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 3)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([interpolated_points, points1], 1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group_knn(xyz, points, self.npoint, self.nsample, self.use_xyz, idx=idx)",
                            "Call"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 3)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_376": {
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, grouped_points], 1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([xyz, points], 1)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "new_points.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, grouped_points], 1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(xyz, points, self.npoint, self.nsample, self.radius, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 3)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([interpolated_points, points1], 1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, self.use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group_knn(xyz, points, self.npoint, self.nsample, self.use_xyz, idx=idx)",
                            "Call"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 3)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_407": {
                "num_features": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_413": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_414": {
                "num_features": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_416": {
                "in_channels": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_69": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_95": {
                "input": {
                    "value": "self.conv_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_71": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2_ops_lib/pointnet2_ops/pointnet2_modules.py": {
        "torch": {
            "Sequential_19": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_67": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "mlp_spec[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "mlp_spec[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_ops_lib/pointnet2_ops/pointnet2_utils.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "_ext",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "_ext_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(osp.join(_ext_src_root, 'src', '*.cpp')) + glob.glob(osp.join(_ext_src_root, 'src', '*.cu'))",
                            "BinOp"
                        ]
                    ]
                },
                "extra_include_paths": {
                    "value": "[osp.join(_ext_src_root, 'include')]",
                    "type": "List",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-O3']",
                    "type": "List",
                    "possible_values": []
                },
                "extra_cuda_cflags": {
                    "value": "['-O3', '-Xfatbin', '-compress-all']",
                    "type": "List",
                    "possible_values": []
                },
                "with_cuda": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ext.three_nn(unknown, known)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_188": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_237": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ext.three_nn(unknown, known)",
                            "Call"
                        ],
                        [
                            "ball_query(self.radius, self.nsample, xyz, new_xyz)",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_322": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_ops_lib/setup.py": {
        "torch": {}
    },
    "utils/data_loaders.py": {
        "torch": {}
    },
    "utils/data_transforms.py": {
        "torch": {
            "from_numpy_55": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss_utils.py": {
        "torch": {
            "mean_14": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_15": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_21": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "torch.mean(d1)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_9": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_14": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "torch.mean(d1)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_15": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_27": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(p1, p2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "torch.mean(d1)",
                            "Call"
                        ],
                        [
                            "chamfer_dist(pcd1, pcd2)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/metrics.py": {
        "torch": {
            "mean_77": {
                "input": {
                    "value": "emd_distance(pred, gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_70": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chamfer_distance(pred, gt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/schedular.py": {
        "torch": {}
    }
}