{
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11.py": {
        "tensorflow": {
            "ConfigProto_20": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_22": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_23": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_24": {
                "device_name": {
                    "value": "/job:localhost/replica:0/task:0/device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/AttackWrappersBlackBox.py": {
        "tensorflow": {
            "placeholder_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, nchannels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, nb_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/AttackWrappersWhiteBox.py": {
        "tensorflow": {
            "placeholder_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yClean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yClean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_143": {
                "variable": {
                    "value": "xAdv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xAdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "pgd.generate(x, **pgdParams)",
                            "Call"
                        ],
                        [
                            "pgd.generate(x, **pgdParams)",
                            "Call"
                        ],
                        [
                            "mim.generate(x, **mimParams)",
                            "Call"
                        ],
                        [
                            "mim.generate(x, **mimParams)",
                            "Call"
                        ],
                        [
                            "ead.generate(x, **elasticNetParams)",
                            "Call"
                        ],
                        [
                            "ead.generate(x, **elasticNetParams)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yAdv.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_159": {
                "variable": {
                    "value": "xAdv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xAdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "pgd.generate(x, **pgdParams)",
                            "Call"
                        ],
                        [
                            "pgd.generate(x, **pgdParams)",
                            "Call"
                        ],
                        [
                            "mim.generate(x, **mimParams)",
                            "Call"
                        ],
                        [
                            "mim.generate(x, **mimParams)",
                            "Call"
                        ],
                        [
                            "ead.generate(x, **elasticNetParams)",
                            "Call"
                        ],
                        [
                            "ead.generate(x, **elasticNetParams)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yAdv.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yClean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yClean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yAdv.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_239": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yAdv.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, imgRows, imgCols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensorflow.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, yClean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_31": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "stop_gradient_119": {
                "variable": {
                    "value": "xAdv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xAdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yAdv)",
                            "Call"
                        ],
                        [
                            "attack.attack(xClean, yClean)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "fgsm.generate(x, **fgsm_params)",
                            "Call"
                        ],
                        [
                            "tensorflow.stop_gradient(xAdv)",
                            "Call"
                        ],
                        [
                            "pgd.generate(x, **pgdParams)",
                            "Call"
                        ],
                        [
                            "pgd.generate(x, **pgdParams)",
                            "Call"
                        ],
                        [
                            "mim.generate(x, **mimParams)",
                            "Call"
                        ],
                        [
                            "mim.generate(x, **mimParams)",
                            "Call"
                        ],
                        [
                            "ead.generate(x, **elasticNetParams)",
                            "Call"
                        ],
                        [
                            "ead.generate(x, **elasticNetParams)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/Canton.py": {
        "tensorflow": {
            "get_collection_1161": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "collection_name",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_1178": {
                "variable": {
                    "value": "correct_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(gt, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1179": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_vector, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_1183": {
                "variable": {
                    "value": "correct_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1, output_type=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_1184": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_vector, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, mean=mean, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Name"
                        ],
                        [
                            "tf.constant(mean, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'W'",
                            "MethodArgument"
                        ],
                        [
                            "'b'",
                            "MethodArgument"
                        ],
                        [
                            "'v'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_41": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mean)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, mean=mean, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Name"
                        ],
                        [
                            "tf.constant(mean, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'W'",
                            "MethodArgument"
                        ],
                        [
                            "'b'",
                            "MethodArgument"
                        ],
                        [
                            "'v'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "nparray",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'W'",
                            "MethodArgument"
                        ],
                        [
                            "'b'",
                            "MethodArgument"
                        ],
                        [
                            "'v'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_263": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b * t, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, t, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_274": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_275": {
                "variable": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_278": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[0:rank - 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[prod, last]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([fore, [d]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_295": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,if->bif",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('bi,if->bif', i, self.W)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [-1, self.nop])",
                            "Call"
                        ],
                        [
                            "scattered + residual * 0.707",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.nop]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_415": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.std, self.std, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "[self.rate, self.rate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_454": {
                "variable": {
                    "value": "orig_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_455": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_groups, self.nipg]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_456": {
                "variable": {
                    "value": "transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(i, [-1, self.num_groups, self.nipg])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_457": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(i, [-1, self.num_groups, self.nipg])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_507": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_516": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "scan_540": {
                "variable": {
                    "value": "scanned",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "starting_state",
                            "Name"
                        ],
                        [
                            "tf.zeros_like(i[0])",
                            "Call"
                        ],
                        [
                            "tf.zeros(inferred_state_shape, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rank_546": {
                "variable": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_547": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1, 0], tf.range(2, rank)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_548": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[1, 0], tf.range(2, rank)], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[1, 0], tf.range(2, rank)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_553": {
                "variable": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scanned",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(self.f, i, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "super().__call__(it, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scanned, perm=perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_554": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1, 0], tf.range(2, rank)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_555": {
                "variable": {
                    "value": "scanned",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scanned",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(self.f, i, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "super().__call__(it, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scanned, perm=perm)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[1, 0], tf.range(2, rank)], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[1, 0], tf.range(2, rank)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_576": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i[:, :, :, idx * self.nipg:(idx + 1) * self.nipg]",
                            "Subscript"
                        ],
                        [
                            "i[1]",
                            "Subscript"
                        ],
                        [
                            "i[1]",
                            "Subscript"
                        ],
                        [
                            "i[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_577": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "dims - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_578": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wz(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_579": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wr(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_580": {
                "variable": {
                    "value": "h_c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w(tf.concat([hidden * r, inp], axis=dims - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_617": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wz(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_635": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_803": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mean)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "BN_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "moments_818": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[axis]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_820": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(var, 1e-07)",
                            "Call"
                        ],
                        [
                            "var + 1e-08",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_821": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(var, 1e-07)",
                            "Call"
                        ],
                        [
                            "var + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "moments_829": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_831": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(var, 1e-07)",
                            "Call"
                        ],
                        [
                            "var + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_842": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_869": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((nr, 2), dtype='float32')",
                            "Call"
                        ],
                        [
                            "(positions - 0.5) * ps * 0.8",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "means",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_875": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "stddevs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.ones((nr, 1)) * ps * 0.5 * (1 / (w - 1))).astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "stddevs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_882": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.means",
                            "Attribute"
                        ],
                        [
                            "tf.expand_dims(means, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_883": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(offsets, axis=1)",
                            "Call"
                        ],
                        [
                            "i[1]",
                            "Subscript"
                        ],
                        [
                            "self.get_offset(hidden)",
                            "Call"
                        ],
                        [
                            "tf.tanh(h2o(hidden))",
                            "Call"
                        ],
                        [
                            "offsets * self.pixel_span / 2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_901": {
                "variable": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(self.stddevs) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.variances()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(variances, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_904": {
                "variable": {
                    "value": "ish",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i[0]",
                            "Subscript"
                        ],
                        [
                            "i[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_914": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(start=(-uspan + 1) / 2, limit=(uspan + 1) / 2, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_915": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(start=(-uspan + 1) / 2, limit=(uspan + 1) / 2, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(u, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_917": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(nparray, name=name)",
                            "Call"
                        ],
                        [
                            "tf.range(start=(-vspan + 1) / 2, limit=(vspan + 1) / 2, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_918": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(nparray, name=name)",
                            "Call"
                        ],
                        [
                            "tf.range(start=(-vspan + 1) / 2, limit=(vspan + 1) / 2, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_962": {
                "variable": {
                    "value": "density_v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(receptor_w - v) ** 2 * oov",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_991": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhwc,bnh,bnw->bnc",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i[0]",
                            "Subscript"
                        ],
                        [
                            "i[1]",
                            "Subscript"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "density_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-(receptor_h - u) ** 2 * oov + np.log(1 / np.pi)) * oov",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1029": {
                "variable": {
                    "value": "rsh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "responses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "Name"
                        ],
                        [
                            "g2d([images, offsets])",
                            "Call"
                        ],
                        [
                            "tf.reshape(responses, shape=(rsh[0], rsh[1] * rsh[2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1030": {
                "variable": {
                    "value": "responses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "responses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "Name"
                        ],
                        [
                            "g2d([images, offsets])",
                            "Call"
                        ],
                        [
                            "tf.reshape(responses, shape=(rsh[0], rsh[1] * rsh[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(rsh[0], rsh[1] * rsh[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_1041": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h2o(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1069": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1084": {
                "variable": {
                    "value": "scattered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "piece",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i[:, :, :, self.offset:self.offset + self.bnw]",
                            "Subscript"
                        ],
                        [
                            "self.conv(piece)",
                            "Call"
                        ],
                        [
                            "Act('lrelu')(piece)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.bo_permtable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_1116": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_1152": {
                "variable": {
                    "value": "assign_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=value)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_1156": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_1165": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_1175": {
                "x": {
                    "value": "i + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1188": {
                "input_tensor": {
                    "value": "softmax_cross_entropy(pred, gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_1192": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_1201": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_1204": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=pred, labels=gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_31": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mean)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Constant"
                        ],
                        [
                            "np.sqrt(stddev / num_inputs)",
                            "Call"
                        ],
                        [
                            "2.0",
                            "Constant"
                        ],
                        [
                            "2.0",
                            "Constant"
                        ],
                        [
                            "stddev * nip",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(var)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(var)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_312": {
                "tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs] + self.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_319": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-i",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_395": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.std, self.std, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atrous_conv2d_399": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_443": {
                "values": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "residual + i",
                            "BinOp"
                        ],
                        [
                            "tf.concat([residual, i], axis=-1)",
                            "Call"
                        ],
                        [
                            "ident + i",
                            "BinOp"
                        ],
                        [
                            "ident + i",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_497": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[residual, i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_509": {
                "images": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "newsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s[1] * scale, s[2] * scale]",
                            "List"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_transpose_517": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[s[0], s[1] * self.std, s[2] * self.std, self.nip]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.std, self.std, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_674": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_675": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_703": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, std, std, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_709": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, std, std, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_790": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(x_shape) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_793": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.moving_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.moving_mean * (1.0 - BN_DECAY) + mean * BN_DECAY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_795": {
                "variable": {
                    "value": "moving_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.moving_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.moving_variance * (1.0 - BN_DECAY) + variance * BN_DECAY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1077": {
                "variable": {
                    "value": "residual_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "AvgPool2D(k=3, std=2)(residual)",
                            "Call"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "AvgPool2D(k=self.conv.k, std=self.conv.std)(residual)",
                            "Call"
                        ],
                        [
                            "tf.concat([residual, residual_pad], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.io_permtable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1078": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[residual, residual_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_1115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1125": {
                "variable": {
                    "value": "_SESSION",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=nb_thread, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_1178": {
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1179": {
                "x": {
                    "value": "correct_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(gt, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(pred, 1, output_type=tf.int32), lbl)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_1183": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1184": {
                "x": {
                    "value": "correct_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(gt, 1))",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.argmax(pred, 1, output_type=tf.int32), lbl)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_1195": {
                "input_tensor": {
                    "value": "tf.reduce_sum(loge(pred) * gt, axis=tf.rank(pred) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1198": {
                "input_tensor": {
                    "value": "loge(pred) * gt + l * loge(1.0 - pred) * (1.0 - gt)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_1205": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None for _ in range(len(i.shape))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "shape_267": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_281": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_282": {
                "values": {
                    "value": "[fore, [d]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_311": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_323": {
                "features": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.6732632423543772",
                            "Constant"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cond_363": {
                "pred": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(i, keep_prob=self.prob)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_like_534": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "inferred_state_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_681": {
                "variable": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[s[0]], s[2:r - 1], [self.unit.num_h]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_739": {
                "features": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_769": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nip]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_771": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nip]",
                            "List"
                        ]
                    ]
                }
            },
            "rank_816": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_890": {
                "features": {
                    "value": "self.stddevs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_960": {
                "x": {
                    "value": "-(receptor_h - u) ** 2 * oov + np.log(1 / np.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_1120": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_1123": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "nb_thread",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.environ.get('OMP_NUM_THREADS'))",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_1195": {
                "input_tensor": {
                    "value": "loge(pred) * gt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(pred) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_329": {
                "condition": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * tf.nn.elu(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_332": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_357": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_547": {},
            "range_554": {},
            "concat_580": {
                "values": {
                    "value": "[hidden * r, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "dims - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_618": {
                "values": {
                    "value": "[hidden, inp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variables_initializer_1157": {
                "var_list": {
                    "value": "[variable]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_155": {
                "ref": {
                    "value": "model_w[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "loaded_w[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None for _ in range(len(j.shape))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_364": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(shapes))",
                            "Call"
                        ],
                        [
                            "c(i)",
                            "Call"
                        ],
                        [
                            "range(len(w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b * t, d])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [b, t, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, [prod, last])",
                            "Call"
                        ],
                        [
                            "super().__call__(i)",
                            "Call"
                        ],
                        [
                            "tf.reshape(i, tf.concat([fore, [d]], axis=0))",
                            "Call"
                        ],
                        [
                            "self.gc1(i)",
                            "Call"
                        ],
                        [
                            "Act('relu')(i)",
                            "Call"
                        ],
                        [
                            "self.cs(i)",
                            "Call"
                        ],
                        [
                            "self.dc(i)",
                            "Call"
                        ],
                        [
                            "self.gc2(i)",
                            "Call"
                        ],
                        [
                            "i - self.b",
                            "BinOp"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[0](i))",
                            "Call"
                        ],
                        [
                            "self.convs[0](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[1](i))",
                            "Call"
                        ],
                        [
                            "self.convs[1](i)",
                            "Call"
                        ],
                        [
                            "relu(self.bns[2](i))",
                            "Call"
                        ],
                        [
                            "self.convs[2](i)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_329": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items",
                            "Name"
                        ],
                        [
                            "[tf.placeholder(tf.float32, shape=[None for _ in range(len(j.shape))]) for j in i]",
                            "ListComp"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None for _ in range(len(i.shape))])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, self.beta, self.gamma, BN_EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_1195": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DataManager.py": {
        "tensorflow": {
            "load_data_10": {
                "variable": {
                    "value": "((xTrain, yTrain), (xTest, yTest))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_19": {
                "variable": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 100)",
                            "Call"
                        ],
                        [
                            "numpy.load(dir + '//yTrain' + robustName + '.pkl')",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_20": {
                "variable": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 100)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_32": {
                "variable": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 100)",
                            "Call"
                        ],
                        [
                            "numpy.load(dir + '//yTrain' + robustName + '.pkl')",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_33": {
                "variable": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 100)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_data_38": {
                "variable": {
                    "value": "((xTrain, yTrain), (xTest, yTest))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_47": {
                "variable": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 100)",
                            "Call"
                        ],
                        [
                            "numpy.load(dir + '//yTrain' + robustName + '.pkl')",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_48": {
                "variable": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 100)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_59": {
                "variable": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 100)",
                            "Call"
                        ],
                        [
                            "numpy.load(dir + '//yTrain' + robustName + '.pkl')",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_60": {
                "variable": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 100)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_model_95": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "modelFileDir",
                    "type": "variable",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'tensorflow': tensorflow}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "to_categorical_108": {
                "variable": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 100)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTest, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_117": {
                "variable": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 100)",
                            "Call"
                        ],
                        [
                            "numpy.load(dir + '//yTrain' + robustName + '.pkl')",
                            "Call"
                        ],
                        [
                            "keras.utils.to_categorical(yTrain, 10)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsADP.py": {
        "tensorflow": {
            "ConfigProto_60": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_62": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_124": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_126": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_63": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_127": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsBarrage.py": {
        "tensorflow": {
            "ConfigProto_29": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_31": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_129": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_131": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_159": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_161": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_179": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_181": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_32": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_132": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_162": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_182": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsBuzz.py": {
        "tensorflow": {
            "ConfigProto_14": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_16": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_31": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_17": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_34": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsBuzzFashion.py": {
        "tensorflow": {
            "ConfigProto_15": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_17": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_32": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_18": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_35": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsComDefend.py": {
        "tensorflow": {}
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsECOC.py": {
        "tensorflow": {
            "ConfigProto_13": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_15": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_87": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_89": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_16": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_90": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsFeatureDistillation.py": {
        "tensorflow": {
            "ConfigProto_13": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_15": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_16": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsOdds.py": {
        "tensorflow": {}
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefaultMethodsVanilla.py": {
        "tensorflow": {
            "ConfigProto_14": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_16": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_78": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tensorflow.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_17": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_81": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ],
                        [
                            "tensorflow.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefenseADPNetwork.py": {
        "tensorflow": {
            "Input_38": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(img_rows, img_cols, colorChannelNum)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concatenate_47": {
                "variable": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "model_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Model_48": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=(img_rows, img_cols, colorChannelNum))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.concatenate(model_out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.concatenate(model_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_50": {
                "variable": {
                    "value": "model_ensemble",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=(img_rows, img_cols, colorChannelNum))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_ensemble",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Average()(model_out)",
                            "Call"
                        ],
                        [
                            "tf.keras.models.Model(inputs=input_img, outputs=model_ensemble)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Average()(model_out)",
                            "Call"
                        ],
                        [
                            "tf.keras.models.Model(inputs=model_input, outputs=model_ensemble)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_55": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(28, 28, 1)",
                            "Tuple"
                        ],
                        [
                            "(32, 32, 3)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "concatenate_63": {
                "variable": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "model_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Model_64": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.concatenate(model_out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.concatenate(model_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_66": {
                "variable": {
                    "value": "model_ensemble",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_ensemble",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Average()(model_out)",
                            "Call"
                        ],
                        [
                            "tf.keras.models.Model(inputs=input_img, outputs=model_ensemble)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Average()(model_out)",
                            "Call"
                        ],
                        [
                            "tf.keras.models.Model(inputs=model_input, outputs=model_ensemble)",
                            "Call"
                        ]
                    ]
                }
            },
            "Average_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Average_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefenseComDefend.py": {
        "tensorflow": {
            "clip_by_value_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ph([None, None, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, clip_value_max=1.0, clip_value_min=0.0)",
                            "Call"
                        ],
                        [
                            "ph([None, None, 3])",
                            "Call"
                        ],
                        [
                            "x * 255",
                            "BinOp"
                        ],
                        [
                            "x.astype('uint8')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "code_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "quantization_threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_105": {
                "variable": {
                    "value": "binary_code_test",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "binary_code > quantization_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_100": {
                "input": {
                    "value": "linear_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "com(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefenseECOC.py": {
        "tensorflow": {
            "tanh_75": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xData[rep:rep + 1000]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "convert_to_tensor_110": {
                "value": {
                    "value": "xData",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefenseFeatureDistillation.py": {
        "tensorflow": {}
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/DefenseOddsAreOdd.py": {
        "tensorflow": {
            "Model_79": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model_vgg.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "dense_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Dense(10, name='logits', activation='linear')(intermediate_layer)",
                            "Call"
                        ],
                        [
                            "keras.layers.Dense(10, name='logits', activation='linear')(intermediate_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_105": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model_resnet.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "dense_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Dense(10, name='logits', activation='linear')(intermediate_layer)",
                            "Call"
                        ],
                        [
                            "keras.layers.Dense(10, name='logits', activation='linear')(intermediate_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_73": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_99": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/ECOCModel.py": {
        "tensorflow": {
            "set_random_seed_15": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_191": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.params_dict['inp_shape']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_355": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.params_dict['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_387": {
                "variable": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (-1, x_input_shape[0], x_input_shape[1], x_input_shape[2]))",
                            "Call"
                        ],
                        [
                            "self.input",
                            "Attribute"
                        ],
                        [
                            "GaussianNoise(self.params_dict['noise_stddev'], input_shape=self.params_dict['inp_shape'])(x)",
                            "Call"
                        ],
                        [
                            "Clipper()(x)",
                            "Call"
                        ],
                        [
                            "DataAugmenter(self.params_dict['batch_size'])(x)",
                            "Call"
                        ],
                        [
                            "Lambda(self.resize)(x)",
                            "Call"
                        ],
                        [
                            "ClassBlender(self.params_dict['blend_factor'], self.params_dict['batch_size'])(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][0], (5, 5), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][0], (3, 3), strides=(2, 2), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][1], (3, 3), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][1], (3, 3), strides=(2, 2), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][2], (3, 3), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][2], (3, 3), strides=(2, 2), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Concatenate()(outputs)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "Lambda(self.outputDecoder)(x)",
                            "Call"
                        ],
                        [
                            "Activation('softmax')(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.params_dict['M']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_388": {
                "variable": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(mat1, 0) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_51": {
                "variable": {
                    "value": "inputs_shifted_rotated_flipped",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "random_number < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.flip_left_right(inputs_shifted_rotated)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "inputs_shifted_rotated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.rotate(inputs_shifted, angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_153": {
                "variable": {
                    "value": "inputs_adjusted",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs_adjusted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_permuted_translated_rotated",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value(inputs_adjusted, -0.5, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (-1, x_input_shape[0], x_input_shape[1], x_input_shape[2]))",
                            "Call"
                        ],
                        [
                            "self.input",
                            "Attribute"
                        ],
                        [
                            "GaussianNoise(self.params_dict['noise_stddev'], input_shape=self.params_dict['inp_shape'])(x)",
                            "Call"
                        ],
                        [
                            "Clipper()(x)",
                            "Call"
                        ],
                        [
                            "DataAugmenter(self.params_dict['batch_size'])(x)",
                            "Call"
                        ],
                        [
                            "Lambda(self.resize)(x)",
                            "Call"
                        ],
                        [
                            "ClassBlender(self.params_dict['blend_factor'], self.params_dict['batch_size'])(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][0], (5, 5), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][0], (3, 3), strides=(2, 2), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][1], (3, 3), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][1], (3, 3), strides=(2, 2), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][2], (3, 3), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(self.params_dict['num_filters_ens'][2], (3, 3), strides=(2, 2), activation='elu', padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Concatenate()(outputs)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "Lambda(self.outputDecoder)(x)",
                            "Call"
                        ],
                        [
                            "Activation('softmax')(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, x_input_shape[0], x_input_shape[1], x_input_shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_331": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(1.0 - y_true * y_pred, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_340": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred * y_true > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_84": {
                "images": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_114": {
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_341": {
                "input_tensor": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(y_pred * y_true > 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_408": {
                "function": {
                    "value": "self.outputDecoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_409": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flip_left_right_51": {
                "image": {
                    "value": "inputs_shifted_rotated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.rotate(inputs_shifted, angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_260": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_270": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_280": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens'][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_331": {
                "x": {
                    "value": "1.0 - y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_388": {
                "x": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.params_dict['M'], transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.maximum(mat1, 0) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_402": {
                "function": {
                    "value": "self.params_dict['output_activation']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Concatenate_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianNoise_230": {
                "stddev": {
                    "value": "self.params_dict['noise_stddev']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "self.params_dict['inp_shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GaussianNoise_231": {
                "stddev": {
                    "value": "self.params_dict['noise_stddev']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "self.params_dict['inp_shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2D_255": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_266": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_275": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens'][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_286": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens_2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_287": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens_2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_288": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens_2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_293": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens_2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_295": {
                "filters": {
                    "value": "self.params_dict['num_filters_ens_2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_299": {
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_300": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_301": {
                "units": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_302": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_306": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_' + str(k) + '_' + str(k2) + '_' + self.params_dict['name']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l2(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Lambda_238": {
                "function": {
                    "value": "self.resize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Lambda_244": {
                "function": {
                    "value": "self.resize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNormalization_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/NetworkConstructors.py": {
        "tensorflow": {
            "AdamOptimizer_43": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adadelta_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/ResNetConstructor.py": {
        "tensorflow": {
            "add_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/VggNetworkConstructor.py": {
        "tensorflow": {
            "Lambda_78": {
                "function": {
                    "value": "lambda image: tensorflow.image.resize_images(image, (resizeValueX, resizeValueY), method=tensorflow.image.ResizeMethod.BICUBIC, align_corners=True, preserve_aspect_ratio=True)",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/l0_attack.py": {
        "tensorflow": {
            "Variable_78": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "canchange",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "tlab",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((1, model.num_labels), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "assign_modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "assign_canchange",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "assign_simg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "assign_original",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "assign_timg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "assign_tlab",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.model.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assign_97": {
                "variable": {
                    "value": "set_modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tlab * output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_110": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - tlab) * output - tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_119": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(newimg - tf.tanh(timg) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_129": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_131": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier, canchange, simg, original, timg, tlab] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_113": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_116": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_99": {
                "ref": {
                    "value": "canchange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_canchange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_100": {
                "ref": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_101": {
                "ref": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_102": {
                "ref": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_simg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_103": {
                "ref": {
                    "value": "tlab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros((1, model.num_labels), dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_tlab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, (1, self.model.num_labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_119": {
                "x": {
                    "value": "newimg - tf.tanh(timg) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_122": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "const * loss1 + loss2",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "[modifier]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "x": {
                    "value": "modifier + simg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_119": {
                "x": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/l2_attack.py": {
        "tensorflow": {
            "Variable_76": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, image_size, image_size, num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimg - (tf.tanh(self.timg) * self.boxmul + self.boxplus))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.tlab * self.output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_101": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.tlab) * self.output - self.tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_119": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_128": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_105": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_108": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_97": {
                "x": {
                    "value": "self.newimg - (tf.tanh(self.timg) * self.boxmul + self.boxplus)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_91": {
                "x": {
                    "value": "modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_97": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AdversarialSampleGeneratorV11/AdversarialSampleGeneratorV11/li_attack.py": {
        "tensorflow": {
            "Variable_78": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "tlab",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, model.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tlab * output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_92": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - tlab) * output - tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(0.0, tf.abs(newimg - tf.tanh(timg) / 2) - tau)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_110": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_112": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_96": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_86": {
                "x": {
                    "value": "modifier + simg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_102": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(newimg - tf.tanh(timg) / 2) - tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_89": {
                "x": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_102": {
                "x": {
                    "value": "newimg - tf.tanh(timg) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_102": {
                "x": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}