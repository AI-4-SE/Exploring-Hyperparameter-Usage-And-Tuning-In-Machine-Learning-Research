{
    "UGATIT.py": {
        "tensorflow": {
            "prefetch_to_device_355": {
                "device": {
                    "value": "gpu_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ]
                    ]
                },
                "buffer_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "prefetch_to_device_356": {
                "device": {
                    "value": "gpu_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ]
                    ]
                },
                "buffer_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "map_and_batch_355": {
                "map_func": {
                    "value": "Image_Data_Class.image_processing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "map_and_batch_356": {
                "map_func": {
                    "value": "Image_Data_Class.image_processing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_355": {
                "buffer_size": {
                    "value": "self.dataset_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_356": {
                "buffer_size": {
                    "value": "self.dataset_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "random_normal_initializer_9": {
                "variable": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_157": {
                "variable": {
                    "value": "gmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, 1], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_245": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_260": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_261": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_263": {
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, 1], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_277": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_283": {
                "variable": {
                    "value": "identity_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(source), logits=source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_284": {
                "variable": {
                    "value": "non_identity_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(non_source), logits=non_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_296": {
                "variable": {
                    "value": "collection_regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_109": {
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_149": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h * scale_factor, w * scale_factor]",
                            "List"
                        ]
                    ]
                }
            },
            "leaky_relu_166": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_170": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_174": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_177": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_188": {
                "variable": {
                    "value": "(ins_mean, ins_sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_191": {
                "variable": {
                    "value": "(ln_mean, ln_sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_224": {
                "variable": {
                    "value": "(ins_mean, ins_sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_227": {
                "variable": {
                    "value": "(ln_mean, ln_sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_230": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rho",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "constraint": {
                    "value": "lambda x: tf.clip_by_value(x, clip_value_min=0.0, clip_value_max=1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_232": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_233": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_255": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_257": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, 1], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_258": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_303": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(x - y))",
                            "Call"
                        ],
                        [
                            "identity_loss + non_identity_loss",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ],
                        [
                            "'adaptive_resblock'",
                            "Method Argument"
                        ],
                        [
                            "'instance_layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_instance_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel, kernel, x.get_shape()[-1], channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ],
                        [
                            "shape[-1]",
                            "Subscript"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ],
                        [
                            "'adaptive_resblock'",
                            "Method Argument"
                        ],
                        [
                            "'instance_layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_instance_norm'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_80": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(tf.nn.bias_add(w, bias))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_82": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ],
                        [
                            "'adaptive_resblock'",
                            "Method Argument"
                        ],
                        [
                            "'instance_layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_instance_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels, units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ],
                        [
                            "'adaptive_resblock'",
                            "Method Argument"
                        ],
                        [
                            "'instance_layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_instance_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ],
                        [
                            "'adaptive_resblock'",
                            "Method Argument"
                        ],
                        [
                            "'instance_layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_instance_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ],
                        [
                            "'adaptive_resblock'",
                            "Method Argument"
                        ],
                        [
                            "'instance_layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_instance_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_195": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rho",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.9)",
                    "type": "Call",
                    "possible_values": []
                },
                "constraint": {
                    "value": "lambda x: tf.clip_by_value(x, clip_value_min=0.0, clip_value_max=0.9)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rho",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "constraint": {
                    "value": "lambda x: tf.clip_by_value(x, clip_value_min=0.0, clip_value_max=1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ],
                        [
                            "'adaptive_resblock'",
                            "Method Argument"
                        ],
                        [
                            "'instance_layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_instance_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_263": {
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_265": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_277": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_283": {
                "labels": {
                    "value": "tf.ones_like(source)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_284": {
                "labels": {
                    "value": "tf.zeros_like(non_source)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "non_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "non_source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_314": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_317": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(real[i], 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_318": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(fake[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_321": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(real[i]), logits=real[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_322": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(fake[i]), logits=fake[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_325": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu(1.0 - real[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_326": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu(1.0 + fake[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_341": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(fake[i], 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_344": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(fake[i]), logits=fake[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "tf.get_variable('bias', [1], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', shape=[1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [units], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_189": {
                "x": {
                    "value": "ins_sigma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_192": {
                "x": {
                    "value": "ln_sigma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_225": {
                "x": {
                    "value": "ins_sigma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_228": {
                "x": {
                    "value": "ln_sigma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_254": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, 1], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_80": {
                "a": {
                    "value": "tf.nn.bias_add(w, bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, 1], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_230": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_232": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_233": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_283": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_284": {
                "input": {
                    "value": "non_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "non_source",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_313": {
                "input_tensor": {
                    "value": "real[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_317": {
                "x": {
                    "value": "real[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_318": {
                "x": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_321": {
                "labels": {
                    "value": "tf.ones_like(real[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "real[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_322": {
                "labels": {
                    "value": "tf.zeros_like(fake[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_338": {
                "input_tensor": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squared_difference_341": {
                "x": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_344": {
                "labels": {
                    "value": "tf.ones_like(fake[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ],
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_347": {
                "input_tensor": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_80": {
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, 1], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[channels, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "tf.get_variable('bias', [1], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', shape=[1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [units], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_195": {
                "value": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_197": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_230": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_42": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_97": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_195": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_197": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=1, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "conv(x_init, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, pad=1, pad_type='reflect', use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "adaptive_instance_layer_norm(x, gamma, beta, smoothing)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_321": {
                "input": {
                    "value": "real[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_322": {
                "input": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_344": {
                "input": {
                    "value": "fake[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "shape_41": {
                "variable": {
                    "value": "ori_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, ori_image_shape, seed=seed)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_42": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, ori_image_shape, seed=seed)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_44": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(image, seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, ori_image_shape, seed=seed)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "ori_image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 31 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_71": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "read_file_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_jpeg_16": {
                "variable": {
                    "value": "x_decode",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_18": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(image_path, flags=cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, dsize=(size, size))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=0)",
                            "Call"
                        ],
                        [
                            "img / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros((h * size[0], w * size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(x_decode, [self.load_size, self.load_size])",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "augmentation(img, augment_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}