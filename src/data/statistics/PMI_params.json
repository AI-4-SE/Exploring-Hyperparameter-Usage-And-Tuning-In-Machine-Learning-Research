{
    "modeling.py": {
        "torch": {
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.mixin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_51": {
                "variable": {
                    "value": "rand_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_92": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_97": {
                "variable": {
                    "value": "bias_lp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixin_coef * bias_tensor / length_adaptive_temp_ids",
                            "BinOp"
                        ],
                        [
                            "mixin_coef * bias_tensor",
                            "BinOp"
                        ],
                        [
                            "bias_tensor / length_adaptive_temp_ids",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "variable": {
                    "value": "length_adaptive_temp_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1 + self.lambda_val * i if i > 1 else i for (_, i) in enumerate(temp_ids[j].tolist())] for j in range(len(temp_ids))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softplus_62": {
                "variable": {
                    "value": "mixin_coef",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixin_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mixin(sequence_output)",
                            "Call"
                        ],
                        [
                            "torch.max(mixin_coef, 1).values",
                            "Attribute"
                        ],
                        [
                            "F.softplus(mixin_coef)",
                            "Call"
                        ],
                        [
                            "mixin_coef.unsqueeze(2).expand(bias_tensor.size(0), bias_tensor.size(1), bias_tensor.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "torch.sum(torch.exp(bias_lp) * bias_lp, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_61": {
                "input": {
                    "value": "mixin_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mixin(sequence_output)",
                            "Call"
                        ],
                        [
                            "torch.max(mixin_coef, 1).values",
                            "Attribute"
                        ],
                        [
                            "F.softplus(mixin_coef)",
                            "Call"
                        ],
                        [
                            "mixin_coef.unsqueeze(2).expand(bias_tensor.size(0), bias_tensor.size(1), bias_tensor.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_98": {
                "input": {
                    "value": "torch.exp(bias_lp) * bias_lp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_98": {
                "input": {
                    "value": "bias_lp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(bias_tensor, dim=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_eval.py": {
        "torch": {
            "CrossEntropyLoss_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_ner.py": {
        "torch": {
            "CrossEntropyLoss_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_ner.py": {
        "torch": {
            "CrossEntropyLoss_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}