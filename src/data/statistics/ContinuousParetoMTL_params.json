{
    "multi_mnist/cpmtl.py": {
        "torch": {
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiMNIST(dataset_path, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(images)",
                            "Call"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiMNIST(dataset_path, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(images)",
                            "Call"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "load_138": {
                "variable": {
                    "value": "start_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "start_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(start_root.glob('[0-9]*.pth'), key=lambda x: int(x.name.split('.')[0]))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_165": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "Tensor_209": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_102": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': network.state_dict(), 'optimizer': optimizer.state_dict(), 'beta': beta}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path / f'{step:d}.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "multi_mnist/weighted_sum.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiMNIST(dataset_path, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(images)",
                            "Call"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiMNIST(dataset_path, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(images)",
                            "Call"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_129": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(network.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "num_epochs * len(trainloader)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_141": {
                "variable": {
                    "value": "random_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path / 'random.pth'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "device_93": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_100": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': network.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'preference': pref}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path / f'{ckpt_name}.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_86": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "random_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': network.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(ckpt_path / 'random.pth', map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path / 'random.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pareto/datasets/multi_mnist.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "(self.data, self.labels_l, self.labels_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.root / self.processed_folder / self.training_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "(self.data, self.labels_l, self.labels_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.root / self.processed_folder / self.test_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_54": {
                "tensors": {
                    "value": "[target_l, target_r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "multi_mnist_training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(multi_mnist_ims, multi_mnist_labels_l, multi_mnist_labels_r)",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "multi_mnist_test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tmulti_mnist_ims, tmulti_mnist_labels_l, tmulti_mnist_labels_r)",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "multi_labels_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(length, dtype=np.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "multi_labels_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(length, dtype=np.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "ndarray": {
                    "value": "multi_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((length, num_rows, num_cols))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pareto/metrics.py": {
        "torch": {}
    },
    "pareto/networks/multi_lenet.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "(self.fc3_1(x), self.fc3_2(x))",
                            "Tuple"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "(self.fc3_1(x), self.fc3_2(x))",
                            "Tuple"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "(self.fc3_1(x), self.fc3_2(x))",
                            "Tuple"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pareto/optim/hvp_solver.py": {
        "torch": {
            "enable_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[parameters_to_vector(param_grad) for param_grad in param_grads]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_225": {
                "variable": {
                    "value": "param_weighted_hvp",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec.dot(weighted_grad)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "retain_graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "parameters_to_vector_228": {
                "variable": {
                    "value": "weighted_hvp",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[p.contiguous() for p in param_weighted_hvp]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "enable_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_222": {
                "variable": {
                    "value": "weighted_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([parameters_to_vector(param_grad) for param_grad in param_grads], dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "grads.clone().detach()",
                            "Call"
                        ],
                        [
                            "grads_batch",
                            "variable"
                        ]
                    ]
                }
            },
            "grad_152": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parameters",
                            "Attribute"
                        ],
                        [
                            "network.shared_parameters() if shared else network.parameters()",
                            "IfExp"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "param_grad[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "parameters_to_vector_159": {
                "parameters": {
                    "value": "param_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_grads",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "pareto/optim/kkt_solver.py": {
        "torch": {
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_75": {
                "variable": {
                    "value": "self.alphas_momentum_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobians.new_tensor(alphas).detach()",
                            "Call"
                        ],
                        [
                            "alphas_buf",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "pareto/optim/linalg_solver.py": {
        "torch": {
            "as_tensor_104": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.astype(self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_175": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "results[0].astype(self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_228": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rhs.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pareto/optim/min_norm_solver.py": {
        "torch": {
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "submission/min_norm_solver.py": {
        "torch": {}
    }
}