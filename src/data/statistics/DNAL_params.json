{
    "Classification/MobileNetV2/ImageNet/dataset/imagenet/dataset_imagenet.py": {
        "torch": {}
    },
    "Classification/MobileNetV2/ImageNet/models/mobilenet/layers.py": {
        "torch": {
            "Parameter_52": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_13": {
                "*size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/MobileNetV2/ImageNet/models/mobilenet/mobilenetv2.py": {
        "torch": {
            "Sequential_8": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.last_channel, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/MobileNetV2/ImageNet/models/mobilenet/mobilenetv2_AutoML.py": {
        "torch": {
            "Sequential_12": {
                "*args": {
                    "value": "MaskedConv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "MaskedConv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaskedLinear(self.last_channel, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaskedConv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaskedConv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/MobileNetV2/ImageNet/percentage.py": {
        "torch": {
            "save_76": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenetv2_AutoML().cuda()",
                            "Call"
                        ],
                        [
                            "torch.load('model_training').module",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_67": {
                "variable": {
                    "value": "module.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/MobileNetV2/ImageNet/torchsummary.py": {
        "torch": {
            "load_269": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_200": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_56": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_85": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/MobileNetV2/ImageNet/train.py": {
        "torch": {
            "CrossEntropyLoss_65": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_447": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenet().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_451": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mobilenet().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_178": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_199": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_204": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_103": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_arch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_140": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_170": {
                "variable": {
                    "value": "module.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(self.stages))",
                            "Call"
                        ],
                        [
                            "list(range(self.epochs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "epoch_i",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_88": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_param' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_arch' + str(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_381": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_123": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_265": {
                "input": {
                    "value": "module.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_160": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/ResNet50/ImageNet/dataset/imagenet/dataset_imagenet.py": {
        "torch": {}
    },
    "Classification/ResNet50/ImageNet/models/resnet/layers.py": {
        "torch": {
            "Parameter_52": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_13": {
                "*size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/ResNet50/ImageNet/models/resnet/resnet.py": {
        "torch": {
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_153": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_161": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaskedConv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/ResNet50/ImageNet/models/resnet/resnet_AutoML.py": {
        "torch": {
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.scale1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.scale2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.scale1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.scale2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.scale3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * Bottleneck.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.scale1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.scale2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.scale1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.scale2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.scale3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_128": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/ResNet50/ImageNet/percentage.py": {
        "torch": {
            "save_72": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet50_AutoML().cuda()",
                            "Call"
                        ],
                        [
                            "torch.load('model_training').module",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "module.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/ResNet50/ImageNet/torchsummary.py": {
        "torch": {
            "load_269": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_200": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_56": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_85": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/ResNet50/ImageNet/train.py": {
        "torch": {
            "CrossEntropyLoss_64": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_437": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet50(pretrained=False).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_441": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet50(pretrained=False).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_178": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_199": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_204": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_arch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_140": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_170": {
                "variable": {
                    "value": "module.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(self.stages))",
                            "Call"
                        ],
                        [
                            "list(range(self.epochs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "epoch_i",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_param' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_arch' + str(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_371": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_123": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "input": {
                    "value": "module.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_160": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/SuperProxylessNASNets/ImageNet/dataset/imagenet/dataset_imagenet.py": {
        "torch": {}
    },
    "Classification/SuperProxylessNASNets/ImageNet/models/SuperProxylessNAS/layers.py": {
        "torch": {
            "Parameter_52": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_13": {
                "*size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/SuperProxylessNASNets/ImageNet/models/SuperProxylessNAS/modules_AutoML/layers.py": {
        "torch": {
            "Conv2d_172": {
                "variable": {
                    "value": "weight_dict[depth_conv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "padding * self.dilation",
                            "BinOp"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "weight_dict[point_conv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_323": {
                "variable": {
                    "value": "self.depth_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', MaskedConv2d(feature_dim, feature_dim, kernel_size, stride, pad, groups=feature_dim, bias=False)), ('bn', nn.BatchNorm2d(feature_dim)), ('ss', ScaleLayer2d(feature_dim)), ('act', nn.ReLU6(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.point_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', MaskedConv2d(feature_dim, out_channels, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm2d(out_channels)), ('ss', ScaleLayer2d(out_channels))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_68": {
                "variable": {
                    "value": "modules[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_204": {
                "variable": {
                    "value": "weight_dict[pool]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "padding * self.dilation",
                            "BinOp"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_255": {
                "variable": {
                    "value": "modules[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.inverted_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', MaskedConv2d(self.in_channels, feature_dim, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm2d(feature_dim)), ('act', nn.ReLU6(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU6_17": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_208": {
                "variable": {
                    "value": "weight_dict[pool]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "padding * self.dilation",
                            "BinOp"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm1d_244": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_246": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_326": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU6_328": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_334": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_318": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU6_319": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/SuperProxylessNASNets/ImageNet/models/SuperProxylessNAS/modules_AutoML/mix_op.py": {
        "torch": {
            "ModuleList_54": {
                "variable": {
                    "value": "self.candidate_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "candidate_ops",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/SuperProxylessNASNets/ImageNet/models/SuperProxylessNAS/super_proxyless_AutoML.py": {
        "torch": {
            "ModuleList_105": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[first_block]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_112": {
                "variable": {
                    "value": "self.global_avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/SuperProxylessNASNets/ImageNet/summary.py": {
        "torch": {
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_92": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "prod_42": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_45": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/SuperProxylessNASNets/ImageNet/torchsummary.py": {
        "torch": {
            "load_341": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SuperProxylessNASNets_AutoML3().cpu()",
                            "Call"
                        ],
                        [
                            "SuperProxylessNASNets_AutoML3().cpu()",
                            "Call"
                        ],
                        [
                            "torch.load('model_training_').cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SuperProxylessNASNets_AutoML3().cpu()",
                            "Call"
                        ],
                        [
                            "SuperProxylessNASNets_AutoML3().cpu()",
                            "Call"
                        ],
                        [
                            "torch.load('model_training_').cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_training___",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_208": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_55": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md5._mask.cpu().tolist()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md5._mask.cpu().tolist()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md5._mask.cpu().tolist()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md5._mask.cpu().tolist()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_161": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md5._mask.cpu().tolist()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_320": {
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_64": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_93": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md5._mask.cpu().tolist()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md5._mask.cpu().tolist()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/SuperProxylessNASNets/ImageNet/train.py": {
        "torch": {
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_arch9",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_211": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_487": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SuperProxylessNASNets_AutoML1()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_67": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_param79",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_param99",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_187": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_213": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_241": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_246": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_112": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_128": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_arch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_158": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_183": {
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_184": {
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_197": {
                "variable": {
                    "value": "module.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_216": {
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_217": {
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(self.stages))",
                            "Call"
                        ],
                        [
                            "list(range(self.epochs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "epoch_i",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_258": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_261": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_88": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_param' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_arch' + str(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_254": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_420": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_305": {
                "input": {
                    "value": "module.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_195": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/VGG16/ImageNet/dataset/imagenet/dataset_imagenet.py": {
        "torch": {}
    },
    "Classification/VGG16/ImageNet/models/vgg/layers.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "self.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(self.delta.reshape(c, 1) * self.scale.reshape(c, 1)) * self.mask.reshape(c, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1).contiguous().reshape(c, -1)",
                            "Call"
                        ],
                        [
                            "x * self.mask.reshape(c, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_84": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "input": {
                    "value": "self.delta.reshape(c, 1) * self.scale.reshape(c, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/VGG16/ImageNet/models/vgg/vgg.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaskedLinear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/VGG16/ImageNet/models/vgg/vgg_AutoML.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaskedLinear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/VGG16/ImageNet/percentage.py": {
        "torch": {
            "save_93": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg16_bn_AutoML_()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_87": {
                "variable": {
                    "value": "module.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/VGG16/ImageNet/torchsummary.py": {
        "torch": {
            "load_247": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_178": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sum(module._mask[:, :, :, :].data, 2), 2).cpu() / (module.kernel_size[0] * module.kernel_size[1])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "module._mask[:, :].data.cpu()",
                            "Call"
                        ],
                        [
                            "torch.sum(mask, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "module._mask[:, :, :, :].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/VGG16/ImageNet/train.py": {
        "torch": {
            "CrossEntropyLoss_64": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_443": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg16_bn_AutoML().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_447": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg16_bn_AutoML().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_93": {
                "variable": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_param29",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_205": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_210": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_108": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learningrate_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay_arch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_146": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_param, momentum=self.momentum_param, weight_decay=self.weight_decay_param)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(filter(lambda p: p.requires_grad, self.model.parameters()), lr=self.learningrate_arch, momentum=self.momentum_arch, weight_decay=self.weight_decay_arch)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_176": {
                "variable": {
                    "value": "module.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(self.stages))",
                            "Call"
                        ],
                        [
                            "list(range(self.epochs))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "epoch_i",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_223": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_113": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_param' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "module.scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.scale.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "module.ignore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_training_arch' + str(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "self.accuracys1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys1_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "self.accuracys5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "accuracys5_trainning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_training_m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_377": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_129": {
                "*size": {
                    "value": "module.delta.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_268": {
                "input": {
                    "value": "module.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_159": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "input": {
                    "value": "module.delta * module.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}