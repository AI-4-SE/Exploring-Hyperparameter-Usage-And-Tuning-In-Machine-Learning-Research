{
    "data/data_encoders.py": {
        "sklearn": {
            "RobustScaler_501": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KBinsDiscretizer_148": {
                "n_bins": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "encode": {
                    "value": "ordinal",
                    "type": "str",
                    "possible_values": []
                },
                "strategy": {
                    "value": "quantile",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RobustScaler_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PowerTransformer_240": {
                "method": {
                    "value": "yeo-johnson",
                    "type": "str",
                    "possible_values": []
                },
                "standardize": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "QuantileTransformer_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TfidfVectorizer_458": {
                "input": {
                    "value": "content",
                    "type": "str",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "replace",
                    "type": "str",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "ascii",
                    "type": "str",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "analyzer": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                },
                "min_df": {
                    "value": "5 / 100000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RobustScaler_477": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KBinsDiscretizer_419": {
                "n_bins": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "encode": {
                    "value": "ordinal",
                    "type": "str",
                    "possible_values": []
                },
                "strategy": {
                    "value": "quantile",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_304": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(datetimes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cont_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_351": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f(r * 2 * np.pi) for r in rs for f in fs]",
                            "ListComp"
                        ],
                        [
                            "feats / 365",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(df[c].to_numpy()).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(df[c].to_numpy().astype('int32')).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(feats - 2000) / 10",
                            "BinOp"
                        ],
                        [
                            "one_hot(feats, t)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(feats, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(feats, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_489": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_527": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_533": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_102": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_381": {},
            "zeros_like_537": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * mask",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_532": {
                "n": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/raw_data/jd_data/evaluate.py": {
        "sklearn": {
            "roc_auc_score_14": {
                "y_true": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv('./test.csv')",
                            "Call"
                        ],
                        [
                            "list(data2['label'])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv('./kaggle_submission.csv')",
                            "Call"
                        ],
                        [
                            "list(data1['label'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/utils.py": {
        "sklearn": {
            "KFold_308": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/evaluate_experiments.py": {
        "sklearn": {}
    },
    "start_evaluating.py": {
        "sklearn": {
            "roc_auc_score_70": {
                "variable": {
                    "value": "test_auroc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(probs, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_174": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f for f in os.listdir(model_logdir) if checkpoint_id in f]",
                            "ListComp"
                        ],
                        [
                            "os.path.join(model_logdir, f'model_checkpoint_{checkpoint_id}.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_logdir, checkpoint_path[0])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_176": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f for f in os.listdir(model_logdir) if checkpoint_id in f]",
                            "ListComp"
                        ],
                        [
                            "os.path.join(model_logdir, f'model_checkpoint_{checkpoint_id}.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_logdir, checkpoint_path[0])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_197": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "612",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_32": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "n_correct",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_42": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_174": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_176": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "start_training.py": {
        "sklearn": {
            "roc_auc_score_95": {
                "variable": {
                    "value": "val_auroc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_67": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "n_correct",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_289": {
                "seed": {
                    "value": "kwargs['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_49": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.loss_fxn(output, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(probs, dim=0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_171": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_model_weights_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "model(input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_171": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data/DatabaseDataset.py": {
        "torch": {}
    },
    "data/TabularDataset.py": {
        "torch": {
            "Tensor_38": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "self.cat_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "self.cont_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cont_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/samplers.py": {
        "torch": {
            "multinomial_39": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/GNN/GAT.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feats",
                            "Method Argument"
                        ],
                        [
                            "in_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feats * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.r_attn_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TypeConditionalLinear(in_feats, out_feats, self.num_rels, bias=True) for _ in range(num_heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.l_attn_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TypeConditionalLinear(in_feats, out_feats, self.num_rels, bias=True) for _ in range(num_heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.out_attn_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TypeConditionalLinear(out_feats * 2, 1, self.num_rels, bias=True) for _ in range(num_heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.feat_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "feat_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_119": {
                "variable": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat([l, r], dim=1) for (l, r) in zip(l_msg, r_msg)]",
                            "ListComp"
                        ],
                        [
                            "[attn_fc(m, etypes) for (m, attn_fc) in zip(msg, self.out_attn_fcs)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(msg, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "readout",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(readout, fz_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.res_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feats",
                            "Method Argument"
                        ],
                        [
                            "in_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads * out_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_106": {
                "variable": {
                    "value": "self.res_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_117": {
                "tensors": {
                    "value": "[l, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_203": {
                "variable": {
                    "value": "self.res_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/GNN/GCN.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_160": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_etype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.mailbox['etype'].detach()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_160": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_161": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(in_etype).sum(axis=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.index_select(counts, 1, in_etype).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "in_etype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.mailbox['etype'].detach()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "variable": {
                    "value": "in_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.mailbox['msg']",
                            "Subscript"
                        ],
                        [
                            "in_msg / counts",
                            "BinOp"
                        ],
                        [
                            "torch.sum(in_msg, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "jknet_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "readout",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(readout, app_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_178": {
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "block['gc'](g, feats)",
                            "Call"
                        ],
                        [
                            "block['norm'](feats)",
                            "Call"
                        ],
                        [
                            "block['do'](feats)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "block['norm'](feats)",
                            "Call"
                        ],
                        [
                            "block['rgc'](graph=g, x=feats, etypes=etypes)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "block['norm'](feats)",
                            "Call"
                        ],
                        [
                            "block['ergc'](graph=g, feats=feats, ntypes=ntypes, etypes=etypes)",
                            "Call"
                        ],
                        [
                            "graph.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.fc_node(feats, ntypes)",
                            "Call"
                        ],
                        [
                            "feats + msg",
                            "BinOp"
                        ],
                        [
                            "self.activation(feats)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_21": {
                "modules": {
                    "value": "{'gc': GraphConv(in_feats=self.hidden_dim, out_feats=self.hidden_dim, norm=True, bias=True, activation=self.get_act()), 'norm': self.get_norm(self.hidden_dim), 'do': nn.Dropout(self.p_dropout)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_79": {
                "modules": {
                    "value": "{'rgc': RelGraphConv(in_feat=self.hidden_dim, out_feat=self.hidden_dim, num_rels=self.n_relations, regularizer='bdd', num_bases=8, bias=True, dropout=self.p_dropout, activation=self.get_act(), self_loop=False), 'norm': self.get_norm(self.hidden_dim)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_115": {
                "modules": {
                    "value": "{'ergc': ERGCNConv(in_feat=self.hidden_dim, out_feat=self.hidden_dim, n_node_types=self.n_node_types, n_rels=self.n_relations, p_dropout=self.p_dropout, activation=self.get_act()), 'norm': self.get_norm(self.hidden_dim)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/GNN/GNNModelBase.py": {
        "torch": {
            "ModuleDict_46": {
                "variable": {
                    "value": "self.node_initializers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.fcout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fcout_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_113": {
                "variable": {
                    "value": "bdgl.ndata[h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bdgl.number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_node_types.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "loss_class_kwargs[weight]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "prev_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dim",
                            "Attribute"
                        ],
                        [
                            "prev_layer_size + self.hidden_dim",
                            "BinOp"
                        ],
                        [
                            "layer_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "prev_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dim",
                            "Attribute"
                        ],
                        [
                            "prev_layer_size + self.hidden_dim",
                            "BinOp"
                        ],
                        [
                            "layer_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_sizes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_91": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/GNN/HAN.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.project(z).mean(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.gat_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "semantic_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "semantic_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(semantic_embeddings, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "readout",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(readout, fz_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/activations.py": {
        "torch": {
            "gelu_12": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1.0, 2.0] if weight is None else weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_41": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(probs, 1, target.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "focal * nll",
                            "BinOp"
                        ],
                        [
                            "loss * torch.index_select(self.weight, 0, target).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0]).to(model_output)",
                            "Call"
                        ],
                        [
                            "loss + self.xent(l, orig_cat_feats[:, i])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleDict_126": {
                "variable": {
                    "value": "self.cat_decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_172": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model.config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.vocab_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model.config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_24": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(target, num_classes=2).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_25": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(target, num_classes=2).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "index_select_45": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(target, num_classes=2).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.cat_decoders[col_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(model.hidden_dim, model.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_153": {
                "variable": {
                    "value": "unif",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_mask.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "col_cardinalities.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_208": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "p_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_mask",
                            "Attribute"
                        ],
                        [
                            "self.p_mask",
                            "Attribute"
                        ],
                        [
                            "p_mask",
                            "Method Argument"
                        ],
                        [
                            "p_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_217": {
                "variable": {
                    "value": "masked_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, p_mask, device=labels.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_228": {
                "variable": {
                    "value": "random_words",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(model.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_43": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(probs, 1, target.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "prev_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_sizes.pop(0)",
                            "Call"
                        ],
                        [
                            "layer_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model.init_feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "orig_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "orig_cat_feats + ([input[1]] if not isinstance(input[1], list) else input[1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "prev_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_sizes.pop(0)",
                            "Call"
                        ],
                        [
                            "layer_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_69": {
                "p": {
                    "value": "model.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "model.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "model.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "card",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.cat_feat_origin_cards",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_like_146": {
                "input": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[model.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_221": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8, device=labels.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_like_147": {
                "input": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bernoulli_226": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5, device=labels.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "orig_cat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init(input[0][:, i]) for (i, init) in enumerate(model.cat_initializers.values())]",
                            "ListComp"
                        ],
                        [
                            "[torch.cat(orig_cat_feats, dim=1)]",
                            "List"
                        ],
                        [
                            "deepcopy(input[0].detach())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_148": {
                "input": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_97": {
                "n": {
                    "value": "input[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_102": {
                "n": {
                    "value": "input[1].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_222": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_227": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/readouts.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "gate_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*gate_nn_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "feat_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[l for _ in range(n_layers) for l in (nn.Linear(hidden_dim, hidden_dim), act_class())]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/tabular/TabMLP.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init(cat_feats[:, i]) for (i, init) in enumerate(self.cat_initializers.values())]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cat_feats, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cat_feats, cont_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "prev_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_feat_dim",
                            "Attribute"
                        ],
                        [
                            "layer_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "prev_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_feat_dim",
                            "Attribute"
                        ],
                        [
                            "layer_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_sizes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/tabular/TabModelBase.py": {
        "torch": {
            "ModuleDict_46": {
                "variable": {
                    "value": "self.cat_initializers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {
            "Parameter_183": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_types, out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_201": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_sched': lr_sched}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(writer.log_dir, 'train_kwargs.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(writer.log_dir, f'model_checkpoint_{chkpt_name}.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(writer.log_dir, f'model_checkpoint_{chkpt_name}_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_types, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "SummaryWriter_39": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('/tmp/RDB', log_dir, current_time)",
                            "Call"
                        ],
                        [
                            "os.path.join('runs', log_dir)",
                            "Call"
                        ],
                        [
                            "log_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_105": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_310": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "samplers.__dict__[sampler_class_name](dataset, **sampler_class_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "get_DGL_collator(dataset.feature_encoders, dataset.db_info, max_nodes_per_graph=max_nodes_per_graph)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_289": {
                "variable": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_292": {
                "variable": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "cat_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "cont_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cont_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_285": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(device_id[-1])",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "current_device_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}